; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\OgreMain\OgreMorphAnimData.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG5716
_DATA	ENDS
CONST	SEGMENT
$SG5716	DB	'bad allocation', 00H
	ORG $+1
_MAX_FLOAT DD	07f7fffffr			; 3.40282e+038
_ONE_PI	DD	040490fd0r			; 3.14159
_EPSILON DD	03727c5acr			; 1e-005
_RADS_PER_DEG DD 03c8efa35r			; 0.0174533
_DEGS_PER_RAD DD 042652ee1r			; 57.2958
$SG62277 DB	'MorphAnimData', 00H
CONST	ENDS
PUBLIC	??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MemoryDelegation::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MemoryDelegation::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MemoryDelegation::operator=
_TEXT	ENDS
PUBLIC	?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ	; Ogre::RuntimeClass::getBaseClass
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebaseobject.h
;	COMDAT ?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ PROC	; Ogre::RuntimeClass::getBaseClass, COMDAT
; _this$ = ecx

; 20   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 21   : 			return m_pBaseClass;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 22   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ ENDP	; Ogre::RuntimeClass::getBaseClass
_TEXT	ENDS
PUBLIC	?getClassName@RuntimeClass@Ogre@@QBEPBDXZ	; Ogre::RuntimeClass::getClassName
; Function compile flags: /Odtp
;	COMDAT ?getClassName@RuntimeClass@Ogre@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getClassName@RuntimeClass@Ogre@@QBEPBDXZ PROC		; Ogre::RuntimeClass::getClassName, COMDAT
; _this$ = ecx

; 25   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 26   : 			return m_pClassName; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 27   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getClassName@RuntimeClass@Ogre@@QBEPBDXZ ENDP		; Ogre::RuntimeClass::getClassName
_TEXT	ENDS
PUBLIC	?getVersion@RuntimeClass@Ogre@@QBEHXZ		; Ogre::RuntimeClass::getVersion
; Function compile flags: /Odtp
;	COMDAT ?getVersion@RuntimeClass@Ogre@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVersion@RuntimeClass@Ogre@@QBEHXZ PROC		; Ogre::RuntimeClass::getVersion, COMDAT
; _this$ = ecx

; 30   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 			return m_Version;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 32   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getVersion@RuntimeClass@Ogre@@QBEHXZ ENDP		; Ogre::RuntimeClass::getVersion
_TEXT	ENDS
PUBLIC	?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ ; Ogre::RuntimeClass::newObject
; Function compile flags: /Odtp
;	COMDAT ?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ PROC ; Ogre::RuntimeClass::newObject, COMDAT
; _this$ = ecx

; 35   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 			return (*m_pNewFunc)();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx

; 37   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ ENDP ; Ogre::RuntimeClass::newObject
_TEXT	ENDS
PUBLIC	??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::RuntimeClass::operator=
; Function compile flags: /Odtp
;	COMDAT ??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::RuntimeClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::RuntimeClass::operator=
_TEXT	ENDS
PUBLIC	?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::BaseObject::getRTTI
EXTRN	?m_RTTI@BaseObject@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::BaseObject::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::BaseObject::getRTTI, COMDAT
; _this$ = ecx

; 56   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 			return &m_RTTI;

	mov	eax, OFFSET ?m_RTTI@BaseObject@Ogre@@2VRuntimeClass@2@B ; Ogre::BaseObject::m_RTTI

; 58   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::BaseObject::getRTTI
_TEXT	ENDS
PUBLIC	?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z ; Ogre::BaseObject::isExactKindOf
; Function compile flags: /Odtp
;	COMDAT ?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_prtti$ = 8						; size = 4
?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z PROC ; Ogre::BaseObject::isExactKindOf, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			return (getRTTI() == prtti);

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	xor	ecx, ecx
	cmp	eax, DWORD PTR _prtti$[ebp]
	sete	cl
	mov	al, cl

; 63   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z ENDP ; Ogre::BaseObject::isExactKindOf
_TEXT	ENDS
PUBLIC	?release@BaseObject@Ogre@@UAEXXZ		; Ogre::BaseObject::release
; Function compile flags: /Odtp
;	COMDAT ?release@BaseObject@Ogre@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?release@BaseObject@Ogre@@UAEXXZ PROC			; Ogre::BaseObject::release, COMDAT
; _this$ = ecx

; 68   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 			m_RefCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 70   : 			if(m_RefCount <= 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jg	SHORT $LN2@release

; 71   : 			{
; 72   : 				deleteThis();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
$LN2@release:

; 73   : 			}
; 74   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?release@BaseObject@Ogre@@UAEXXZ ENDP			; Ogre::BaseObject::release
_TEXT	ENDS
PUBLIC	?addRef@BaseObject@Ogre@@UAEXXZ			; Ogre::BaseObject::addRef
; Function compile flags: /Odtp
;	COMDAT ?addRef@BaseObject@Ogre@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?addRef@BaseObject@Ogre@@UAEXXZ PROC			; Ogre::BaseObject::addRef, COMDAT
; _this$ = ecx

; 77   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 			m_RefCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 79   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?addRef@BaseObject@Ogre@@UAEXXZ ENDP			; Ogre::BaseObject::addRef
_TEXT	ENDS
PUBLIC	?getRefCount@BaseObject@Ogre@@UAEHXZ		; Ogre::BaseObject::getRefCount
; Function compile flags: /Odtp
;	COMDAT ?getRefCount@BaseObject@Ogre@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRefCount@BaseObject@Ogre@@UAEHXZ PROC		; Ogre::BaseObject::getRefCount, COMDAT
; _this$ = ecx

; 82   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 			return m_RefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 84   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRefCount@BaseObject@Ogre@@UAEHXZ ENDP		; Ogre::BaseObject::getRefCount
_TEXT	ENDS
PUBLIC	?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::BaseObject::_serialize
; Function compile flags: /Odtp
;	COMDAT ?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z PROC	; Ogre::BaseObject::_serialize, COMDAT
; _this$ = ecx

; 87   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 88   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z ENDP	; Ogre::BaseObject::_serialize
_TEXT	ENDS
PUBLIC	??_7BaseObject@Ogre@@6B@			; Ogre::BaseObject::`vftable'
PUBLIC	??0BaseObject@Ogre@@IAE@XZ			; Ogre::BaseObject::BaseObject
PUBLIC	??_R4BaseObject@Ogre@@6B@			; Ogre::BaseObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBaseObject@Ogre@@@8			; Ogre::BaseObject `RTTI Type Descriptor'
PUBLIC	??_R3BaseObject@Ogre@@8				; Ogre::BaseObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BaseObject@Ogre@@8				; Ogre::BaseObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BaseObject@Ogre@@8		; Ogre::BaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@MemoryDelegation@Ogre@@8		; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVMemoryDelegation@Ogre@@@8		; Ogre::MemoryDelegation `RTTI Type Descriptor'
PUBLIC	??_R3MemoryDelegation@Ogre@@8			; Ogre::MemoryDelegation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryDelegation@Ogre@@8			; Ogre::MemoryDelegation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryDelegation@Ogre@@8		; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EBaseObject@Ogre@@MAEPAXI@Z			; Ogre::BaseObject::`vector deleting destructor'
PUBLIC	?deleteThis@BaseObject@Ogre@@MAEXXZ		; Ogre::BaseObject::deleteThis
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryDelegation@Ogre@@8 DD FLAT:??_R0?AVMemoryDelegation@Ogre@@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R2MemoryDelegation@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MemoryDelegation@Ogre@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R3MemoryDelegation@Ogre@@8 DD 00H			; Ogre::MemoryDelegation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryDelegation@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMemoryDelegation@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MemoryDelegation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryDelegation@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R13?0A@EA@MemoryDelegation@Ogre@@8 DD FLAT:??_R0?AVMemoryDelegation@Ogre@@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BaseObject@Ogre@@8 DD FLAT:??_R0?AVBaseObject@Ogre@@@8 ; Ogre::BaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R2BaseObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8 ; Ogre::BaseObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R3BaseObject@Ogre@@8 DD 00H				; Ogre::BaseObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBaseObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVBaseObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::BaseObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBaseObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BaseObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4BaseObject@Ogre@@6B@ DD 00H			; Ogre::BaseObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBaseObject@Ogre@@@8
	DD	FLAT:??_R3BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7BaseObject@Ogre@@6B@
CONST	SEGMENT
??_7BaseObject@Ogre@@6B@ DD FLAT:??_R4BaseObject@Ogre@@6B@ ; Ogre::BaseObject::`vftable'
	DD	FLAT:?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EBaseObject@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0BaseObject@Ogre@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BaseObject@Ogre@@IAE@XZ PROC				; Ogre::BaseObject::BaseObject, COMDAT
; _this$ = ecx

; 92   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseObject@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 1

; 93   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0BaseObject@Ogre@@IAE@XZ ENDP				; Ogre::BaseObject::BaseObject
_TEXT	ENDS
PUBLIC	??1BaseObject@Ogre@@MAE@XZ			; Ogre::BaseObject::~BaseObject
; Function compile flags: /Odtp
;	COMDAT ??1BaseObject@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BaseObject@Ogre@@MAE@XZ PROC				; Ogre::BaseObject::~BaseObject, COMDAT
; _this$ = ecx

; 96   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseObject@Ogre@@6B@

; 97   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1BaseObject@Ogre@@MAE@XZ ENDP				; Ogre::BaseObject::~BaseObject
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deleteThis@BaseObject@Ogre@@MAEXXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
$T73975 = -8						; size = 4
$T73974 = -4						; size = 4
?deleteThis@BaseObject@Ogre@@MAEXXZ PROC		; Ogre::BaseObject::deleteThis, COMDAT
; _this$ = ecx

; 100  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 			delete this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T73975[ebp], eax
	mov	ecx, DWORD PTR $T73975[ebp]
	mov	DWORD PTR $T73974[ebp], ecx
	cmp	DWORD PTR $T73974[ebp], 0
	je	SHORT $LN3@deleteThis
	push	1
	mov	edx, DWORD PTR $T73974[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T73974[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN1@deleteThis
$LN3@deleteThis:
	mov	DWORD PTR tv70[ebp], 0
$LN1@deleteThis:

; 102  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?deleteThis@BaseObject@Ogre@@MAEXXZ ENDP		; Ogre::BaseObject::deleteThis
_TEXT	ENDS
PUBLIC	??0BaseObject@Ogre@@QAE@ABV01@@Z		; Ogre::BaseObject::BaseObject
; Function compile flags: /Odtp
;	COMDAT ??0BaseObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0BaseObject@Ogre@@QAE@ABV01@@Z PROC			; Ogre::BaseObject::BaseObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR ___that$[ebp], 0
	je	SHORT $LN3@BaseObject
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@BaseObject
$LN3@BaseObject:
	mov	DWORD PTR tv68[ebp], 0
$LN4@BaseObject:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7BaseObject@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BaseObject@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::BaseObject::BaseObject
_TEXT	ENDS
PUBLIC	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::BaseObject::operator=
; Function compile flags: /Odtp
;	COMDAT ??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BaseObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BaseObject::operator=
_TEXT	ENDS
PUBLIC	??_GBaseObject@Ogre@@MAEPAXI@Z			; Ogre::BaseObject::`scalar deleting destructor'
EXTRN	??3MemoryDelegation@Ogre@@SAXPAXI@Z:PROC	; Ogre::MemoryDelegation::operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GBaseObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBaseObject@Ogre@@MAEPAXI@Z PROC			; Ogre::BaseObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBaseObject@Ogre@@MAEPAXI@Z ENDP			; Ogre::BaseObject::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_VMemoryDelegation@Ogre@@SAXPAXI@Z:PROC	; Ogre::MemoryDelegation::operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_EBaseObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EBaseObject@Ogre@@MAEPAXI@Z PROC			; Ogre::BaseObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1BaseObject@Ogre@@MAE@XZ	; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EBaseObject@Ogre@@MAEPAXI@Z ENDP			; Ogre::BaseObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z	; Ogre::FixedString::handle2Ptr
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrefixedstring.h
;	COMDAT ?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z
_TEXT	SEGMENT
_h$ = 8							; size = 4
?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z PROC		; Ogre::FixedString::handle2Ptr, COMDAT

; 22   : 		{

	push	ebp
	mov	ebp, esp

; 23   : 			return (const char *)h;

	mov	eax, DWORD PTR _h$[ebp]

; 24   : 		}

	pop	ebp
	ret	0
?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z ENDP		; Ogre::FixedString::handle2Ptr
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@XZ			; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FixedString@Ogre@@QAE@XZ PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 27   : 		FixedString() : m_StrHandle(NULL){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0FixedString@Ogre@@QAE@XZ ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PAX@Z			; Ogre::FixedString::FixedString
EXTRN	?addRef@FixedString@Ogre@@SAXPAX@Z:PROC		; Ogre::FixedString::addRef
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_h$ = 8							; size = 4
??0FixedString@Ogre@@QAE@PAX@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 29   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax], ecx

; 30   : 			addRef(h);

	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	call	?addRef@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::addRef
	add	esp, 4

; 31   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@PAX@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@ABV01@@Z		; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0FixedString@Ogre@@QAE@ABV01@@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 34   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 35   : 			addRef(m_StrHandle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?addRef@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::addRef
	add	esp, 4

; 36   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PBD@Z			; Ogre::FixedString::FixedString
EXTRN	?insert@FixedString@Ogre@@SAPAXPBDH@Z:PROC	; Ogre::FixedString::insert
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstr$ = 8						; size = 4
??0FixedString@Ogre@@QAE@PBD@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 38   : 		FixedString(const char *pstr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 		{
; 40   : 			m_StrHandle = insert(pstr); 

	push	-1
	mov	eax, DWORD PTR _pstr$[ebp]
	push	eax
	call	?insert@FixedString@Ogre@@SAPAXPBDH@Z	; Ogre::FixedString::insert
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 41   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@PBD@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PBDI@Z			; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstr$ = 8						; size = 4
_len$ = 12						; size = 4
??0FixedString@Ogre@@QAE@PBDI@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 43   : 		FixedString(const char *pstr, size_t len)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 		{
; 45   : 			m_StrHandle = insert(pstr, (int)len); 

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pstr$[ebp]
	push	ecx
	call	?insert@FixedString@Ogre@@SAPAXPBDH@Z	; Ogre::FixedString::insert
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 46   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0FixedString@Ogre@@QAE@PBDI@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??1FixedString@Ogre@@QAE@XZ			; Ogre::FixedString::~FixedString
EXTRN	?release@FixedString@Ogre@@SAXPAX@Z:PROC	; Ogre::FixedString::release
; Function compile flags: /Odtp
;	COMDAT ??1FixedString@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FixedString@Ogre@@QAE@XZ PROC			; Ogre::FixedString::~FixedString, COMDAT
; _this$ = ecx

; 49   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 			release(m_StrHandle); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?release@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::release
	add	esp, 4

; 51   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1FixedString@Ogre@@QAE@XZ ENDP			; Ogre::FixedString::~FixedString
_TEXT	ENDS
PUBLIC	??BFixedString@Ogre@@QBEPBDXZ			; Ogre::FixedString::operator char const *
; Function compile flags: /Odtp
;	COMDAT ??BFixedString@Ogre@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BFixedString@Ogre@@QBEPBDXZ PROC			; Ogre::FixedString::operator char const *, COMDAT
; _this$ = ecx

; 54   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 			return handle2Ptr(m_StrHandle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z ; Ogre::FixedString::handle2Ptr
	add	esp, 4

; 56   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BFixedString@Ogre@@QBEPBDXZ ENDP			; Ogre::FixedString::operator char const *
_TEXT	ENDS
PUBLIC	?getHandle@FixedString@Ogre@@QBEPAXXZ		; Ogre::FixedString::getHandle
; Function compile flags: /Odtp
;	COMDAT ?getHandle@FixedString@Ogre@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHandle@FixedString@Ogre@@QBEPAXXZ PROC		; Ogre::FixedString::getHandle, COMDAT
; _this$ = ecx

; 59   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 			return m_StrHandle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 61   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getHandle@FixedString@Ogre@@QBEPAXXZ ENDP		; Ogre::FixedString::getHandle
_TEXT	ENDS
PUBLIC	?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ	; Ogre::Resource::getRTTI
EXTRN	?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B:BYTE	; Ogre::Resource::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreresource.h
;	COMDAT ?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::Resource::getRTTI, COMDAT
; _this$ = ecx

; 39   : 		DECLARE_RTTI_VIRTUAL(Resource)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B ; Ogre::Resource::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::Resource::getRTTI
_TEXT	ENDS
PUBLIC	?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ ; Ogre::Resource::getResPath
; Function compile flags: /Odtp
;	COMDAT ?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ PROC	; Ogre::Resource::getResPath, COMDAT
; _this$ = ecx

; 44   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 			return m_ResPath;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8

; 46   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ ENDP	; Ogre::Resource::getResPath
_TEXT	ENDS
PUBLIC	?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z ; Ogre::Resource::setResPath
EXTRN	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z:PROC	; Ogre::FixedString::operator=
; Function compile flags: /Odtp
;	COMDAT ?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_path$ = 8						; size = 4
?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z PROC	; Ogre::Resource::setResPath, COMDAT
; _this$ = ecx

; 48   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 			m_ResPath = path;

	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=

; 50   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z ENDP	; Ogre::Resource::setResPath
_TEXT	ENDS
PUBLIC	??_7Resource@Ogre@@6B@				; Ogre::Resource::`vftable'
PUBLIC	??0Resource@Ogre@@IAE@XZ			; Ogre::Resource::Resource
PUBLIC	??_R4Resource@Ogre@@6B@				; Ogre::Resource::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVResource@Ogre@@@8			; Ogre::Resource `RTTI Type Descriptor'
PUBLIC	??_R3Resource@Ogre@@8				; Ogre::Resource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Resource@Ogre@@8				; Ogre::Resource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Resource@Ogre@@8			; Ogre::Resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EResource@Ogre@@MAEPAXI@Z			; Ogre::Resource::`vector deleting destructor'
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	?release@Resource@Ogre@@UAEXXZ:PROC		; Ogre::Resource::release
EXTRN	?addRef@Resource@Ogre@@UAEXXZ:PROC		; Ogre::Resource::addRef
EXTRN	?getRefCount@Resource@Ogre@@UAEHXZ:PROC		; Ogre::Resource::getRefCount
;	COMDAT ??_R1A@?0A@EA@Resource@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Resource@Ogre@@8 DD FLAT:??_R0?AVResource@Ogre@@@8 ; Ogre::Resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Resource@Ogre@@8
rdata$r	SEGMENT
??_R2Resource@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Resource@Ogre@@8 ; Ogre::Resource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3Resource@Ogre@@8
rdata$r	SEGMENT
??_R3Resource@Ogre@@8 DD 00H				; Ogre::Resource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVResource@Ogre@@@8
_DATA	SEGMENT
??_R0?AVResource@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Resource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVResource@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Resource@Ogre@@6B@
rdata$r	SEGMENT
??_R4Resource@Ogre@@6B@ DD 00H				; Ogre::Resource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVResource@Ogre@@@8
	DD	FLAT:??_R3Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Resource@Ogre@@6B@
CONST	SEGMENT
??_7Resource@Ogre@@6B@ DD FLAT:??_R4Resource@Ogre@@6B@	; Ogre::Resource::`vftable'
	DD	FLAT:?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EResource@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Resource@Ogre@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@IAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@IAE@XZ$1
__ehfuncinfo$??0Resource@Ogre@@IAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Resource@Ogre@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Resource@Ogre@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Resource@Ogre@@IAE@XZ PROC				; Ogre::Resource::Resource, COMDAT
; _this$ = ecx

; 72   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Resource@Ogre@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@IAE@XZ		; Ogre::BaseObject::BaseObject
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Resource@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 1

; 73   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Resource@Ogre@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0Resource@Ogre@@IAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0Resource@Ogre@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Resource@Ogre@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Resource@Ogre@@IAE@XZ ENDP				; Ogre::Resource::Resource
PUBLIC	??1Resource@Ogre@@MAE@XZ			; Ogre::Resource::~Resource
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Resource@Ogre@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Resource@Ogre@@MAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1Resource@Ogre@@MAE@XZ$1
__ehfuncinfo$??1Resource@Ogre@@MAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1Resource@Ogre@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1Resource@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Resource@Ogre@@MAE@XZ PROC				; Ogre::Resource::~Resource, COMDAT
; _this$ = ecx

; 76   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Resource@Ogre@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Resource@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 77   : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Resource@Ogre@@MAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??1Resource@Ogre@@MAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??1Resource@Ogre@@MAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Resource@Ogre@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Resource@Ogre@@MAE@XZ ENDP				; Ogre::Resource::~Resource
PUBLIC	??0Resource@Ogre@@QAE@ABV01@@Z			; Ogre::Resource::Resource
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Resource@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$1
__ehfuncinfo$??0Resource@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Resource@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Resource@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Resource@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Resource::Resource, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Resource@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7Resource@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0FixedString@Ogre@@QAE@ABV01@@Z	; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0Resource@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Resource@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Resource@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Resource::Resource
PUBLIC	??4Resource@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Resource::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Resource@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Resource@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::Resource::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Resource@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::Resource::operator=
_TEXT	ENDS
PUBLIC	??_GResource@Ogre@@MAEPAXI@Z			; Ogre::Resource::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GResource@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GResource@Ogre@@MAEPAXI@Z PROC			; Ogre::Resource::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GResource@Ogre@@MAEPAXI@Z ENDP			; Ogre::Resource::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EResource@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EResource@Ogre@@MAEPAXI@Z PROC			; Ogre::Resource::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@2
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EResource@Ogre@@MAEPAXI@Z ENDP			; Ogre::Resource::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@BaseAnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::BaseAnimationData::getRTTI
EXTRN	?m_RTTI@BaseAnimationData@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::BaseAnimationData::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreanimationdata.h
;	COMDAT ?getRTTI@BaseAnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@BaseAnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::BaseAnimationData::getRTTI, COMDAT
; _this$ = ecx

; 41   : 		DECLARE_RTTI_VIRTUAL(BaseAnimationData)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@BaseAnimationData@Ogre@@2VRuntimeClass@2@B ; Ogre::BaseAnimationData::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@BaseAnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::BaseAnimationData::getRTTI
_TEXT	ENDS
PUBLIC	??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
PUBLIC	??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
PUBLIC	??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
PUBLIC	??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
PUBLIC	??_7BaseAnimationData@Ogre@@6B@			; Ogre::BaseAnimationData::`vftable'
PUBLIC	??0BaseAnimationData@Ogre@@QAE@XZ		; Ogre::BaseAnimationData::BaseAnimationData
PUBLIC	??_R4BaseAnimationData@Ogre@@6B@		; Ogre::BaseAnimationData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBaseAnimationData@Ogre@@@8		; Ogre::BaseAnimationData `RTTI Type Descriptor'
PUBLIC	??_R3BaseAnimationData@Ogre@@8			; Ogre::BaseAnimationData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BaseAnimationData@Ogre@@8			; Ogre::BaseAnimationData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BaseAnimationData@Ogre@@8		; Ogre::BaseAnimationData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EBaseAnimationData@Ogre@@UAEPAXI@Z		; Ogre::BaseAnimationData::`vector deleting destructor'
EXTRN	?_serialize@BaseAnimationData@Ogre@@UAEXAAVArchive@2@H@Z:PROC ; Ogre::BaseAnimationData::_serialize
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@BaseAnimationData@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BaseAnimationData@Ogre@@8 DD FLAT:??_R0?AVBaseAnimationData@Ogre@@@8 ; Ogre::BaseAnimationData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BaseAnimationData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2BaseAnimationData@Ogre@@8
rdata$r	SEGMENT
??_R2BaseAnimationData@Ogre@@8 DD FLAT:??_R1A@?0A@EA@BaseAnimationData@Ogre@@8 ; Ogre::BaseAnimationData::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3BaseAnimationData@Ogre@@8
rdata$r	SEGMENT
??_R3BaseAnimationData@Ogre@@8 DD 00H			; Ogre::BaseAnimationData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2BaseAnimationData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBaseAnimationData@Ogre@@@8
_DATA	SEGMENT
??_R0?AVBaseAnimationData@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::BaseAnimationData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBaseAnimationData@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BaseAnimationData@Ogre@@6B@
rdata$r	SEGMENT
??_R4BaseAnimationData@Ogre@@6B@ DD 00H			; Ogre::BaseAnimationData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBaseAnimationData@Ogre@@@8
	DD	FLAT:??_R3BaseAnimationData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7BaseAnimationData@Ogre@@6B@
CONST	SEGMENT
??_7BaseAnimationData@Ogre@@6B@ DD FLAT:??_R4BaseAnimationData@Ogre@@6B@ ; Ogre::BaseAnimationData::`vftable'
	DD	FLAT:?getRTTI@BaseAnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseAnimationData@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EBaseAnimationData@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0BaseAnimationData@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@XZ$2
__ehfuncinfo$??0BaseAnimationData@Ogre@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0BaseAnimationData@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0BaseAnimationData@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0BaseAnimationData@Ogre@@QAE@XZ PROC			; Ogre::BaseAnimationData::BaseAnimationData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BaseAnimationData@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseAnimationData@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
__ehhandler$??0BaseAnimationData@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BaseAnimationData@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BaseAnimationData@Ogre@@QAE@XZ ENDP			; Ogre::BaseAnimationData::BaseAnimationData
PUBLIC	??1BaseAnimationData@Ogre@@UAE@XZ		; Ogre::BaseAnimationData::~BaseAnimationData
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1BaseAnimationData@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BaseAnimationData@Ogre@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1BaseAnimationData@Ogre@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1BaseAnimationData@Ogre@@UAE@XZ$2
__ehfuncinfo$??1BaseAnimationData@Ogre@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1BaseAnimationData@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1BaseAnimationData@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BaseAnimationData@Ogre@@UAE@XZ PROC			; Ogre::BaseAnimationData::~BaseAnimationData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1BaseAnimationData@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1BaseAnimationData@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??1BaseAnimationData@Ogre@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
__unwindfunclet$??1BaseAnimationData@Ogre@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
__ehhandler$??1BaseAnimationData@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1BaseAnimationData@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1BaseAnimationData@Ogre@@UAE@XZ ENDP			; Ogre::BaseAnimationData::~BaseAnimationData
PUBLIC	??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
PUBLIC	??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
PUBLIC	??0BaseAnimationData@Ogre@@QAE@ABV01@@Z		; Ogre::BaseAnimationData::BaseAnimationData
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z$2
__ehfuncinfo$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0BaseAnimationData@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0BaseAnimationData@Ogre@@QAE@ABV01@@Z PROC		; Ogre::BaseAnimationData::BaseAnimationData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7BaseAnimationData@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
__unwindfunclet$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
__ehhandler$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BaseAnimationData@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BaseAnimationData@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::BaseAnimationData::BaseAnimationData
PUBLIC	??4?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator=
PUBLIC	??4?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator=
PUBLIC	??4BaseAnimationData@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::BaseAnimationData::operator=
; Function compile flags: /Odtp
;	COMDAT ??4BaseAnimationData@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BaseAnimationData@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::BaseAnimationData::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??4?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 40					; 00000028H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??4?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BaseAnimationData@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::BaseAnimationData::operator=
_TEXT	ENDS
PUBLIC	??_GBaseAnimationData@Ogre@@UAEPAXI@Z		; Ogre::BaseAnimationData::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GBaseAnimationData@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBaseAnimationData@Ogre@@UAEPAXI@Z PROC		; Ogre::BaseAnimationData::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseAnimationData@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBaseAnimationData@Ogre@@UAEPAXI@Z ENDP		; Ogre::BaseAnimationData::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EBaseAnimationData@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EBaseAnimationData@Ogre@@UAEPAXI@Z PROC		; Ogre::BaseAnimationData::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@3
	push	OFFSET ??1BaseAnimationData@Ogre@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	64					; 00000040H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@3
	push	64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@3
$LN3@vector@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseAnimationData@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@3
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EBaseAnimationData@Ogre@@UAEPAXI@Z ENDP		; Ogre::BaseAnimationData::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@AnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::AnimationData::getRTTI
EXTRN	?m_RTTI@AnimationData@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::AnimationData::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@AnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@AnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::AnimationData::getRTTI, COMDAT
; _this$ = ecx

; 60   : 		DECLARE_RTTI(AnimationData)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@AnimationData@Ogre@@2VRuntimeClass@2@B ; Ogre::AnimationData::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@AnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::AnimationData::getRTTI
_TEXT	ENDS
PUBLIC	?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::AnimationData::newObject
EXTRN	??0AnimationData@Ogre@@QAE@XZ:PROC		; Ogre::AnimationData::AnimationData
EXTRN	??2MemoryDelegation@Ogre@@SAPAXI@Z:PROC		; Ogre::MemoryDelegation::operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T74099 = -20						; size = 4
$T74098 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ PROC ; Ogre::AnimationData::newObject, COMDAT

; 60   : 		DECLARE_RTTI(AnimationData)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	112					; 00000070H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T74099[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T74099[ebp], 0
	je	SHORT $LN3@newObject
	mov	ecx, DWORD PTR $T74099[ebp]
	call	??0AnimationData@Ogre@@QAE@XZ		; Ogre::AnimationData::AnimationData
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject
$LN3@newObject:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T74098[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T74098[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	112					; 00000070H
	mov	eax, DWORD PTR $T74099[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@AnimationData@Ogre@@SAPAVBaseObject@2@XZ ENDP ; Ogre::AnimationData::newObject
PUBLIC	??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::~vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
PUBLIC	??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::~vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
PUBLIC	??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
PUBLIC	??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
PUBLIC	??_7AnimationData@Ogre@@6B@			; Ogre::AnimationData::`vftable'
PUBLIC	??0AnimationData@Ogre@@QAE@ABV01@@Z		; Ogre::AnimationData::AnimationData
PUBLIC	??_R4AnimationData@Ogre@@6B@			; Ogre::AnimationData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVAnimationData@Ogre@@@8			; Ogre::AnimationData `RTTI Type Descriptor'
PUBLIC	??_R3AnimationData@Ogre@@8			; Ogre::AnimationData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AnimationData@Ogre@@8			; Ogre::AnimationData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AnimationData@Ogre@@8		; Ogre::AnimationData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EAnimationData@Ogre@@UAEPAXI@Z		; Ogre::AnimationData::`vector deleting destructor'
EXTRN	?_serialize@AnimationData@Ogre@@UAEXAAVArchive@2@H@Z:PROC ; Ogre::AnimationData::_serialize
EXTRN	?getType@AnimationData@Ogre@@UAE?AW4AnimationType@2@XZ:PROC ; Ogre::AnimationData::getType
;	COMDAT ??_R1A@?0A@EA@AnimationData@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AnimationData@Ogre@@8 DD FLAT:??_R0?AVAnimationData@Ogre@@@8 ; Ogre::AnimationData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AnimationData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2AnimationData@Ogre@@8
rdata$r	SEGMENT
??_R2AnimationData@Ogre@@8 DD FLAT:??_R1A@?0A@EA@AnimationData@Ogre@@8 ; Ogre::AnimationData::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseAnimationData@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3AnimationData@Ogre@@8
rdata$r	SEGMENT
??_R3AnimationData@Ogre@@8 DD 00H			; Ogre::AnimationData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2AnimationData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAnimationData@Ogre@@@8
_DATA	SEGMENT
??_R0?AVAnimationData@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::AnimationData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAnimationData@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4AnimationData@Ogre@@6B@
rdata$r	SEGMENT
??_R4AnimationData@Ogre@@6B@ DD 00H			; Ogre::AnimationData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAnimationData@Ogre@@@8
	DD	FLAT:??_R3AnimationData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7AnimationData@Ogre@@6B@
CONST	SEGMENT
??_7AnimationData@Ogre@@6B@ DD FLAT:??_R4AnimationData@Ogre@@6B@ ; Ogre::AnimationData::`vftable'
	DD	FLAT:?getRTTI@AnimationData@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@AnimationData@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EAnimationData@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:?getType@AnimationData@Ogre@@UAE?AW4AnimationType@2@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0AnimationData@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AnimationData@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AnimationData@Ogre@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0AnimationData@Ogre@@QAE@ABV01@@Z$2
__ehfuncinfo$??0AnimationData@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0AnimationData@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0AnimationData@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0AnimationData@Ogre@@QAE@ABV01@@Z PROC		; Ogre::AnimationData::AnimationData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0AnimationData@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseAnimationData@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7AnimationData@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 88					; 00000058H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AnimationData@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseAnimationData@Ogre@@UAE@XZ
__unwindfunclet$??0AnimationData@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::~vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
__unwindfunclet$??0AnimationData@Ogre@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	jmp	??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::~vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
__ehhandler$??0AnimationData@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0AnimationData@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0AnimationData@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::AnimationData::AnimationData
PUBLIC	??4?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator=
PUBLIC	??4?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator=
PUBLIC	??4AnimationData@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::AnimationData::operator=
; Function compile flags: /Odtp
;	COMDAT ??4AnimationData@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4AnimationData@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::AnimationData::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4BaseAnimationData@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??4?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 88					; 00000058H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	??4?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4AnimationData@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::AnimationData::operator=
_TEXT	ENDS
PUBLIC	??_GAnimationData@Ogre@@UAEPAXI@Z		; Ogre::AnimationData::`scalar deleting destructor'
EXTRN	??1AnimationData@Ogre@@UAE@XZ:PROC		; Ogre::AnimationData::~AnimationData
; Function compile flags: /Odtp
;	COMDAT ??_GAnimationData@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GAnimationData@Ogre@@UAEPAXI@Z PROC			; Ogre::AnimationData::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AnimationData@Ogre@@UAE@XZ		; Ogre::AnimationData::~AnimationData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	push	112					; 00000070H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GAnimationData@Ogre@@UAEPAXI@Z ENDP			; Ogre::AnimationData::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EAnimationData@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EAnimationData@Ogre@@UAEPAXI@Z PROC			; Ogre::AnimationData::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@4
	push	OFFSET ??1AnimationData@Ogre@@UAE@XZ	; Ogre::AnimationData::~AnimationData
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	112					; 00000070H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@4
	push	112					; 00000070H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@4
$LN3@vector@4:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AnimationData@Ogre@@UAE@XZ		; Ogre::AnimationData::~AnimationData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@4
	push	112					; 00000070H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@4:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EAnimationData@Ogre@@UAEPAXI@Z ENDP			; Ogre::AnimationData::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?size@?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::VertexElement,std::allocator<Ogre::VertexElement> >::size
PUBLIC	?getNumElements@VertexFormat@Ogre@@QBEIXZ	; Ogre::VertexFormat::getNumElements
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevertexformat.h
;	COMDAT ?getNumElements@VertexFormat@Ogre@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumElements@VertexFormat@Ogre@@QBEIXZ PROC		; Ogre::VertexFormat::getNumElements, COMDAT
; _this$ = ecx

; 82   : 		uint getNumElements() const{ return (uint)m_Elements.size(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::VertexElement,std::allocator<Ogre::VertexElement> >::size
	mov	esp, ebp
	pop	ebp
	ret	0
?getNumElements@VertexFormat@Ogre@@QBEIXZ ENDP		; Ogre::VertexFormat::getNumElements
_TEXT	ENDS
PUBLIC	??A?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEABVVertexElement@Ogre@@I@Z ; std::vector<Ogre::VertexElement,std::allocator<Ogre::VertexElement> >::operator[]
PUBLIC	?getElement@VertexFormat@Ogre@@QBEABVVertexElement@2@I@Z ; Ogre::VertexFormat::getElement
; Function compile flags: /Odtp
;	COMDAT ?getElement@VertexFormat@Ogre@@QBEABVVertexElement@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getElement@VertexFormat@Ogre@@QBEABVVertexElement@2@I@Z PROC ; Ogre::VertexFormat::getElement, COMDAT
; _this$ = ecx

; 83   : 		const VertexElement &getElement(uint i) const{ return m_Elements[i]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEABVVertexElement@Ogre@@I@Z ; std::vector<Ogre::VertexElement,std::allocator<Ogre::VertexElement> >::operator[]
	mov	esp, ebp
	pop	ebp
	ret	4
?getElement@VertexFormat@Ogre@@QBEABVVertexElement@2@I@Z ENDP ; Ogre::VertexFormat::getElement
_TEXT	ENDS
PUBLIC	?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::VertexBuffer::getRTTI
EXTRN	?m_RTTI@VertexBuffer@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::VertexBuffer::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrerendertypes.h
;	COMDAT ?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::VertexBuffer::getRTTI, COMDAT
; _this$ = ecx

; 223  : 		DECLARE_RTTI_VIRTUAL(VertexBuffer)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@VertexBuffer@Ogre@@2VRuntimeClass@2@B ; Ogre::VertexBuffer::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::VertexBuffer::getRTTI
_TEXT	ENDS
PUBLIC	??_7VertexBuffer@Ogre@@6B@			; Ogre::VertexBuffer::`vftable'
PUBLIC	??0VertexBuffer@Ogre@@QAE@XZ			; Ogre::VertexBuffer::VertexBuffer
PUBLIC	??_R4VertexBuffer@Ogre@@6B@			; Ogre::VertexBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVVertexBuffer@Ogre@@@8			; Ogre::VertexBuffer `RTTI Type Descriptor'
PUBLIC	??_R3VertexBuffer@Ogre@@8			; Ogre::VertexBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VertexBuffer@Ogre@@8			; Ogre::VertexBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VertexBuffer@Ogre@@8		; Ogre::VertexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EVertexBuffer@Ogre@@UAEPAXI@Z		; Ogre::VertexBuffer::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@VertexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VertexBuffer@Ogre@@8 DD FLAT:??_R0?AVVertexBuffer@Ogre@@@8 ; Ogre::VertexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VertexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2VertexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R2VertexBuffer@Ogre@@8 DD FLAT:??_R1A@?0A@EA@VertexBuffer@Ogre@@8 ; Ogre::VertexBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3VertexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R3VertexBuffer@Ogre@@8 DD 00H			; Ogre::VertexBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2VertexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVertexBuffer@Ogre@@@8
_DATA	SEGMENT
??_R0?AVVertexBuffer@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::VertexBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVertexBuffer@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4VertexBuffer@Ogre@@6B@
rdata$r	SEGMENT
??_R4VertexBuffer@Ogre@@6B@ DD 00H			; Ogre::VertexBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVVertexBuffer@Ogre@@@8
	DD	FLAT:??_R3VertexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7VertexBuffer@Ogre@@6B@
CONST	SEGMENT
??_7VertexBuffer@Ogre@@6B@ DD FLAT:??_R4VertexBuffer@Ogre@@6B@ ; Ogre::VertexBuffer::`vftable'
	DD	FLAT:?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EVertexBuffer@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0VertexBuffer@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0VertexBuffer@Ogre@@QAE@XZ$0
__ehfuncinfo$??0VertexBuffer@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0VertexBuffer@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0VertexBuffer@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0VertexBuffer@Ogre@@QAE@XZ PROC			; Ogre::VertexBuffer::VertexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0VertexBuffer@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7VertexBuffer@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0VertexBuffer@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0VertexBuffer@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0VertexBuffer@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0VertexBuffer@Ogre@@QAE@XZ ENDP			; Ogre::VertexBuffer::VertexBuffer
PUBLIC	??1VertexBuffer@Ogre@@UAE@XZ			; Ogre::VertexBuffer::~VertexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1VertexBuffer@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1VertexBuffer@Ogre@@UAE@XZ$0
__ehfuncinfo$??1VertexBuffer@Ogre@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1VertexBuffer@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1VertexBuffer@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1VertexBuffer@Ogre@@UAE@XZ PROC			; Ogre::VertexBuffer::~VertexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1VertexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1VertexBuffer@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??1VertexBuffer@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1VertexBuffer@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1VertexBuffer@Ogre@@UAE@XZ ENDP			; Ogre::VertexBuffer::~VertexBuffer
PUBLIC	??0VertexBuffer@Ogre@@QAE@ABV01@@Z		; Ogre::VertexBuffer::VertexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0VertexBuffer@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0VertexBuffer@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0VertexBuffer@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0VertexBuffer@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0VertexBuffer@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0VertexBuffer@Ogre@@QAE@ABV01@@Z PROC			; Ogre::VertexBuffer::VertexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0VertexBuffer@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7VertexBuffer@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0VertexBuffer@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0VertexBuffer@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0VertexBuffer@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0VertexBuffer@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::VertexBuffer::VertexBuffer
PUBLIC	??4VertexBuffer@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::VertexBuffer::operator=
; Function compile flags: /Odtp
;	COMDAT ??4VertexBuffer@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4VertexBuffer@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::VertexBuffer::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4VertexBuffer@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::VertexBuffer::operator=
_TEXT	ENDS
PUBLIC	??_GVertexBuffer@Ogre@@UAEPAXI@Z		; Ogre::VertexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GVertexBuffer@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GVertexBuffer@Ogre@@UAEPAXI@Z PROC			; Ogre::VertexBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VertexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GVertexBuffer@Ogre@@UAEPAXI@Z ENDP			; Ogre::VertexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EVertexBuffer@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EVertexBuffer@Ogre@@UAEPAXI@Z PROC			; Ogre::VertexBuffer::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@5
	push	OFFSET ??1VertexBuffer@Ogre@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@5
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@5
$LN3@vector@5:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VertexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@5
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@5:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EVertexBuffer@Ogre@@UAEPAXI@Z ENDP			; Ogre::VertexBuffer::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::IndexBuffer::getRTTI
EXTRN	?m_RTTI@IndexBuffer@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::IndexBuffer::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::IndexBuffer::getRTTI, COMDAT
; _this$ = ecx

; 230  : 		DECLARE_RTTI_VIRTUAL(IndexBuffer)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@IndexBuffer@Ogre@@2VRuntimeClass@2@B ; Ogre::IndexBuffer::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::IndexBuffer::getRTTI
_TEXT	ENDS
PUBLIC	?setVertexRange@IndexBuffer@Ogre@@QAEXII@Z	; Ogre::IndexBuffer::setVertexRange
; Function compile flags: /Odtp
;	COMDAT ?setVertexRange@IndexBuffer@Ogre@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_num$ = 12						; size = 4
?setVertexRange@IndexBuffer@Ogre@@QAEXII@Z PROC		; Ogre::IndexBuffer::setVertexRange, COMDAT
; _this$ = ecx

; 235  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 236  : 			m_RefVertStart = start;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 237  : 			m_RefVertNum = num;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _num$[ebp]
	mov	DWORD PTR [edx+20], eax

; 238  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?setVertexRange@IndexBuffer@Ogre@@QAEXII@Z ENDP		; Ogre::IndexBuffer::setVertexRange
_TEXT	ENDS
PUBLIC	??_7IndexBuffer@Ogre@@6B@			; Ogre::IndexBuffer::`vftable'
PUBLIC	??0IndexBuffer@Ogre@@QAE@XZ			; Ogre::IndexBuffer::IndexBuffer
PUBLIC	??_R4IndexBuffer@Ogre@@6B@			; Ogre::IndexBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVIndexBuffer@Ogre@@@8			; Ogre::IndexBuffer `RTTI Type Descriptor'
PUBLIC	??_R3IndexBuffer@Ogre@@8			; Ogre::IndexBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IndexBuffer@Ogre@@8			; Ogre::IndexBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IndexBuffer@Ogre@@8		; Ogre::IndexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EIndexBuffer@Ogre@@UAEPAXI@Z			; Ogre::IndexBuffer::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@IndexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IndexBuffer@Ogre@@8 DD FLAT:??_R0?AVIndexBuffer@Ogre@@@8 ; Ogre::IndexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IndexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2IndexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R2IndexBuffer@Ogre@@8 DD FLAT:??_R1A@?0A@EA@IndexBuffer@Ogre@@8 ; Ogre::IndexBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3IndexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R3IndexBuffer@Ogre@@8 DD 00H				; Ogre::IndexBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2IndexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVIndexBuffer@Ogre@@@8
_DATA	SEGMENT
??_R0?AVIndexBuffer@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::IndexBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVIndexBuffer@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4IndexBuffer@Ogre@@6B@
rdata$r	SEGMENT
??_R4IndexBuffer@Ogre@@6B@ DD 00H			; Ogre::IndexBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVIndexBuffer@Ogre@@@8
	DD	FLAT:??_R3IndexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7IndexBuffer@Ogre@@6B@
CONST	SEGMENT
??_7IndexBuffer@Ogre@@6B@ DD FLAT:??_R4IndexBuffer@Ogre@@6B@ ; Ogre::IndexBuffer::`vftable'
	DD	FLAT:?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EIndexBuffer@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0IndexBuffer@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0IndexBuffer@Ogre@@QAE@XZ$0
__ehfuncinfo$??0IndexBuffer@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0IndexBuffer@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0IndexBuffer@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0IndexBuffer@Ogre@@QAE@XZ PROC			; Ogre::IndexBuffer::IndexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0IndexBuffer@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IndexBuffer@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0IndexBuffer@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0IndexBuffer@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0IndexBuffer@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0IndexBuffer@Ogre@@QAE@XZ ENDP			; Ogre::IndexBuffer::IndexBuffer
PUBLIC	??1IndexBuffer@Ogre@@UAE@XZ			; Ogre::IndexBuffer::~IndexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1IndexBuffer@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1IndexBuffer@Ogre@@UAE@XZ$0
__ehfuncinfo$??1IndexBuffer@Ogre@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1IndexBuffer@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1IndexBuffer@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1IndexBuffer@Ogre@@UAE@XZ PROC			; Ogre::IndexBuffer::~IndexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1IndexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1IndexBuffer@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??1IndexBuffer@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1IndexBuffer@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1IndexBuffer@Ogre@@UAE@XZ ENDP			; Ogre::IndexBuffer::~IndexBuffer
PUBLIC	??0IndexBuffer@Ogre@@QAE@ABV01@@Z		; Ogre::IndexBuffer::IndexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0IndexBuffer@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0IndexBuffer@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0IndexBuffer@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0IndexBuffer@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0IndexBuffer@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0IndexBuffer@Ogre@@QAE@ABV01@@Z PROC			; Ogre::IndexBuffer::IndexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0IndexBuffer@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7IndexBuffer@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0IndexBuffer@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0IndexBuffer@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0IndexBuffer@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0IndexBuffer@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::IndexBuffer::IndexBuffer
PUBLIC	??4IndexBuffer@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::IndexBuffer::operator=
; Function compile flags: /Odtp
;	COMDAT ??4IndexBuffer@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4IndexBuffer@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::IndexBuffer::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4IndexBuffer@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::IndexBuffer::operator=
_TEXT	ENDS
PUBLIC	??_GIndexBuffer@Ogre@@UAEPAXI@Z			; Ogre::IndexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GIndexBuffer@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GIndexBuffer@Ogre@@UAEPAXI@Z PROC			; Ogre::IndexBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1IndexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GIndexBuffer@Ogre@@UAEPAXI@Z ENDP			; Ogre::IndexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EIndexBuffer@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EIndexBuffer@Ogre@@UAEPAXI@Z PROC			; Ogre::IndexBuffer::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@6
	push	OFFSET ??1IndexBuffer@Ogre@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@6
	push	24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@6:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@6
$LN3@vector@6:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1IndexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@6
	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@6:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@6:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EIndexBuffer@Ogre@@UAEPAXI@Z ENDP			; Ogre::IndexBuffer::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ	; Ogre::Texture::getRTTI
EXTRN	?m_RTTI@Texture@Ogre@@2VRuntimeClass@2@B:BYTE	; Ogre::Texture::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::Texture::getRTTI, COMDAT
; _this$ = ecx

; 248  : 		DECLARE_RTTI_VIRTUAL(Texture)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@Texture@Ogre@@2VRuntimeClass@2@B ; Ogre::Texture::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::Texture::getRTTI
_TEXT	ENDS
PUBLIC	??_7Texture@Ogre@@6B@				; Ogre::Texture::`vftable'
PUBLIC	??1Texture@Ogre@@MAE@XZ				; Ogre::Texture::~Texture
PUBLIC	??_R4Texture@Ogre@@6B@				; Ogre::Texture::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTexture@Ogre@@@8			; Ogre::Texture `RTTI Type Descriptor'
PUBLIC	??_R3Texture@Ogre@@8				; Ogre::Texture::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Texture@Ogre@@8				; Ogre::Texture::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Texture@Ogre@@8			; Ogre::Texture::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_ETexture@Ogre@@MAEPAXI@Z			; Ogre::Texture::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@Texture@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Texture@Ogre@@8 DD FLAT:??_R0?AVTexture@Ogre@@@8 ; Ogre::Texture::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Texture@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Texture@Ogre@@8
rdata$r	SEGMENT
??_R2Texture@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Texture@Ogre@@8 ; Ogre::Texture::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3Texture@Ogre@@8
rdata$r	SEGMENT
??_R3Texture@Ogre@@8 DD 00H				; Ogre::Texture::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2Texture@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTexture@Ogre@@@8
_DATA	SEGMENT
??_R0?AVTexture@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Texture `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTexture@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Texture@Ogre@@6B@
rdata$r	SEGMENT
??_R4Texture@Ogre@@6B@ DD 00H				; Ogre::Texture::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTexture@Ogre@@@8
	DD	FLAT:??_R3Texture@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Texture@Ogre@@6B@
CONST	SEGMENT
??_7Texture@Ogre@@6B@ DD FLAT:??_R4Texture@Ogre@@6B@	; Ogre::Texture::`vftable'
	DD	FLAT:?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_ETexture@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Texture@Ogre@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Texture@Ogre@@MAE@XZ$0
__ehfuncinfo$??1Texture@Ogre@@MAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Texture@Ogre@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1Texture@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Texture@Ogre@@MAE@XZ PROC				; Ogre::Texture::~Texture, COMDAT
; _this$ = ecx

; 257  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Texture@Ogre@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Texture@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 258  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Texture@Ogre@@MAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??1Texture@Ogre@@MAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Texture@Ogre@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Texture@Ogre@@MAE@XZ ENDP				; Ogre::Texture::~Texture
PUBLIC	??0Texture@Ogre@@QAE@XZ				; Ogre::Texture::Texture
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Texture@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Texture@Ogre@@QAE@XZ$0
__ehfuncinfo$??0Texture@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Texture@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Texture@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Texture@Ogre@@QAE@XZ PROC				; Ogre::Texture::Texture, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Texture@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Texture@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Texture@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0Texture@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Texture@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Texture@Ogre@@QAE@XZ ENDP				; Ogre::Texture::Texture
PUBLIC	??0Texture@Ogre@@QAE@ABV01@@Z			; Ogre::Texture::Texture
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Texture@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Texture@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0Texture@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Texture@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Texture@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Texture@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Texture::Texture, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Texture@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7Texture@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Texture@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0Texture@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Texture@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Texture@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Texture::Texture
PUBLIC	??4Texture@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Texture::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Texture@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Texture@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Texture::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Texture@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Texture::operator=
_TEXT	ENDS
PUBLIC	??_GTexture@Ogre@@MAEPAXI@Z			; Ogre::Texture::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GTexture@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTexture@Ogre@@MAEPAXI@Z PROC			; Ogre::Texture::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Texture@Ogre@@MAE@XZ			; Ogre::Texture::~Texture
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTexture@Ogre@@MAEPAXI@Z ENDP			; Ogre::Texture::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_ETexture@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ETexture@Ogre@@MAEPAXI@Z PROC			; Ogre::Texture::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@7
	push	OFFSET ??1Texture@Ogre@@MAE@XZ		; Ogre::Texture::~Texture
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@7
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@7:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@7
$LN3@vector@7:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Texture@Ogre@@MAE@XZ			; Ogre::Texture::~Texture
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@7
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@7:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@7:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ETexture@Ogre@@MAEPAXI@Z ENDP			; Ogre::Texture::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7DataStream@Ogre@@6B@			; Ogre::DataStream::`vftable'
PUBLIC	??0DataStream@Ogre@@QAE@XZ			; Ogre::DataStream::DataStream
PUBLIC	??_R4DataStream@Ogre@@6B@			; Ogre::DataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDataStream@Ogre@@@8			; Ogre::DataStream `RTTI Type Descriptor'
PUBLIC	??_R3DataStream@Ogre@@8				; Ogre::DataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DataStream@Ogre@@8				; Ogre::DataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DataStream@Ogre@@8		; Ogre::DataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDataStream@Ogre@@UAEPAXI@Z			; Ogre::DataStream::`vector deleting destructor'
PUBLIC	?size@DataStream@Ogre@@UBEIXZ			; Ogre::DataStream::size
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::DataStream::readLine
EXTRN	?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; Ogre::DataStream::getLine
EXTRN	?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:PROC ; Ogre::DataStream::getAsString
EXTRN	?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::DataStream::skipLine
;	COMDAT ??_R1A@?0A@EA@DataStream@Ogre@@8
; File i:\svnroot\client\ogremain\ogredatastream.h
rdata$r	SEGMENT
??_R1A@?0A@EA@DataStream@Ogre@@8 DD FLAT:??_R0?AVDataStream@Ogre@@@8 ; Ogre::DataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DataStream@Ogre@@8
rdata$r	SEGMENT
??_R2DataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8 ; Ogre::DataStream::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DataStream@Ogre@@8
rdata$r	SEGMENT
??_R3DataStream@Ogre@@8 DD 00H				; Ogre::DataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::DataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4DataStream@Ogre@@6B@ DD 00H			; Ogre::DataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDataStream@Ogre@@@8
	DD	FLAT:??_R3DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DataStream@Ogre@@6B@
CONST	SEGMENT
??_7DataStream@Ogre@@6B@ DD FLAT:??_R4DataStream@Ogre@@6B@ ; Ogre::DataStream::`vftable'
	DD	FLAT:??_EDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@XZ$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0DataStream@Ogre@@QAE@XZ PROC				; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx

; 68   : 		DataStream() : mSize(0) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@XZ ENDP				; Ogre::DataStream::DataStream
PUBLIC	??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Ogre::DataStream::DataStream
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx

; 70   : 		DataStream(const String& name) : mName(name), mSize(0) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Ogre::DataStream::DataStream
PUBLIC	?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Ogre::DataStream::getName
; Function compile flags: /Odtp
;	COMDAT ?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Ogre::DataStream::getName, COMDAT
; _this$ = ecx

; 72   : 		const String& getName(void) { return mName; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Ogre::DataStream::getName
_TEXT	ENDS
PUBLIC	??1DataStream@Ogre@@UAE@XZ			; Ogre::DataStream::~DataStream
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1DataStream@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1DataStream@Ogre@@UAE@XZ$0
__ehfuncinfo$??1DataStream@Ogre@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1DataStream@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1DataStream@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1DataStream@Ogre@@UAE@XZ PROC				; Ogre::DataStream::~DataStream, COMDAT
; _this$ = ecx

; 73   : 		virtual ~DataStream() {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1DataStream@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1DataStream@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1DataStream@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1DataStream@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1DataStream@Ogre@@UAE@XZ ENDP				; Ogre::DataStream::~DataStream
; Function compile flags: /Odtp
;	COMDAT ?size@DataStream@Ogre@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@DataStream@Ogre@@UBEIXZ PROC			; Ogre::DataStream::size, COMDAT
; _this$ = ecx

; 157  : 		virtual size_t size(void) const { return mSize; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?size@DataStream@Ogre@@UBEIXZ ENDP			; Ogre::DataStream::size
_TEXT	ENDS
PUBLIC	??0DataStream@Ogre@@QAE@ABV01@@Z		; Ogre::DataStream::DataStream
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0DataStream@Ogre@@QAE@ABV01@@Z PROC			; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+32], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::DataStream::DataStream
PUBLIC	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::DataStream::operator=
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DataStream@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::DataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::DataStream::operator=
_TEXT	ENDS
PUBLIC	??_GDataStream@Ogre@@UAEPAXI@Z			; Ogre::DataStream::`scalar deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDataStream@Ogre@@UAEPAXI@Z PROC			; Ogre::DataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDataStream@Ogre@@UAEPAXI@Z ENDP			; Ogre::DataStream::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Odtp
;	COMDAT ??_EDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDataStream@Ogre@@UAEPAXI@Z PROC			; Ogre::DataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@8
	push	OFFSET ??1DataStream@Ogre@@UAE@XZ	; Ogre::DataStream::~DataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	36					; 00000024H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@8
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@8:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@8
$LN3@vector@8:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@8:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@8:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDataStream@Ogre@@UAEPAXI@Z ENDP			; Ogre::DataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ		; Ogre::MemoryDataStream::getPtr
; Function compile flags: /Odtp
;	COMDAT ?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ PROC		; Ogre::MemoryDataStream::getPtr, COMDAT
; _this$ = ecx

; 267  : 		uchar* getPtr(void) { return mData; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ ENDP		; Ogre::MemoryDataStream::getPtr
_TEXT	ENDS
PUBLIC	?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ	; Ogre::MemoryDataStream::getCurrentPtr
; Function compile flags: /Odtp
;	COMDAT ?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ PROC	; Ogre::MemoryDataStream::getCurrentPtr, COMDAT
; _this$ = ecx

; 270  : 		uchar* getCurrentPtr(void) { return mPos; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ ENDP	; Ogre::MemoryDataStream::getCurrentPtr
_TEXT	ENDS
PUBLIC	?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ	; Ogre::MemoryDataStream::getMemoryImage
; Function compile flags: /Odtp
;	COMDAT ?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ PROC	; Ogre::MemoryDataStream::getMemoryImage, COMDAT
; _this$ = ecx

; 307  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 			return mData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]

; 309  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ ENDP	; Ogre::MemoryDataStream::getMemoryImage
_TEXT	ENDS
PUBLIC	?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z ; Ogre::MemoryDataStream::setFreeOnClose
; Function compile flags: /Odtp
;	COMDAT ?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_freeOnClose$ = 8					; size = 4
?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z PROC ; Ogre::MemoryDataStream::setFreeOnClose, COMDAT
; _this$ = ecx

; 313  : 		void setFreeOnClose(void (*freeOnClose)(void *)) { mFreeOnClose = freeOnClose; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _freeOnClose$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z ENDP ; Ogre::MemoryDataStream::setFreeOnClose
_TEXT	ENDS
PUBLIC	??_7MemoryDataStream@Ogre@@6B@			; Ogre::MemoryDataStream::`vftable'
PUBLIC	??0MemoryDataStream@Ogre@@QAE@ABV01@@Z		; Ogre::MemoryDataStream::MemoryDataStream
PUBLIC	??_R4MemoryDataStream@Ogre@@6B@			; Ogre::MemoryDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMemoryDataStream@Ogre@@@8		; Ogre::MemoryDataStream `RTTI Type Descriptor'
PUBLIC	??_R3MemoryDataStream@Ogre@@8			; Ogre::MemoryDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryDataStream@Ogre@@8			; Ogre::MemoryDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryDataStream@Ogre@@8		; Ogre::MemoryDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EMemoryDataStream@Ogre@@UAEPAXI@Z		; Ogre::MemoryDataStream::`vector deleting destructor'
EXTRN	?read@MemoryDataStream@Ogre@@UAEIPAXI@Z:PROC	; Ogre::MemoryDataStream::read
EXTRN	?write@MemoryDataStream@Ogre@@UAEIPBXI@Z:PROC	; Ogre::MemoryDataStream::write
EXTRN	?readLine@MemoryDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::MemoryDataStream::readLine
EXTRN	?skipLine@MemoryDataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::MemoryDataStream::skipLine
EXTRN	?skip@MemoryDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::MemoryDataStream::skip
EXTRN	?seek@MemoryDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::MemoryDataStream::seek
EXTRN	?tell@MemoryDataStream@Ogre@@UBEIXZ:PROC	; Ogre::MemoryDataStream::tell
EXTRN	?eof@MemoryDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::MemoryDataStream::eof
EXTRN	?close@MemoryDataStream@Ogre@@UAEXXZ:PROC	; Ogre::MemoryDataStream::close
;	COMDAT ??_R1A@?0A@EA@MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryDataStream@Ogre@@8 DD FLAT:??_R0?AVMemoryDataStream@Ogre@@@8 ; Ogre::MemoryDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2MemoryDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MemoryDataStream@Ogre@@8 ; Ogre::MemoryDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3MemoryDataStream@Ogre@@8 DD 00H			; Ogre::MemoryDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMemoryDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MemoryDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MemoryDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4MemoryDataStream@Ogre@@6B@ DD 00H			; Ogre::MemoryDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMemoryDataStream@Ogre@@@8
	DD	FLAT:??_R3MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7MemoryDataStream@Ogre@@6B@
CONST	SEGMENT
??_7MemoryDataStream@Ogre@@6B@ DD FLAT:??_R4MemoryDataStream@Ogre@@6B@ ; Ogre::MemoryDataStream::`vftable'
	DD	FLAT:??_EMemoryDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@MemoryDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@MemoryDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@MemoryDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@MemoryDataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@MemoryDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@MemoryDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@MemoryDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@MemoryDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@MemoryDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0MemoryDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::MemoryDataStream::MemoryDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7MemoryDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [edx+44], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [edx+48], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MemoryDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::MemoryDataStream::MemoryDataStream
PUBLIC	??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MemoryDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MemoryDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+44], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR [ecx+48], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MemoryDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GMemoryDataStream@Ogre@@UAEPAXI@Z		; Ogre::MemoryDataStream::`scalar deleting destructor'
EXTRN	??1MemoryDataStream@Ogre@@UAE@XZ:PROC		; Ogre::MemoryDataStream::~MemoryDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GMemoryDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMemoryDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::MemoryDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@9:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMemoryDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::MemoryDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EMemoryDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EMemoryDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::MemoryDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@9
	push	OFFSET ??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@9
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@9:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@9
$LN3@vector@9:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@9:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@9:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EMemoryDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::MemoryDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7FileStreamDataStream@Ogre@@6B@		; Ogre::FileStreamDataStream::`vftable'
PUBLIC	??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z	; Ogre::FileStreamDataStream::FileStreamDataStream
PUBLIC	??_R4FileStreamDataStream@Ogre@@6B@		; Ogre::FileStreamDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileStreamDataStream@Ogre@@@8		; Ogre::FileStreamDataStream `RTTI Type Descriptor'
PUBLIC	??_R3FileStreamDataStream@Ogre@@8		; Ogre::FileStreamDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileStreamDataStream@Ogre@@8		; Ogre::FileStreamDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8	; Ogre::FileStreamDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EFileStreamDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileStreamDataStream::`vector deleting destructor'
EXTRN	?read@FileStreamDataStream@Ogre@@UAEIPAXI@Z:PROC ; Ogre::FileStreamDataStream::read
EXTRN	?write@FileStreamDataStream@Ogre@@UAEIPBXI@Z:PROC ; Ogre::FileStreamDataStream::write
EXTRN	?readLine@FileStreamDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::FileStreamDataStream::readLine
EXTRN	?skip@FileStreamDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::FileStreamDataStream::skip
EXTRN	?seek@FileStreamDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::FileStreamDataStream::seek
EXTRN	?tell@FileStreamDataStream@Ogre@@UBEIXZ:PROC	; Ogre::FileStreamDataStream::tell
EXTRN	?eof@FileStreamDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::FileStreamDataStream::eof
EXTRN	?close@FileStreamDataStream@Ogre@@UAEXXZ:PROC	; Ogre::FileStreamDataStream::close
EXTRN	?getMemoryImage@FileStreamDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::FileStreamDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8 DD FLAT:??_R0?AVFileStreamDataStream@Ogre@@@8 ; Ogre::FileStreamDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2FileStreamDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8 ; Ogre::FileStreamDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3FileStreamDataStream@Ogre@@8 DD 00H		; Ogre::FileStreamDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileStreamDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVFileStreamDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::FileStreamDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileStreamDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileStreamDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4FileStreamDataStream@Ogre@@6B@ DD 00H		; Ogre::FileStreamDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileStreamDataStream@Ogre@@@8
	DD	FLAT:??_R3FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7FileStreamDataStream@Ogre@@6B@
CONST	SEGMENT
??_7FileStreamDataStream@Ogre@@6B@ DD FLAT:??_R4FileStreamDataStream@Ogre@@6B@ ; Ogre::FileStreamDataStream::`vftable'
	DD	FLAT:??_EFileStreamDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@FileStreamDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@FileStreamDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@FileStreamDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@FileStreamDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@FileStreamDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@FileStreamDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@FileStreamDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@FileStreamDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@FileStreamDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::FileStreamDataStream::FileStreamDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FileStreamDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+40]
	mov	BYTE PTR [edx+40], cl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::FileStreamDataStream::FileStreamDataStream
PUBLIC	??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FileStreamDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::FileStreamDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+40]
	mov	BYTE PTR [ecx+40], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::FileStreamDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GFileStreamDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileStreamDataStream::`scalar deleting destructor'
EXTRN	??1FileStreamDataStream@Ogre@@UAE@XZ:PROC	; Ogre::FileStreamDataStream::~FileStreamDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GFileStreamDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileStreamDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileStreamDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStreamDataStream@Ogre@@UAE@XZ	; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@10
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@10:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileStreamDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileStreamDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EFileStreamDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFileStreamDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileStreamDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@10
	push	OFFSET ??1FileStreamDataStream@Ogre@@UAE@XZ ; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@10
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@10:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@10
$LN3@vector@10:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStreamDataStream@Ogre@@UAE@XZ	; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@10
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@10:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@10:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFileStreamDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileStreamDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7FileHandleDataStream@Ogre@@6B@		; Ogre::FileHandleDataStream::`vftable'
PUBLIC	??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z	; Ogre::FileHandleDataStream::FileHandleDataStream
PUBLIC	??_R4FileHandleDataStream@Ogre@@6B@		; Ogre::FileHandleDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileHandleDataStream@Ogre@@@8		; Ogre::FileHandleDataStream `RTTI Type Descriptor'
PUBLIC	??_R3FileHandleDataStream@Ogre@@8		; Ogre::FileHandleDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileHandleDataStream@Ogre@@8		; Ogre::FileHandleDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8	; Ogre::FileHandleDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EFileHandleDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileHandleDataStream::`vector deleting destructor'
EXTRN	?read@FileHandleDataStream@Ogre@@UAEIPAXI@Z:PROC ; Ogre::FileHandleDataStream::read
EXTRN	?write@FileHandleDataStream@Ogre@@UAEIPBXI@Z:PROC ; Ogre::FileHandleDataStream::write
EXTRN	?skip@FileHandleDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::FileHandleDataStream::skip
EXTRN	?seek@FileHandleDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::FileHandleDataStream::seek
EXTRN	?tell@FileHandleDataStream@Ogre@@UBEIXZ:PROC	; Ogre::FileHandleDataStream::tell
EXTRN	?eof@FileHandleDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::FileHandleDataStream::eof
EXTRN	?close@FileHandleDataStream@Ogre@@UAEXXZ:PROC	; Ogre::FileHandleDataStream::close
EXTRN	?getMemoryImage@FileHandleDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::FileHandleDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8 DD FLAT:??_R0?AVFileHandleDataStream@Ogre@@@8 ; Ogre::FileHandleDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2FileHandleDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8 ; Ogre::FileHandleDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3FileHandleDataStream@Ogre@@8 DD 00H		; Ogre::FileHandleDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileHandleDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVFileHandleDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::FileHandleDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileHandleDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileHandleDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4FileHandleDataStream@Ogre@@6B@ DD 00H		; Ogre::FileHandleDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileHandleDataStream@Ogre@@@8
	DD	FLAT:??_R3FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7FileHandleDataStream@Ogre@@6B@
CONST	SEGMENT
??_7FileHandleDataStream@Ogre@@6B@ DD FLAT:??_R4FileHandleDataStream@Ogre@@6B@ ; Ogre::FileHandleDataStream::`vftable'
	DD	FLAT:??_EFileHandleDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@FileHandleDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@FileHandleDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@FileHandleDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@FileHandleDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@FileHandleDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@FileHandleDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@FileHandleDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@FileHandleDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::FileHandleDataStream::FileHandleDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FileHandleDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::FileHandleDataStream::FileHandleDataStream
PUBLIC	??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FileHandleDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::FileHandleDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::FileHandleDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GFileHandleDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileHandleDataStream::`scalar deleting destructor'
EXTRN	??1FileHandleDataStream@Ogre@@UAE@XZ:PROC	; Ogre::FileHandleDataStream::~FileHandleDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GFileHandleDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileHandleDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileHandleDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileHandleDataStream@Ogre@@UAE@XZ	; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@11
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@11:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileHandleDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileHandleDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EFileHandleDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFileHandleDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileHandleDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@11
	push	OFFSET ??1FileHandleDataStream@Ogre@@UAE@XZ ; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@11
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@11:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@11
$LN3@vector@11:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileHandleDataStream@Ogre@@UAE@XZ	; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@11
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@11:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@11:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFileHandleDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileHandleDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7DataStreamObject@Ogre@@6B@			; Ogre::DataStreamObject::`vftable'
PUBLIC	??1DataStreamObject@Ogre@@MAE@XZ		; Ogre::DataStreamObject::~DataStreamObject
PUBLIC	??_R4DataStreamObject@Ogre@@6B@			; Ogre::DataStreamObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDataStreamObject@Ogre@@@8		; Ogre::DataStreamObject `RTTI Type Descriptor'
PUBLIC	??_R3DataStreamObject@Ogre@@8			; Ogre::DataStreamObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DataStreamObject@Ogre@@8			; Ogre::DataStreamObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DataStreamObject@Ogre@@8		; Ogre::DataStreamObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDataStreamObject@Ogre@@MAEPAXI@Z		; Ogre::DataStreamObject::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DataStreamObject@Ogre@@8 DD FLAT:??_R0?AVDataStreamObject@Ogre@@@8 ; Ogre::DataStreamObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R2DataStreamObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DataStreamObject@Ogre@@8 ; Ogre::DataStreamObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R3DataStreamObject@Ogre@@8 DD 00H			; Ogre::DataStreamObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDataStreamObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDataStreamObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::DataStreamObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDataStreamObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DataStreamObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4DataStreamObject@Ogre@@6B@ DD 00H			; Ogre::DataStreamObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDataStreamObject@Ogre@@@8
	DD	FLAT:??_R3DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DataStreamObject@Ogre@@6B@
CONST	SEGMENT
??_7DataStreamObject@Ogre@@6B@ DD FLAT:??_R4DataStreamObject@Ogre@@6B@ ; Ogre::DataStreamObject::`vftable'
	DD	FLAT:??_EDataStreamObject@Ogre@@MAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??1DataStreamObject@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DataStreamObject@Ogre@@MAE@XZ PROC			; Ogre::DataStreamObject::~DataStreamObject, COMDAT
; _this$ = ecx

; 445  : 		virtual ~DataStreamObject(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1DataStreamObject@Ogre@@MAE@XZ ENDP			; Ogre::DataStreamObject::~DataStreamObject
_TEXT	ENDS
PUBLIC	??0DataStreamObject@Ogre@@QAE@XZ		; Ogre::DataStreamObject::DataStreamObject
; Function compile flags: /Odtp
;	COMDAT ??0DataStreamObject@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DataStreamObject@Ogre@@QAE@XZ PROC			; Ogre::DataStreamObject::DataStreamObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0DataStreamObject@Ogre@@QAE@XZ ENDP			; Ogre::DataStreamObject::DataStreamObject
_TEXT	ENDS
PUBLIC	??0DataStreamObject@Ogre@@QAE@ABV01@@Z		; Ogre::DataStreamObject::DataStreamObject
; Function compile flags: /Odtp
;	COMDAT ??0DataStreamObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0DataStreamObject@Ogre@@QAE@ABV01@@Z PROC		; Ogre::DataStreamObject::DataStreamObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0DataStreamObject@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::DataStreamObject::DataStreamObject
_TEXT	ENDS
PUBLIC	??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::DataStreamObject::operator=
; Function compile flags: /Odtp
;	COMDAT ??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::DataStreamObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::DataStreamObject::operator=
_TEXT	ENDS
PUBLIC	??_GDataStreamObject@Ogre@@MAEPAXI@Z		; Ogre::DataStreamObject::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GDataStreamObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDataStreamObject@Ogre@@MAEPAXI@Z PROC		; Ogre::DataStreamObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@12
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@12:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDataStreamObject@Ogre@@MAEPAXI@Z ENDP		; Ogre::DataStreamObject::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EDataStreamObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDataStreamObject@Ogre@@MAEPAXI@Z PROC		; Ogre::DataStreamObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@12
	push	OFFSET ??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@12
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@12:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@12
$LN3@vector@12:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@12
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@12:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@12:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDataStreamObject@Ogre@@MAEPAXI@Z ENDP		; Ogre::DataStreamObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7ObjectDataStream@Ogre@@6B@			; Ogre::ObjectDataStream::`vftable'
PUBLIC	??0ObjectDataStream@Ogre@@QAE@ABV01@@Z		; Ogre::ObjectDataStream::ObjectDataStream
PUBLIC	??_R4ObjectDataStream@Ogre@@6B@			; Ogre::ObjectDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVObjectDataStream@Ogre@@@8		; Ogre::ObjectDataStream `RTTI Type Descriptor'
PUBLIC	??_R3ObjectDataStream@Ogre@@8			; Ogre::ObjectDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ObjectDataStream@Ogre@@8			; Ogre::ObjectDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ObjectDataStream@Ogre@@8		; Ogre::ObjectDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EObjectDataStream@Ogre@@UAEPAXI@Z		; Ogre::ObjectDataStream::`vector deleting destructor'
EXTRN	?read@ObjectDataStream@Ogre@@UAEIPAXI@Z:PROC	; Ogre::ObjectDataStream::read
EXTRN	?write@ObjectDataStream@Ogre@@UAEIPBXI@Z:PROC	; Ogre::ObjectDataStream::write
EXTRN	?skip@ObjectDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::ObjectDataStream::skip
EXTRN	?seek@ObjectDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::ObjectDataStream::seek
EXTRN	?tell@ObjectDataStream@Ogre@@UBEIXZ:PROC	; Ogre::ObjectDataStream::tell
EXTRN	?eof@ObjectDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::ObjectDataStream::eof
EXTRN	?size@ObjectDataStream@Ogre@@UBEIXZ:PROC	; Ogre::ObjectDataStream::size
EXTRN	?close@ObjectDataStream@Ogre@@UAEXXZ:PROC	; Ogre::ObjectDataStream::close
EXTRN	?getMemoryImage@ObjectDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::ObjectDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ObjectDataStream@Ogre@@8 DD FLAT:??_R0?AVObjectDataStream@Ogre@@@8 ; Ogre::ObjectDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2ObjectDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@ObjectDataStream@Ogre@@8 ; Ogre::ObjectDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3ObjectDataStream@Ogre@@8 DD 00H			; Ogre::ObjectDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVObjectDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVObjectDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::ObjectDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVObjectDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ObjectDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4ObjectDataStream@Ogre@@6B@ DD 00H			; Ogre::ObjectDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVObjectDataStream@Ogre@@@8
	DD	FLAT:??_R3ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7ObjectDataStream@Ogre@@6B@
CONST	SEGMENT
??_7ObjectDataStream@Ogre@@6B@ DD FLAT:??_R4ObjectDataStream@Ogre@@6B@ ; Ogre::ObjectDataStream::`vftable'
	DD	FLAT:??_EObjectDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@ObjectDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@ObjectDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@ObjectDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@ObjectDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@ObjectDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@ObjectDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@ObjectDataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@ObjectDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@ObjectDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0ObjectDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::ObjectDataStream::ObjectDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ObjectDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0ObjectDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::ObjectDataStream::ObjectDataStream
PUBLIC	??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::ObjectDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::ObjectDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::ObjectDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GObjectDataStream@Ogre@@UAEPAXI@Z		; Ogre::ObjectDataStream::`scalar deleting destructor'
EXTRN	??1ObjectDataStream@Ogre@@UAE@XZ:PROC		; Ogre::ObjectDataStream::~ObjectDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GObjectDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GObjectDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::ObjectDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@13
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@13:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GObjectDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::ObjectDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EObjectDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EObjectDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::ObjectDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@13
	push	OFFSET ??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@13
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@13:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@13
$LN3@vector@13:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@13
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@13:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@13:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EObjectDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::ObjectDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7Archive@Ogre@@6B@				; Ogre::Archive::`vftable'
PUBLIC	??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z	; Ogre::Archive::Archive
PUBLIC	??_R4Archive@Ogre@@6B@				; Ogre::Archive::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVArchive@Ogre@@@8			; Ogre::Archive `RTTI Type Descriptor'
PUBLIC	??_R3Archive@Ogre@@8				; Ogre::Archive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Archive@Ogre@@8				; Ogre::Archive::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Archive@Ogre@@8			; Ogre::Archive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EArchive@Ogre@@UAEPAXI@Z			; Ogre::Archive::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@Archive@Ogre@@8
; File i:\svnroot\client\ogremain\ogrearchive.h
rdata$r	SEGMENT
??_R1A@?0A@EA@Archive@Ogre@@8 DD FLAT:??_R0?AVArchive@Ogre@@@8 ; Ogre::Archive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Archive@Ogre@@8
rdata$r	SEGMENT
??_R2Archive@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Archive@Ogre@@8 ; Ogre::Archive::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Archive@Ogre@@8
rdata$r	SEGMENT
??_R3Archive@Ogre@@8 DD 00H				; Ogre::Archive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVArchive@Ogre@@@8
_DATA	SEGMENT
??_R0?AVArchive@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Archive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArchive@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Archive@Ogre@@6B@
rdata$r	SEGMENT
??_R4Archive@Ogre@@6B@ DD 00H				; Ogre::Archive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArchive@Ogre@@@8
	DD	FLAT:??_R3Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Archive@Ogre@@6B@
CONST	SEGMENT
??_7Archive@Ogre@@6B@ DD FLAT:??_R4Archive@Ogre@@6B@	; Ogre::Archive::`vftable'
	DD	FLAT:??_EArchive@Ogre@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstream$ = 8						; size = 4
_mode$ = 12						; size = 4
??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z PROC		; Ogre::Archive::Archive, COMDAT
; _this$ = ecx

; 22   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pstream$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 23   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z ENDP		; Ogre::Archive::Archive
_TEXT	ENDS
PUBLIC	??1Archive@Ogre@@UAE@XZ				; Ogre::Archive::~Archive
; Function compile flags: /Odtp
;	COMDAT ??1Archive@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Archive@Ogre@@UAE@XZ PROC				; Ogre::Archive::~Archive, COMDAT
; _this$ = ecx

; 26   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@

; 27   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1Archive@Ogre@@UAE@XZ ENDP				; Ogre::Archive::~Archive
_TEXT	ENDS
PUBLIC	?isLoading@Archive@Ogre@@QAE_NXZ		; Ogre::Archive::isLoading
; Function compile flags: /Odtp
;	COMDAT ?isLoading@Archive@Ogre@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isLoading@Archive@Ogre@@QAE_NXZ PROC			; Ogre::Archive::isLoading, COMDAT
; _this$ = ecx

; 30   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 			return m_Mode==MODE_LOAD;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+8], 1
	sete	cl
	mov	al, cl

; 32   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?isLoading@Archive@Ogre@@QAE_NXZ ENDP			; Ogre::Archive::isLoading
_TEXT	ENDS
PUBLIC	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z	; Ogre::Archive::serialize
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAD@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAD@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 108  : 		SERIALIZE_PRIMITIVE_FUNC(char)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAD@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAF@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAF@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 109  : 		SERIALIZE_PRIMITIVE_FUNC(short)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAF@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAH@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAH@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 110  : 		SERIALIZE_PRIMITIVE_FUNC(int)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAH@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_J@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_J@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 111  : 		SERIALIZE_PRIMITIVE_FUNC(int64)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	8
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_J@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAE@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAE@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 112  : 		SERIALIZE_PRIMITIVE_FUNC(uchar)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAE@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAG@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAG@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 113  : 		SERIALIZE_PRIMITIVE_FUNC(ushort)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAG@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAI@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAI@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 114  : 		SERIALIZE_PRIMITIVE_FUNC(uint)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAI@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_K@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_K@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 115  : 		SERIALIZE_PRIMITIVE_FUNC(uint64)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	8
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_K@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_N@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_N@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 116  : 		SERIALIZE_PRIMITIVE_FUNC(bool)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_N@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAM@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAM@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 117  : 		SERIALIZE_PRIMITIVE_FUNC(float)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAM@Z ENDP			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z PROC		; Ogre::Archive::serialize, COMDAT
; _this$ = ecx

; 155  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 			if(isLoading()) m_pStream->read(pbuf, len);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@serialize
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
	jmp	SHORT $LN1@serialize
$LN2@serialize:

; 157  : 			else m_pStream->write(pbuf, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN1@serialize:

; 158  : 
; 159  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 160  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ENDP		; Ogre::Archive::serialize
_TEXT	ENDS
PUBLIC	?read@Archive@Ogre@@QAEXPAXI@Z			; Ogre::Archive::read
; Function compile flags: /Odtp
;	COMDAT ?read@Archive@Ogre@@QAEXPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?read@Archive@Ogre@@QAEXPAXI@Z PROC			; Ogre::Archive::read, COMDAT
; _this$ = ecx

; 163  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 			m_pStream->read(pbuf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 165  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?read@Archive@Ogre@@QAEXPAXI@Z ENDP			; Ogre::Archive::read
_TEXT	ENDS
PUBLIC	?write@Archive@Ogre@@QAEXPBXI@Z			; Ogre::Archive::write
; Function compile flags: /Odtp
;	COMDAT ?write@Archive@Ogre@@QAEXPBXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?write@Archive@Ogre@@QAEXPBXI@Z PROC			; Ogre::Archive::write, COMDAT
; _this$ = ecx

; 168  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 			m_pStream->write(pbuf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 170  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?write@Archive@Ogre@@QAEXPBXI@Z ENDP			; Ogre::Archive::write
_TEXT	ENDS
PUBLIC	??0Archive@Ogre@@QAE@ABV01@@Z			; Ogre::Archive::Archive
; Function compile flags: /Odtp
;	COMDAT ??0Archive@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Archive@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Archive::Archive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Archive@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Archive::Archive
_TEXT	ENDS
PUBLIC	??4Archive@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Archive::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Archive@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Archive@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Archive::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Archive@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Archive::operator=
_TEXT	ENDS
PUBLIC	??_GArchive@Ogre@@UAEPAXI@Z			; Ogre::Archive::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GArchive@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArchive@Ogre@@UAEPAXI@Z PROC			; Ogre::Archive::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Archive@Ogre@@UAE@XZ			; Ogre::Archive::~Archive
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@14
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@14:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GArchive@Ogre@@UAEPAXI@Z ENDP			; Ogre::Archive::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EArchive@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EArchive@Ogre@@UAEPAXI@Z PROC			; Ogre::Archive::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@14
	push	OFFSET ??1Archive@Ogre@@UAE@XZ		; Ogre::Archive::~Archive
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@14
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@14:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@14
$LN3@vector@14:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Archive@Ogre@@UAE@XZ			; Ogre::Archive::~Archive
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@14
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@14:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@14:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EArchive@Ogre@@UAEPAXI@Z ENDP			; Ogre::Archive::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@XZ				; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
;	COMDAT ??0Vector3@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector3@Ogre@@QAE@XZ PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 49   : 		Vector3(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector3@Ogre@@QAE@XZ ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@ABV01@@Z			; Ogre::Vector3::Vector3
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0Vector3@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 50   : 		Vector3(const Vector3 &rhs)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		{
; 52   : 			x = rhs.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 53   : 			y = rhs.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 54   : 			z = rhs.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 55   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@MMM@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
??0Vector3@Ogre@@QAE@MMM@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 56   : 		Vector3( float x1, float y1, float z1 ) : x(x1), y(y1), z(z1){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector3@Ogre@@QAE@MMM@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@M@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@Ogre@@QAE@M@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 57   : 		Vector3(float v) : x(v), y(v), z(v){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@M@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@PAM@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@PAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@Ogre@@QAE@PAM@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 58   : 		Vector3(float* v) : x(v[0]), y(v[1]), z(v[2]){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@PAM@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??4Vector3@Ogre@@QAEABV01@ABV01@@Z		; Ogre::Vector3::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Vector3@Ogre@@QAEABV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??4Vector3@Ogre@@QAEABV01@ABV01@@Z PROC			; Ogre::Vector3::operator=, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			x = vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 63   : 			y = vec.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 64   : 			z = vec.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 65   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 66   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector3@Ogre@@QAEABV01@ABV01@@Z ENDP			; Ogre::Vector3::operator=
_TEXT	ENDS
PUBLIC	??YVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??YVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator+=, COMDAT
; _this$ = ecx

; 68   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 			x += vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 70   : 			y += vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 71   : 			z += vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 72   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator+=
_TEXT	ENDS
PUBLIC	??ZVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator-=
; Function compile flags: /Odtp
;	COMDAT ??ZVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??ZVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator-=, COMDAT
; _this$ = ecx

; 74   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 			x -= vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 76   : 			y -= vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 77   : 			z -= vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 78   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator-=
_TEXT	ENDS
PUBLIC	??XVector3@Ogre@@QAEXM@Z			; Ogre::Vector3::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XVector3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??XVector3@Ogre@@QAEXM@Z PROC				; Ogre::Vector3::operator*=, COMDAT
; _this$ = ecx

; 81   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 			x *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 83   : 			y *= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 84   : 			z *= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 85   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@Ogre@@QAEXM@Z ENDP				; Ogre::Vector3::operator*=
_TEXT	ENDS
PUBLIC	??XVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??XVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator*=, COMDAT
; _this$ = ecx

; 88   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 			x *= vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 90   : 			y *= vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 91   : 			z *= vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 92   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator*=
_TEXT	ENDS
PUBLIC	??_0Vector3@Ogre@@QAEXM@Z			; Ogre::Vector3::operator/=
; Function compile flags: /Odtp
;	COMDAT ??_0Vector3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??_0Vector3@Ogre@@QAEXM@Z PROC				; Ogre::Vector3::operator/=, COMDAT
; _this$ = ecx

; 95   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 			x /= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 97   : 			y /= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fdiv	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 98   : 			z /= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fdiv	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 99   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??_0Vector3@Ogre@@QAEXM@Z ENDP				; Ogre::Vector3::operator/=
_TEXT	ENDS
PUBLIC	??BVector3@Ogre@@QAEPAMXZ			; Ogre::Vector3::operator float *
; Function compile flags: /Odtp
;	COMDAT ??BVector3@Ogre@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector3@Ogre@@QAEPAMXZ PROC				; Ogre::Vector3::operator float *, COMDAT
; _this$ = ecx

; 101  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 			return &x;

	mov	eax, DWORD PTR _this$[ebp]

; 103  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVector3@Ogre@@QAEPAMXZ ENDP				; Ogre::Vector3::operator float *
_TEXT	ENDS
PUBLIC	??BVector3@Ogre@@QBEPBMXZ			; Ogre::Vector3::operator float const *
; Function compile flags: /Odtp
;	COMDAT ??BVector3@Ogre@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector3@Ogre@@QBEPBMXZ PROC				; Ogre::Vector3::operator float const *, COMDAT
; _this$ = ecx

; 105  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 			return &x;

	mov	eax, DWORD PTR _this$[ebp]

; 107  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVector3@Ogre@@QBEPBMXZ ENDP				; Ogre::Vector3::operator float const *
_TEXT	ENDS
PUBLIC	??HVector3@Ogre@@QBE?AV01@XZ			; Ogre::Vector3::operator+
; Function compile flags: /Odtp
;	COMDAT ??HVector3@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??HVector3@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector3::operator+, COMDAT
; _this$ = ecx

; 109  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 111  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??HVector3@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector3::operator+
_TEXT	ENDS
PUBLIC	??GVector3@Ogre@@QBE?AV01@XZ			; Ogre::Vector3::operator-
; Function compile flags: /Odtp
;	COMDAT ??GVector3@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??GVector3@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector3::operator-, COMDAT
; _this$ = ecx

; 113  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 			return Vector3(-x, -y, -z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 115  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??GVector3@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector3::operator-
_TEXT	ENDS
PUBLIC	??8Vector3@Ogre@@QBE_NABV01@@Z			; Ogre::Vector3::operator==
; Function compile flags: /Odtp
;	COMDAT ??8Vector3@Ogre@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??8Vector3@Ogre@@QBE_NABV01@@Z PROC			; Ogre::Vector3::operator==, COMDAT
; _this$ = ecx

; 117  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 			return (x==vec.x && y==vec.y && z==vec.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv77[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv77[ebp]

; 119  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8Vector3@Ogre@@QBE_NABV01@@Z ENDP			; Ogre::Vector3::operator==
_TEXT	ENDS
PUBLIC	?setElement@Vector3@Ogre@@QAEXMMM@Z		; Ogre::Vector3::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Vector3@Ogre@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
?setElement@Vector3@Ogre@@QAEXMMM@Z PROC		; Ogre::Vector3::setElement, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			x = x1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]

; 123  : 			y = y1;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]

; 124  : 			z = z1;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]

; 125  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setElement@Vector3@Ogre@@QAEXMMM@Z ENDP		; Ogre::Vector3::setElement
_TEXT	ENDS
PUBLIC	?setElement@Vector3@Ogre@@QAEXPAM@Z		; Ogre::Vector3::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Vector3@Ogre@@QAEXPAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?setElement@Vector3@Ogre@@QAEXPAM@Z PROC		; Ogre::Vector3::setElement, COMDAT
; _this$ = ecx

; 127  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 			x = p[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 129  : 			y = p[1];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 130  : 			z = p[2];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 131  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setElement@Vector3@Ogre@@QAEXPAM@Z ENDP		; Ogre::Vector3::setElement
_TEXT	ENDS
PUBLIC	?Sqrt@Ogre@@YAMM@Z				; Ogre::Sqrt
PUBLIC	?length@Vector3@Ogre@@QBEMXZ			; Ogre::Vector3::length
; Function compile flags: /Odtp
;	COMDAT ?length@Vector3@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?length@Vector3@Ogre@@QBEMXZ PROC			; Ogre::Vector3::length, COMDAT
; _this$ = ecx

; 133  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 			return (float)Sqrt(x*x+y*y+z*z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Sqrt@Ogre@@YAMM@Z			; Ogre::Sqrt
	add	esp, 4

; 135  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@Vector3@Ogre@@QBEMXZ ENDP			; Ogre::Vector3::length
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
;	COMDAT ?Sqrt@Ogre@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Sqrt@Ogre@@YAMM@Z PROC					; Ogre::Sqrt, COMDAT

; 59   : 	{

	push	ebp
	mov	ebp, esp

; 60   : 		return (float)sqrt(x);

	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 61   : 	}

	pop	ebp
	ret	0
?Sqrt@Ogre@@YAMM@Z ENDP					; Ogre::Sqrt
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 534  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 423  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?lengthSqr@Vector3@Ogre@@QBEMXZ			; Ogre::Vector3::lengthSqr
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
;	COMDAT ?lengthSqr@Vector3@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?lengthSqr@Vector3@Ogre@@QBEMXZ PROC			; Ogre::Vector3::lengthSqr, COMDAT
; _this$ = ecx

; 137  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 			return (x*x+y*y+z*z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]

; 139  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?lengthSqr@Vector3@Ogre@@QBEMXZ ENDP			; Ogre::Vector3::lengthSqr
_TEXT	ENDS
PUBLIC	?getRTTI@VertexData@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::VertexData::getRTTI
EXTRN	?m_RTTI@VertexData@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::VertexData::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevertexindexdata.h
;	COMDAT ?getRTTI@VertexData@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@VertexData@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::VertexData::getRTTI, COMDAT
; _this$ = ecx

; 15   : 		DECLARE_RTTI(VertexData);

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@VertexData@Ogre@@2VRuntimeClass@2@B ; Ogre::VertexData::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@VertexData@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::VertexData::getRTTI
_TEXT	ENDS
PUBLIC	?newObject@VertexData@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::VertexData::newObject
EXTRN	??0VertexData@Ogre@@QAE@XZ:PROC			; Ogre::VertexData::VertexData
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@VertexData@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@VertexData@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@VertexData@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@VertexData@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@VertexData@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T74457 = -20						; size = 4
$T74456 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@VertexData@Ogre@@SAPAVBaseObject@2@XZ PROC	; Ogre::VertexData::newObject, COMDAT

; 15   : 		DECLARE_RTTI(VertexData);

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@VertexData@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	104					; 00000068H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T74457[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T74457[ebp], 0
	je	SHORT $LN3@newObject@2
	mov	ecx, DWORD PTR $T74457[ebp]
	call	??0VertexData@Ogre@@QAE@XZ		; Ogre::VertexData::VertexData
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject@2
$LN3@newObject@2:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject@2:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T74456[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T74456[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@VertexData@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	104					; 00000068H
	mov	eax, DWORD PTR $T74457[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@VertexData@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@VertexData@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@VertexData@Ogre@@SAPAVBaseObject@2@XZ ENDP	; Ogre::VertexData::newObject
PUBLIC	?getNumVertex@VertexData@Ogre@@QAEIXZ		; Ogre::VertexData::getNumVertex
; Function compile flags: /Odtp
;	COMDAT ?getNumVertex@VertexData@Ogre@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumVertex@VertexData@Ogre@@QAEIXZ PROC		; Ogre::VertexData::getNumVertex, COMDAT
; _this$ = ecx

; 28   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 29   : 			return m_nVertex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+64]

; 30   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumVertex@VertexData@Ogre@@QAEIXZ ENDP		; Ogre::VertexData::getNumVertex
_TEXT	ENDS
PUBLIC	??A?$vector@DV?$allocator@D@std@@@std@@QAEAADI@Z ; std::vector<char,std::allocator<char> >::operator[]
PUBLIC	?getVertexElement@VertexData@Ogre@@QAEPADIW4VertexElementSemantic@2@@Z ; Ogre::VertexData::getVertexElement
EXTRN	?getElementBySemantic@VertexFormat@Ogre@@QBEPBVVertexElement@2@W4VertexElementSemantic@2@H@Z:PROC ; Ogre::VertexFormat::getElementBySemantic
; Function compile flags: /Odtp
;	COMDAT ?getVertexElement@VertexData@Ogre@@QAEPADIW4VertexElementSemantic@2@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_offset$ = -8						; size = 4
_pelement$ = -4						; size = 4
_ivert$ = 8						; size = 4
_ves$ = 12						; size = 4
?getVertexElement@VertexData@Ogre@@QAEPADIW4VertexElementSemantic@2@@Z PROC ; Ogre::VertexData::getVertexElement, COMDAT
; _this$ = ecx

; 33   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 34   : 			const VertexElement *pelement = m_VertFormat.getElementBySemantic(ves);

	push	-1
	mov	eax, DWORD PTR _ves$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?getElementBySemantic@VertexFormat@Ogre@@QBEPBVVertexElement@2@W4VertexElementSemantic@2@H@Z ; Ogre::VertexFormat::getElementBySemantic
	mov	DWORD PTR _pelement$[ebp], eax

; 35   : 			if(pelement == NULL) return NULL;

	cmp	DWORD PTR _pelement$[ebp], 0
	jne	SHORT $LN1@getVertexE
	xor	eax, eax
	jmp	SHORT $LN2@getVertexE
$LN1@getVertexE:

; 36   : 
; 37   : 			uint offset = (uint)ivert*m_Stride + pelement->m_Offset;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ivert$[ebp]
	imul	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _pelement$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 4
	and	ecx, 255				; 000000ffH
	add	edx, ecx
	mov	DWORD PTR _offset$[ebp], edx

; 38   : 			return &m_VertData[0] + offset;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??A?$vector@DV?$allocator@D@std@@@std@@QAEAADI@Z ; std::vector<char,std::allocator<char> >::operator[]
	add	eax, DWORD PTR _offset$[ebp]
$LN2@getVertexE:

; 39   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?getVertexElement@VertexData@Ogre@@QAEPADIW4VertexElementSemantic@2@@Z ENDP ; Ogre::VertexData::getVertexElement
_TEXT	ENDS
PUBLIC	?getPosition@VertexData@Ogre@@QAEPADI@Z		; Ogre::VertexData::getPosition
; Function compile flags: /Odtp
;	COMDAT ?getPosition@VertexData@Ogre@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ivert$ = 8						; size = 4
?getPosition@VertexData@Ogre@@QAEPADI@Z PROC		; Ogre::VertexData::getPosition, COMDAT
; _this$ = ecx

; 42   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 43   : 			return getVertexElement(ivert, VES_POSITION);

	push	1
	mov	eax, DWORD PTR _ivert$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getVertexElement@VertexData@Ogre@@QAEPADIW4VertexElementSemantic@2@@Z ; Ogre::VertexData::getVertexElement

; 44   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getPosition@VertexData@Ogre@@QAEPADI@Z ENDP		; Ogre::VertexData::getPosition
_TEXT	ENDS
PUBLIC	?getNormal@VertexData@Ogre@@QAEPADI@Z		; Ogre::VertexData::getNormal
; Function compile flags: /Odtp
;	COMDAT ?getNormal@VertexData@Ogre@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ivert$ = 8						; size = 4
?getNormal@VertexData@Ogre@@QAEPADI@Z PROC		; Ogre::VertexData::getNormal, COMDAT
; _this$ = ecx

; 47   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 			return getVertexElement(ivert, VES_NORMAL);

	push	4
	mov	eax, DWORD PTR _ivert$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getVertexElement@VertexData@Ogre@@QAEPADIW4VertexElementSemantic@2@@Z ; Ogre::VertexData::getVertexElement

; 49   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getNormal@VertexData@Ogre@@QAEPADI@Z ENDP		; Ogre::VertexData::getNormal
_TEXT	ENDS
PUBLIC	?getColor@VertexData@Ogre@@QAEPADI@Z		; Ogre::VertexData::getColor
; Function compile flags: /Odtp
;	COMDAT ?getColor@VertexData@Ogre@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ivert$ = 8						; size = 4
?getColor@VertexData@Ogre@@QAEPADI@Z PROC		; Ogre::VertexData::getColor, COMDAT
; _this$ = ecx

; 52   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 			return getVertexElement(ivert, VES_COLOR);

	push	5
	mov	eax, DWORD PTR _ivert$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getVertexElement@VertexData@Ogre@@QAEPADIW4VertexElementSemantic@2@@Z ; Ogre::VertexData::getVertexElement

; 54   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getColor@VertexData@Ogre@@QAEPADI@Z ENDP		; Ogre::VertexData::getColor
_TEXT	ENDS
PUBLIC	??4?$vector@DV?$allocator@D@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<char,std::allocator<char> >::operator=
PUBLIC	??4VertexData@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::VertexData::operator=
EXTRN	??4VertexFormat@Ogre@@QAEAAV01@ABV01@@Z:PROC	; Ogre::VertexFormat::operator=
; Function compile flags: /Odtp
;	COMDAT ??4VertexData@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4VertexData@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::VertexData::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4VertexBuffer@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??4VertexFormat@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::VertexFormat::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 40					; 00000028H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR [ecx+64], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR [ecx+68], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 72					; 00000048H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??4?$vector@DV?$allocator@D@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<char,std::allocator<char> >::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR [edx+96], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR [edx+100], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4VertexData@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::VertexData::operator=
_TEXT	ENDS
PUBLIC	?getRTTI@IndexData@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::IndexData::getRTTI
EXTRN	?m_RTTI@IndexData@Ogre@@2VRuntimeClass@2@B:BYTE	; Ogre::IndexData::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@IndexData@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@IndexData@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::IndexData::getRTTI, COMDAT
; _this$ = ecx

; 91   : 		DECLARE_RTTI(IndexData)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@IndexData@Ogre@@2VRuntimeClass@2@B ; Ogre::IndexData::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@IndexData@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::IndexData::getRTTI
_TEXT	ENDS
PUBLIC	?newObject@IndexData@Ogre@@SAPAVBaseObject@2@XZ	; Ogre::IndexData::newObject
EXTRN	??0IndexData@Ogre@@QAE@XZ:PROC			; Ogre::IndexData::IndexData
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@IndexData@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@IndexData@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@IndexData@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@IndexData@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@IndexData@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T74484 = -20						; size = 4
$T74483 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@IndexData@Ogre@@SAPAVBaseObject@2@XZ PROC	; Ogre::IndexData::newObject, COMDAT

; 91   : 		DECLARE_RTTI(IndexData)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@IndexData@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	52					; 00000034H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T74484[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T74484[ebp], 0
	je	SHORT $LN3@newObject@3
	mov	ecx, DWORD PTR $T74484[ebp]
	call	??0IndexData@Ogre@@QAE@XZ		; Ogre::IndexData::IndexData
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject@3
$LN3@newObject@3:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject@3:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T74483[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T74483[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@IndexData@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	52					; 00000034H
	mov	eax, DWORD PTR $T74484[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@IndexData@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@IndexData@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@IndexData@Ogre@@SAPAVBaseObject@2@XZ ENDP	; Ogre::IndexData::newObject
PUBLIC	?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::size
PUBLIC	?isUsed@IndexData@Ogre@@QAE_NXZ			; Ogre::IndexData::isUsed
; Function compile flags: /Odtp
;	COMDAT ?isUsed@IndexData@Ogre@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isUsed@IndexData@Ogre@@QAE_NXZ PROC			; Ogre::IndexData::isUsed, COMDAT
; _this$ = ecx

; 101  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 			return m_IndexData.size() > 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::size
	xor	ecx, ecx
	cmp	ecx, eax
	sbb	eax, eax
	neg	eax

; 103  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?isUsed@IndexData@Ogre@@QAE_NXZ ENDP			; Ogre::IndexData::isUsed
_TEXT	ENDS
PUBLIC	?getNumIndex@IndexData@Ogre@@QAEIXZ		; Ogre::IndexData::getNumIndex
; Function compile flags: /Odtp
;	COMDAT ?getNumIndex@IndexData@Ogre@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumIndex@IndexData@Ogre@@QAEIXZ PROC		; Ogre::IndexData::getNumIndex, COMDAT
; _this$ = ecx

; 106  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 107  : 			return m_IndexData.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::size

; 108  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumIndex@IndexData@Ogre@@QAEIXZ ENDP		; Ogre::IndexData::getNumIndex
_TEXT	ENDS
PUBLIC	??4?$vector@GV?$allocator@G@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::operator=
PUBLIC	??4IndexData@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::IndexData::operator=
; Function compile flags: /Odtp
;	COMDAT ??4IndexData@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4IndexData@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::IndexData::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4IndexBuffer@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4?$vector@GV?$allocator@G@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [edx+48], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4IndexData@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::IndexData::operator=
_TEXT	ENDS
PUBLIC	?getRTTI@DynamicVertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::DynamicVertexBuffer::getRTTI
EXTRN	?m_RTTI@DynamicVertexBuffer@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::DynamicVertexBuffer::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@DynamicVertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@DynamicVertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::DynamicVertexBuffer::getRTTI, COMDAT
; _this$ = ecx

; 126  : 		DECLARE_RTTI(DynamicVertexBuffer)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@DynamicVertexBuffer@Ogre@@2VRuntimeClass@2@B ; Ogre::DynamicVertexBuffer::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@DynamicVertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::DynamicVertexBuffer::getRTTI
_TEXT	ENDS
PUBLIC	??0DynamicVertexBuffer@Ogre@@QAE@XZ		; Ogre::DynamicVertexBuffer::DynamicVertexBuffer
PUBLIC	?newObject@DynamicVertexBuffer@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::DynamicVertexBuffer::newObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@DynamicVertexBuffer@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@DynamicVertexBuffer@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@DynamicVertexBuffer@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@DynamicVertexBuffer@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@DynamicVertexBuffer@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T74505 = -20						; size = 4
$T74504 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@DynamicVertexBuffer@Ogre@@SAPAVBaseObject@2@XZ PROC ; Ogre::DynamicVertexBuffer::newObject, COMDAT

; 126  : 		DECLARE_RTTI(DynamicVertexBuffer)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@DynamicVertexBuffer@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	56					; 00000038H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T74505[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T74505[ebp], 0
	je	SHORT $LN3@newObject@4
	mov	ecx, DWORD PTR $T74505[ebp]
	call	??0DynamicVertexBuffer@Ogre@@QAE@XZ	; Ogre::DynamicVertexBuffer::DynamicVertexBuffer
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject@4
$LN3@newObject@4:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject@4:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T74504[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T74504[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@DynamicVertexBuffer@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	56					; 00000038H
	mov	eax, DWORD PTR $T74505[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@DynamicVertexBuffer@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@DynamicVertexBuffer@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@DynamicVertexBuffer@Ogre@@SAPAVBaseObject@2@XZ ENDP ; Ogre::DynamicVertexBuffer::newObject
PUBLIC	??_7DynamicVertexBuffer@Ogre@@6B@		; Ogre::DynamicVertexBuffer::`vftable'
PUBLIC	??_R4DynamicVertexBuffer@Ogre@@6B@		; Ogre::DynamicVertexBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDynamicVertexBuffer@Ogre@@@8		; Ogre::DynamicVertexBuffer `RTTI Type Descriptor'
PUBLIC	??_R3DynamicVertexBuffer@Ogre@@8		; Ogre::DynamicVertexBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DynamicVertexBuffer@Ogre@@8		; Ogre::DynamicVertexBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DynamicVertexBuffer@Ogre@@8	; Ogre::DynamicVertexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDynamicVertexBuffer@Ogre@@EAEPAXI@Z		; Ogre::DynamicVertexBuffer::`vector deleting destructor'
EXTRN	??1VertexFormat@Ogre@@QAE@XZ:PROC		; Ogre::VertexFormat::~VertexFormat
EXTRN	??0VertexFormat@Ogre@@QAE@XZ:PROC		; Ogre::VertexFormat::VertexFormat
EXTRN	?getHBuf@DynamicVertexBuffer@Ogre@@UAEPAVHardwareVertexBuffer@2@XZ:PROC ; Ogre::DynamicVertexBuffer::getHBuf
;	COMDAT ??_R1A@?0A@EA@DynamicVertexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DynamicVertexBuffer@Ogre@@8 DD FLAT:??_R0?AVDynamicVertexBuffer@Ogre@@@8 ; Ogre::DynamicVertexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DynamicVertexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DynamicVertexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R2DynamicVertexBuffer@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DynamicVertexBuffer@Ogre@@8 ; Ogre::DynamicVertexBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VertexBuffer@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3DynamicVertexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R3DynamicVertexBuffer@Ogre@@8 DD 00H			; Ogre::DynamicVertexBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2DynamicVertexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDynamicVertexBuffer@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDynamicVertexBuffer@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::DynamicVertexBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDynamicVertexBuffer@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DynamicVertexBuffer@Ogre@@6B@
rdata$r	SEGMENT
??_R4DynamicVertexBuffer@Ogre@@6B@ DD 00H		; Ogre::DynamicVertexBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDynamicVertexBuffer@Ogre@@@8
	DD	FLAT:??_R3DynamicVertexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DynamicVertexBuffer@Ogre@@6B@
CONST	SEGMENT
??_7DynamicVertexBuffer@Ogre@@6B@ DD FLAT:??_R4DynamicVertexBuffer@Ogre@@6B@ ; Ogre::DynamicVertexBuffer::`vftable'
	DD	FLAT:?getRTTI@DynamicVertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EDynamicVertexBuffer@Ogre@@EAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:?getHBuf@DynamicVertexBuffer@Ogre@@UAEPAVHardwareVertexBuffer@2@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DynamicVertexBuffer@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DynamicVertexBuffer@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0DynamicVertexBuffer@Ogre@@QAE@XZ$1
__ehfuncinfo$??0DynamicVertexBuffer@Ogre@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0DynamicVertexBuffer@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DynamicVertexBuffer@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0DynamicVertexBuffer@Ogre@@QAE@XZ PROC		; Ogre::DynamicVertexBuffer::DynamicVertexBuffer, COMDAT
; _this$ = ecx

; 128  : 		DynamicVertexBuffer()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DynamicVertexBuffer@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0VertexBuffer@Ogre@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DynamicVertexBuffer@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0VertexFormat@Ogre@@QAE@XZ		; Ogre::VertexFormat::VertexFormat
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 129  : 		{
; 130  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DynamicVertexBuffer@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1VertexBuffer@Ogre@@UAE@XZ
__unwindfunclet$??0DynamicVertexBuffer@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1VertexFormat@Ogre@@QAE@XZ		; Ogre::VertexFormat::~VertexFormat
__ehhandler$??0DynamicVertexBuffer@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DynamicVertexBuffer@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DynamicVertexBuffer@Ogre@@QAE@XZ ENDP		; Ogre::DynamicVertexBuffer::DynamicVertexBuffer
PUBLIC	?unlock@DynamicVertexBuffer@Ogre@@QAEXXZ	; Ogre::DynamicVertexBuffer::unlock
; Function compile flags: /Odtp
;	COMDAT ?unlock@DynamicVertexBuffer@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?unlock@DynamicVertexBuffer@Ogre@@QAEXXZ PROC		; Ogre::DynamicVertexBuffer::unlock, COMDAT
; _this$ = ecx

; 137  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?unlock@DynamicVertexBuffer@Ogre@@QAEXXZ ENDP		; Ogre::DynamicVertexBuffer::unlock
_TEXT	ENDS
PUBLIC	??1DynamicVertexBuffer@Ogre@@EAE@XZ		; Ogre::DynamicVertexBuffer::~DynamicVertexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1DynamicVertexBuffer@Ogre@@EAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1DynamicVertexBuffer@Ogre@@EAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1DynamicVertexBuffer@Ogre@@EAE@XZ$1
__ehfuncinfo$??1DynamicVertexBuffer@Ogre@@EAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1DynamicVertexBuffer@Ogre@@EAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1DynamicVertexBuffer@Ogre@@EAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1DynamicVertexBuffer@Ogre@@EAE@XZ PROC		; Ogre::DynamicVertexBuffer::~DynamicVertexBuffer, COMDAT
; _this$ = ecx

; 144  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1DynamicVertexBuffer@Ogre@@EAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DynamicVertexBuffer@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 145  : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1VertexFormat@Ogre@@QAE@XZ		; Ogre::VertexFormat::~VertexFormat
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VertexBuffer@Ogre@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1DynamicVertexBuffer@Ogre@@EAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1VertexBuffer@Ogre@@UAE@XZ
__unwindfunclet$??1DynamicVertexBuffer@Ogre@@EAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1VertexFormat@Ogre@@QAE@XZ		; Ogre::VertexFormat::~VertexFormat
__ehhandler$??1DynamicVertexBuffer@Ogre@@EAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1DynamicVertexBuffer@Ogre@@EAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1DynamicVertexBuffer@Ogre@@EAE@XZ ENDP		; Ogre::DynamicVertexBuffer::~DynamicVertexBuffer
PUBLIC	??0DynamicVertexBuffer@Ogre@@QAE@ABV01@@Z	; Ogre::DynamicVertexBuffer::DynamicVertexBuffer
EXTRN	??0VertexFormat@Ogre@@QAE@ABV01@@Z:PROC		; Ogre::VertexFormat::VertexFormat
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DynamicVertexBuffer@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DynamicVertexBuffer@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0DynamicVertexBuffer@Ogre@@QAE@ABV01@@Z$1
__ehfuncinfo$??0DynamicVertexBuffer@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0DynamicVertexBuffer@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DynamicVertexBuffer@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0DynamicVertexBuffer@Ogre@@QAE@ABV01@@Z PROC		; Ogre::DynamicVertexBuffer::DynamicVertexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DynamicVertexBuffer@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0VertexBuffer@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7DynamicVertexBuffer@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0VertexFormat@Ogre@@QAE@ABV01@@Z	; Ogre::VertexFormat::VertexFormat
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+52], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DynamicVertexBuffer@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1VertexBuffer@Ogre@@UAE@XZ
__unwindfunclet$??0DynamicVertexBuffer@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1VertexFormat@Ogre@@QAE@XZ		; Ogre::VertexFormat::~VertexFormat
__ehhandler$??0DynamicVertexBuffer@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DynamicVertexBuffer@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DynamicVertexBuffer@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::DynamicVertexBuffer::DynamicVertexBuffer
PUBLIC	??4DynamicVertexBuffer@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::DynamicVertexBuffer::operator=
; Function compile flags: /Odtp
;	COMDAT ??4DynamicVertexBuffer@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DynamicVertexBuffer@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::DynamicVertexBuffer::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4VertexBuffer@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??4VertexFormat@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::VertexFormat::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [edx+44], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [edx+48], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+52], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DynamicVertexBuffer@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::DynamicVertexBuffer::operator=
_TEXT	ENDS
PUBLIC	??_GDynamicVertexBuffer@Ogre@@EAEPAXI@Z		; Ogre::DynamicVertexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GDynamicVertexBuffer@Ogre@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDynamicVertexBuffer@Ogre@@EAEPAXI@Z PROC		; Ogre::DynamicVertexBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DynamicVertexBuffer@Ogre@@EAE@XZ	; Ogre::DynamicVertexBuffer::~DynamicVertexBuffer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@15
	push	56					; 00000038H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@15:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDynamicVertexBuffer@Ogre@@EAEPAXI@Z ENDP		; Ogre::DynamicVertexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EDynamicVertexBuffer@Ogre@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDynamicVertexBuffer@Ogre@@EAEPAXI@Z PROC		; Ogre::DynamicVertexBuffer::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@15
	push	OFFSET ??1DynamicVertexBuffer@Ogre@@EAE@XZ ; Ogre::DynamicVertexBuffer::~DynamicVertexBuffer
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	56					; 00000038H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@15
	push	56					; 00000038H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@15:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@15
$LN3@vector@15:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DynamicVertexBuffer@Ogre@@EAE@XZ	; Ogre::DynamicVertexBuffer::~DynamicVertexBuffer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@15
	push	56					; 00000038H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@15:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@15:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDynamicVertexBuffer@Ogre@@EAEPAXI@Z ENDP		; Ogre::DynamicVertexBuffer::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@DynamicIndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::DynamicIndexBuffer::getRTTI
EXTRN	?m_RTTI@DynamicIndexBuffer@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::DynamicIndexBuffer::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@DynamicIndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@DynamicIndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::DynamicIndexBuffer::getRTTI, COMDAT
; _this$ = ecx

; 157  : 		DECLARE_RTTI(DynamicIndexBuffer)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@DynamicIndexBuffer@Ogre@@2VRuntimeClass@2@B ; Ogre::DynamicIndexBuffer::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@DynamicIndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::DynamicIndexBuffer::getRTTI
_TEXT	ENDS
PUBLIC	??0DynamicIndexBuffer@Ogre@@QAE@XZ		; Ogre::DynamicIndexBuffer::DynamicIndexBuffer
PUBLIC	?newObject@DynamicIndexBuffer@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::DynamicIndexBuffer::newObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@DynamicIndexBuffer@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@DynamicIndexBuffer@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@DynamicIndexBuffer@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@DynamicIndexBuffer@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@DynamicIndexBuffer@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T74558 = -20						; size = 4
$T74557 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@DynamicIndexBuffer@Ogre@@SAPAVBaseObject@2@XZ PROC ; Ogre::DynamicIndexBuffer::newObject, COMDAT

; 157  : 		DECLARE_RTTI(DynamicIndexBuffer)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@DynamicIndexBuffer@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	36					; 00000024H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T74558[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T74558[ebp], 0
	je	SHORT $LN3@newObject@5
	mov	ecx, DWORD PTR $T74558[ebp]
	call	??0DynamicIndexBuffer@Ogre@@QAE@XZ	; Ogre::DynamicIndexBuffer::DynamicIndexBuffer
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject@5
$LN3@newObject@5:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject@5:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T74557[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T74557[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@DynamicIndexBuffer@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	36					; 00000024H
	mov	eax, DWORD PTR $T74558[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@DynamicIndexBuffer@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@DynamicIndexBuffer@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@DynamicIndexBuffer@Ogre@@SAPAVBaseObject@2@XZ ENDP ; Ogre::DynamicIndexBuffer::newObject
PUBLIC	??_7DynamicIndexBuffer@Ogre@@6B@		; Ogre::DynamicIndexBuffer::`vftable'
PUBLIC	??_R4DynamicIndexBuffer@Ogre@@6B@		; Ogre::DynamicIndexBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDynamicIndexBuffer@Ogre@@@8		; Ogre::DynamicIndexBuffer `RTTI Type Descriptor'
PUBLIC	??_R3DynamicIndexBuffer@Ogre@@8			; Ogre::DynamicIndexBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DynamicIndexBuffer@Ogre@@8			; Ogre::DynamicIndexBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DynamicIndexBuffer@Ogre@@8	; Ogre::DynamicIndexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDynamicIndexBuffer@Ogre@@EAEPAXI@Z		; Ogre::DynamicIndexBuffer::`vector deleting destructor'
EXTRN	?getHBuf@DynamicIndexBuffer@Ogre@@UAEPAVHardwareIndexBuffer@2@XZ:PROC ; Ogre::DynamicIndexBuffer::getHBuf
;	COMDAT ??_R1A@?0A@EA@DynamicIndexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DynamicIndexBuffer@Ogre@@8 DD FLAT:??_R0?AVDynamicIndexBuffer@Ogre@@@8 ; Ogre::DynamicIndexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DynamicIndexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DynamicIndexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R2DynamicIndexBuffer@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DynamicIndexBuffer@Ogre@@8 ; Ogre::DynamicIndexBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IndexBuffer@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3DynamicIndexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R3DynamicIndexBuffer@Ogre@@8 DD 00H			; Ogre::DynamicIndexBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2DynamicIndexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDynamicIndexBuffer@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDynamicIndexBuffer@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::DynamicIndexBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDynamicIndexBuffer@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DynamicIndexBuffer@Ogre@@6B@
rdata$r	SEGMENT
??_R4DynamicIndexBuffer@Ogre@@6B@ DD 00H		; Ogre::DynamicIndexBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDynamicIndexBuffer@Ogre@@@8
	DD	FLAT:??_R3DynamicIndexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DynamicIndexBuffer@Ogre@@6B@
CONST	SEGMENT
??_7DynamicIndexBuffer@Ogre@@6B@ DD FLAT:??_R4DynamicIndexBuffer@Ogre@@6B@ ; Ogre::DynamicIndexBuffer::`vftable'
	DD	FLAT:?getRTTI@DynamicIndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EDynamicIndexBuffer@Ogre@@EAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:?getHBuf@DynamicIndexBuffer@Ogre@@UAEPAVHardwareIndexBuffer@2@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DynamicIndexBuffer@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DynamicIndexBuffer@Ogre@@QAE@XZ$0
__ehfuncinfo$??0DynamicIndexBuffer@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DynamicIndexBuffer@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DynamicIndexBuffer@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0DynamicIndexBuffer@Ogre@@QAE@XZ PROC			; Ogre::DynamicIndexBuffer::DynamicIndexBuffer, COMDAT
; _this$ = ecx

; 159  : 		DynamicIndexBuffer()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DynamicIndexBuffer@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IndexBuffer@Ogre@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DynamicIndexBuffer@Ogre@@6B@

; 160  : 		{
; 161  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DynamicIndexBuffer@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1IndexBuffer@Ogre@@UAE@XZ
__ehhandler$??0DynamicIndexBuffer@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DynamicIndexBuffer@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DynamicIndexBuffer@Ogre@@QAE@XZ ENDP			; Ogre::DynamicIndexBuffer::DynamicIndexBuffer
PUBLIC	?unlock@DynamicIndexBuffer@Ogre@@QAEXXZ		; Ogre::DynamicIndexBuffer::unlock
; Function compile flags: /Odtp
;	COMDAT ?unlock@DynamicIndexBuffer@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?unlock@DynamicIndexBuffer@Ogre@@QAEXXZ PROC		; Ogre::DynamicIndexBuffer::unlock, COMDAT
; _this$ = ecx

; 168  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?unlock@DynamicIndexBuffer@Ogre@@QAEXXZ ENDP		; Ogre::DynamicIndexBuffer::unlock
_TEXT	ENDS
PUBLIC	?reset@DynamicIndexBuffer@Ogre@@QAEXPAVDynamicBufferPool@2@II@Z ; Ogre::DynamicIndexBuffer::reset
; Function compile flags: /Odtp
;	COMDAT ?reset@DynamicIndexBuffer@Ogre@@QAEXPAVDynamicBufferPool@2@II@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pool$ = 8						; size = 4
_offset$ = 12						; size = 4
_nindex$ = 16						; size = 4
?reset@DynamicIndexBuffer@Ogre@@QAEXPAVDynamicBufferPool@2@II@Z PROC ; Ogre::DynamicIndexBuffer::reset, COMDAT
; _this$ = ecx

; 172  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 173  : 			m_pPool = pool;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pool$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 174  : 			m_PoolOffset = offset;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [edx+28], eax

; 175  : 			m_nIndex = nindex;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _nindex$[ebp]
	mov	DWORD PTR [ecx+32], edx

; 176  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?reset@DynamicIndexBuffer@Ogre@@QAEXPAVDynamicBufferPool@2@II@Z ENDP ; Ogre::DynamicIndexBuffer::reset
_TEXT	ENDS
PUBLIC	??1DynamicIndexBuffer@Ogre@@EAE@XZ		; Ogre::DynamicIndexBuffer::~DynamicIndexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1DynamicIndexBuffer@Ogre@@EAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1DynamicIndexBuffer@Ogre@@EAE@XZ$0
__ehfuncinfo$??1DynamicIndexBuffer@Ogre@@EAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1DynamicIndexBuffer@Ogre@@EAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1DynamicIndexBuffer@Ogre@@EAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1DynamicIndexBuffer@Ogre@@EAE@XZ PROC			; Ogre::DynamicIndexBuffer::~DynamicIndexBuffer, COMDAT
; _this$ = ecx

; 180  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1DynamicIndexBuffer@Ogre@@EAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DynamicIndexBuffer@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 181  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1IndexBuffer@Ogre@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1DynamicIndexBuffer@Ogre@@EAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1IndexBuffer@Ogre@@UAE@XZ
__ehhandler$??1DynamicIndexBuffer@Ogre@@EAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1DynamicIndexBuffer@Ogre@@EAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1DynamicIndexBuffer@Ogre@@EAE@XZ ENDP			; Ogre::DynamicIndexBuffer::~DynamicIndexBuffer
PUBLIC	??0DynamicIndexBuffer@Ogre@@QAE@ABV01@@Z	; Ogre::DynamicIndexBuffer::DynamicIndexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DynamicIndexBuffer@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DynamicIndexBuffer@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0DynamicIndexBuffer@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DynamicIndexBuffer@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DynamicIndexBuffer@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0DynamicIndexBuffer@Ogre@@QAE@ABV01@@Z PROC		; Ogre::DynamicIndexBuffer::DynamicIndexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DynamicIndexBuffer@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IndexBuffer@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7DynamicIndexBuffer@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+28], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+32], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DynamicIndexBuffer@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1IndexBuffer@Ogre@@UAE@XZ
__ehhandler$??0DynamicIndexBuffer@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DynamicIndexBuffer@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DynamicIndexBuffer@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::DynamicIndexBuffer::DynamicIndexBuffer
PUBLIC	??4DynamicIndexBuffer@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::DynamicIndexBuffer::operator=
; Function compile flags: /Odtp
;	COMDAT ??4DynamicIndexBuffer@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DynamicIndexBuffer@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::DynamicIndexBuffer::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4IndexBuffer@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DynamicIndexBuffer@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::DynamicIndexBuffer::operator=
_TEXT	ENDS
PUBLIC	??_GDynamicIndexBuffer@Ogre@@EAEPAXI@Z		; Ogre::DynamicIndexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GDynamicIndexBuffer@Ogre@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDynamicIndexBuffer@Ogre@@EAEPAXI@Z PROC		; Ogre::DynamicIndexBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DynamicIndexBuffer@Ogre@@EAE@XZ	; Ogre::DynamicIndexBuffer::~DynamicIndexBuffer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@16
	push	36					; 00000024H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@16:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDynamicIndexBuffer@Ogre@@EAEPAXI@Z ENDP		; Ogre::DynamicIndexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EDynamicIndexBuffer@Ogre@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDynamicIndexBuffer@Ogre@@EAEPAXI@Z PROC		; Ogre::DynamicIndexBuffer::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@16
	push	OFFSET ??1DynamicIndexBuffer@Ogre@@EAE@XZ ; Ogre::DynamicIndexBuffer::~DynamicIndexBuffer
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	36					; 00000024H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@16
	push	36					; 00000024H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@16:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@16
$LN3@vector@16:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DynamicIndexBuffer@Ogre@@EAE@XZ	; Ogre::DynamicIndexBuffer::~DynamicIndexBuffer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@16
	push	36					; 00000024H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@16:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@16:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDynamicIndexBuffer@Ogre@@EAEPAXI@Z ENDP		; Ogre::DynamicIndexBuffer::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@MorphAnimData@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::MorphAnimData::getRTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremorphanimdata.h
;	COMDAT ?getRTTI@MorphAnimData@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@MorphAnimData@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::MorphAnimData::getRTTI, COMDAT
; _this$ = ecx

; 13   : 		DECLARE_RTTI(MorphAnimData)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@MorphAnimData@Ogre@@2VRuntimeClass@2@B ; Ogre::MorphAnimData::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@MorphAnimData@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::MorphAnimData::getRTTI
_TEXT	ENDS
PUBLIC	??0MorphAnimData@Ogre@@QAE@XZ			; Ogre::MorphAnimData::MorphAnimData
PUBLIC	?newObject@MorphAnimData@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::MorphAnimData::newObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@MorphAnimData@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@MorphAnimData@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@MorphAnimData@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@MorphAnimData@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@MorphAnimData@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T74610 = -20						; size = 4
$T74609 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@MorphAnimData@Ogre@@SAPAVBaseObject@2@XZ PROC ; Ogre::MorphAnimData::newObject, COMDAT

; 13   : 		DECLARE_RTTI(MorphAnimData)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@MorphAnimData@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	276					; 00000114H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T74610[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T74610[ebp], 0
	je	SHORT $LN3@newObject@6
	mov	ecx, DWORD PTR $T74610[ebp]
	call	??0MorphAnimData@Ogre@@QAE@XZ		; Ogre::MorphAnimData::MorphAnimData
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject@6
$LN3@newObject@6:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject@6:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T74609[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T74609[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@MorphAnimData@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	276					; 00000114H
	mov	eax, DWORD PTR $T74610[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@MorphAnimData@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@MorphAnimData@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@MorphAnimData@Ogre@@SAPAVBaseObject@2@XZ ENDP ; Ogre::MorphAnimData::newObject
PUBLIC	?getType@MorphAnimData@Ogre@@UAE?AW4AnimationType@2@XZ ; Ogre::MorphAnimData::getType
; Function compile flags: /Odtp
;	COMDAT ?getType@MorphAnimData@Ogre@@UAE?AW4AnimationType@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getType@MorphAnimData@Ogre@@UAE?AW4AnimationType@2@XZ PROC ; Ogre::MorphAnimData::getType, COMDAT
; _this$ = ecx

; 33   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 34   : 			return ANIM_MORPH;

	mov	eax, 1

; 35   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getType@MorphAnimData@Ogre@@UAE?AW4AnimationType@2@XZ ENDP ; Ogre::MorphAnimData::getType
_TEXT	ENDS
PUBLIC	?getTargetName@MorphAnimData@Ogre@@QAEABVFixedString@2@XZ ; Ogre::MorphAnimData::getTargetName
; Function compile flags: /Odtp
;	COMDAT ?getTargetName@MorphAnimData@Ogre@@QAEABVFixedString@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTargetName@MorphAnimData@Ogre@@QAEABVFixedString@2@XZ PROC ; Ogre::MorphAnimData::getTargetName, COMDAT
; _this$ = ecx

; 39   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 40   : 			return m_MeshName;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 112				; 00000070H

; 41   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getTargetName@MorphAnimData@Ogre@@QAEABVFixedString@2@XZ ENDP ; Ogre::MorphAnimData::getTargetName
_TEXT	ENDS
PUBLIC	??1?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::~vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
PUBLIC	??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ	; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
PUBLIC	??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
PUBLIC	??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
PUBLIC	??__G@YGXPAX0IHP6EPAX00@Z@Z			; `vector copy constructor iterator'
PUBLIC	??_7MorphAnimData@Ogre@@6B@			; Ogre::MorphAnimData::`vftable'
PUBLIC	??0MorphAnimData@Ogre@@QAE@ABV01@@Z		; Ogre::MorphAnimData::MorphAnimData
PUBLIC	??_R4MorphAnimData@Ogre@@6B@			; Ogre::MorphAnimData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMorphAnimData@Ogre@@@8			; Ogre::MorphAnimData `RTTI Type Descriptor'
PUBLIC	??_R3MorphAnimData@Ogre@@8			; Ogre::MorphAnimData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MorphAnimData@Ogre@@8			; Ogre::MorphAnimData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MorphAnimData@Ogre@@8		; Ogre::MorphAnimData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?_serialize@MorphAnimData@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::MorphAnimData::_serialize
PUBLIC	??_EMorphAnimData@Ogre@@UAEPAXI@Z		; Ogre::MorphAnimData::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@MorphAnimData@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MorphAnimData@Ogre@@8 DD FLAT:??_R0?AVMorphAnimData@Ogre@@@8 ; Ogre::MorphAnimData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MorphAnimData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MorphAnimData@Ogre@@8
rdata$r	SEGMENT
??_R2MorphAnimData@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MorphAnimData@Ogre@@8 ; Ogre::MorphAnimData::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@AnimationData@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseAnimationData@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3MorphAnimData@Ogre@@8
rdata$r	SEGMENT
??_R3MorphAnimData@Ogre@@8 DD 00H			; Ogre::MorphAnimData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2MorphAnimData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMorphAnimData@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMorphAnimData@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MorphAnimData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMorphAnimData@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MorphAnimData@Ogre@@6B@
rdata$r	SEGMENT
??_R4MorphAnimData@Ogre@@6B@ DD 00H			; Ogre::MorphAnimData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMorphAnimData@Ogre@@@8
	DD	FLAT:??_R3MorphAnimData@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7MorphAnimData@Ogre@@6B@
CONST	SEGMENT
??_7MorphAnimData@Ogre@@6B@ DD FLAT:??_R4MorphAnimData@Ogre@@6B@ ; Ogre::MorphAnimData::`vftable'
	DD	FLAT:?getRTTI@MorphAnimData@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@MorphAnimData@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EMorphAnimData@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:?getType@MorphAnimData@Ogre@@UAE?AW4AnimationType@2@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0MorphAnimData@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MorphAnimData@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0MorphAnimData@Ogre@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0MorphAnimData@Ogre@@QAE@ABV01@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0MorphAnimData@Ogre@@QAE@ABV01@@Z$3
__ehfuncinfo$??0MorphAnimData@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0MorphAnimData@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0MorphAnimData@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0MorphAnimData@Ogre@@QAE@ABV01@@Z PROC		; Ogre::MorphAnimData::MorphAnimData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MorphAnimData@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0AnimationData@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7MorphAnimData@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0FixedString@Ogre@@QAE@ABV01@@Z	; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	DWORD PTR [eax+116], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [eax+120], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	DWORD PTR [eax+124], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR [eax+128], edx
	push	OFFSET ??0Vector3@Ogre@@QAE@ABV01@@Z	; Ogre::Vector3::Vector3
	push	4
	push	12					; 0000000cH
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 132				; 00000084H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	push	ecx
	call	??__G@YGXPAX0IHP6EPAX00@Z@Z
	push	OFFSET ??0Vector3@Ogre@@QAE@ABV01@@Z	; Ogre::Vector3::Vector3
	push	4
	push	12					; 0000000cH
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 180				; 000000b4H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 180				; 000000b4H
	push	eax
	call	??__G@YGXPAX0IHP6EPAX00@Z@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 228				; 000000e4H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 228				; 000000e4H
	call	??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 252				; 000000fcH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 252				; 000000fcH
	call	??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MorphAnimData@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AnimationData@Ogre@@UAE@XZ		; Ogre::AnimationData::~AnimationData
__unwindfunclet$??0MorphAnimData@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__unwindfunclet$??0MorphAnimData@Ogre@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 228				; 000000e4H
	jmp	??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
__unwindfunclet$??0MorphAnimData@Ogre@@QAE@ABV01@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 252				; 000000fcH
	jmp	??1?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::~vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
__ehhandler$??0MorphAnimData@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0MorphAnimData@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MorphAnimData@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::MorphAnimData::MorphAnimData
PUBLIC	??4?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator=
PUBLIC	??4?$vector@IV?$allocator@I@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::operator=
PUBLIC	??4MorphAnimData@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MorphAnimData::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MorphAnimData@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_$S2$62248 = -8						; size = 4
_$S1$62244 = -4						; size = 4
___that$ = 8						; size = 4
??4MorphAnimData@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::MorphAnimData::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4AnimationData@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 112				; 00000070H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	DWORD PTR [edx+116], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR [edx+120], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	DWORD PTR [edx+124], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR [edx+128], ecx
	mov	DWORD PTR _$S1$62244[ebp], 0
	jmp	SHORT $LN6@operator@2
$LN5@operator@2:
	mov	edx, DWORD PTR _$S1$62244[ebp]
	add	edx, 1
	mov	DWORD PTR _$S1$62244[ebp], edx
$LN6@operator@2:
	cmp	DWORD PTR _$S1$62244[ebp], 4
	jae	SHORT $LN4@operator@2
	mov	eax, DWORD PTR _$S1$62244[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR ___that$[ebp]
	lea	edx, DWORD PTR [ecx+eax+132]
	push	edx
	mov	eax, DWORD PTR _$S1$62244[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [ecx+eax+132]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	jmp	SHORT $LN5@operator@2
$LN4@operator@2:
	mov	DWORD PTR _$S2$62248[ebp], 0
	jmp	SHORT $LN3@operator@2
$LN2@operator@2:
	mov	edx, DWORD PTR _$S2$62248[ebp]
	add	edx, 1
	mov	DWORD PTR _$S2$62248[ebp], edx
$LN3@operator@2:
	cmp	DWORD PTR _$S2$62248[ebp], 4
	jae	SHORT $LN1@operator@2
	mov	eax, DWORD PTR _$S2$62248[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR ___that$[ebp]
	lea	edx, DWORD PTR [ecx+eax+180]
	push	edx
	mov	eax, DWORD PTR _$S2$62248[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [ecx+eax+180]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	jmp	SHORT $LN2@operator@2
$LN1@operator@2:
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 228				; 000000e4H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 228				; 000000e4H
	call	??4?$vector@IV?$allocator@I@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 252				; 000000fcH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 252				; 000000fcH
	call	??4?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MorphAnimData@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::MorphAnimData::operator=
_TEXT	ENDS
PUBLIC	??1MorphAnimData@Ogre@@UAE@XZ			; Ogre::MorphAnimData::~MorphAnimData
PUBLIC	??_GMorphAnimData@Ogre@@UAEPAXI@Z		; Ogre::MorphAnimData::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GMorphAnimData@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMorphAnimData@Ogre@@UAEPAXI@Z PROC			; Ogre::MorphAnimData::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MorphAnimData@Ogre@@UAE@XZ		; Ogre::MorphAnimData::~MorphAnimData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@17
	push	276					; 00000114H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@17:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMorphAnimData@Ogre@@UAEPAXI@Z ENDP			; Ogre::MorphAnimData::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EMorphAnimData@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EMorphAnimData@Ogre@@UAEPAXI@Z PROC			; Ogre::MorphAnimData::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@17
	push	OFFSET ??1MorphAnimData@Ogre@@UAE@XZ	; Ogre::MorphAnimData::~MorphAnimData
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	276					; 00000114H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@17
	push	276					; 00000114H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@17:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@17
$LN3@vector@17:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MorphAnimData@Ogre@@UAE@XZ		; Ogre::MorphAnimData::~MorphAnimData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@17
	push	276					; 00000114H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@17:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@17:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EMorphAnimData@Ogre@@UAEPAXI@Z ENDP			; Ogre::MorphAnimData::`vector deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??__G@YGXPAX0IHP6EPAX00@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___u$ = 12						; size = 4
___s$ = 16						; size = 4
___n$ = 20						; size = 4
___f$ = 24						; size = 4
??__G@YGXPAX0IHP6EPAX00@Z@Z PROC			; `vector copy constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector@18:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector@18
	mov	ecx, DWORD PTR ___u$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	edx, DWORD PTR ___t$[ebp]
	add	edx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], edx
	mov	eax, DWORD PTR ___u$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___u$[ebp], eax
	jmp	SHORT $LN2@vector@18
$LN3@vector@18:
	pop	ebp
	ret	20					; 00000014H
??__G@YGXPAX0IHP6EPAX00@Z@Z ENDP			; `vector copy constructor iterator'
_TEXT	ENDS
PUBLIC	??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
PUBLIC	??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ	; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
xdata$x	SEGMENT
__unwindtable$??0MorphAnimData@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MorphAnimData@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0MorphAnimData@Ogre@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0MorphAnimData@Ogre@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0MorphAnimData@Ogre@@QAE@XZ$3
__ehfuncinfo$??0MorphAnimData@Ogre@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0MorphAnimData@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremorphanimdata.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0MorphAnimData@Ogre@@QAE@XZ PROC			; Ogre::MorphAnimData::MorphAnimData
; _this$ = ecx

; 9    : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MorphAnimData@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0AnimationData@Ogre@@QAE@XZ		; Ogre::AnimationData::AnimationData
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MorphAnimData@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+116], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+120], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+124], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+128], 0
	push	OFFSET ??0Vector3@Ogre@@QAE@XZ		; Ogre::Vector3::Vector3
	push	4
	push	12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 132				; 00000084H
	push	edx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	push	OFFSET ??0Vector3@Ogre@@QAE@XZ		; Ogre::Vector3::Vector3
	push	4
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 180				; 000000b4H
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 228				; 000000e4H
	call	??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 252				; 000000fcH
	call	??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 10   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0MorphAnimData@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AnimationData@Ogre@@UAE@XZ		; Ogre::AnimationData::~AnimationData
__unwindfunclet$??0MorphAnimData@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__unwindfunclet$??0MorphAnimData@Ogre@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 228				; 000000e4H
	jmp	??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
__unwindfunclet$??0MorphAnimData@Ogre@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 252				; 000000fcH
	jmp	??1?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::~vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
__ehhandler$??0MorphAnimData@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0MorphAnimData@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MorphAnimData@Ogre@@QAE@XZ ENDP			; Ogre::MorphAnimData::MorphAnimData
xdata$x	SEGMENT
__unwindtable$??1MorphAnimData@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1MorphAnimData@Ogre@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1MorphAnimData@Ogre@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1MorphAnimData@Ogre@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1MorphAnimData@Ogre@@UAE@XZ$3
__ehfuncinfo$??1MorphAnimData@Ogre@@UAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1MorphAnimData@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1MorphAnimData@Ogre@@UAE@XZ PROC			; Ogre::MorphAnimData::~MorphAnimData
; _this$ = ecx

; 13   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1MorphAnimData@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MorphAnimData@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 3

; 14   : 		OGRE_RELEASE(m_pVertData);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+128], 0
	je	SHORT $LN2@MorphAnimD
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+128]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+128], 0
$LN2@MorphAnimD:

; 15   : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 252				; 000000fcH
	call	??1?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::~vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 228				; 000000e4H
	call	??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AnimationData@Ogre@@UAE@XZ		; Ogre::AnimationData::~AnimationData
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1MorphAnimData@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AnimationData@Ogre@@UAE@XZ		; Ogre::AnimationData::~AnimationData
__unwindfunclet$??1MorphAnimData@Ogre@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__unwindfunclet$??1MorphAnimData@Ogre@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 228				; 000000e4H
	jmp	??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
__unwindfunclet$??1MorphAnimData@Ogre@@UAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 252				; 000000fcH
	jmp	??1?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::~vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
__ehhandler$??1MorphAnimData@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1MorphAnimData@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1MorphAnimData@Ogre@@UAE@XZ ENDP			; Ogre::MorphAnimData::~MorphAnimData
PUBLIC	??$serializeRawArray@UAnimRange@MorphAnimData@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::MorphAnimData::AnimRange>
PUBLIC	??$serializeRawArray@I@Archive@Ogre@@QAEAAV01@AAV?$vector@IV?$allocator@I@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<unsigned int>
PUBLIC	??$?6VVertexData@Ogre@@@Archive@Ogre@@QAEAAV01@AAPAVVertexData@1@@Z ; Ogre::Archive::operator<<<Ogre::VertexData>
EXTRN	??6Archive@Ogre@@QAEAAV01@AAVFixedString@1@@Z:PROC ; Ogre::Archive::operator<<
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@MorphAnimData@Ogre@@UAEXAAVArchive@2@H@Z PROC ; Ogre::MorphAnimData::_serialize
; _this$ = ecx

; 18   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 19   : 		ar << m_MeshName;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??6Archive@Ogre@@QAEAAV01@AAVFixedString@1@@Z ; Ogre::Archive::operator<<

; 20   : 		ar << m_Channel;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	push	ecx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??6Archive@Ogre@@QAEAAV01@AAI@Z		; Ogre::Archive::operator<<

; 21   : 		ar << m_nFrame;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 120				; 00000078H
	push	edx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??6Archive@Ogre@@QAEAAV01@AAI@Z		; Ogre::Archive::operator<<

; 22   : 		ar << m_nVertex;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 124				; 0000007cH
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??6Archive@Ogre@@QAEAAV01@AAI@Z		; Ogre::Archive::operator<<

; 23   : 
; 24   : 		ar << m_pVertData;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	push	ecx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$?6VVertexData@Ogre@@@Archive@Ogre@@QAEAAV01@AAPAVVertexData@1@@Z ; Ogre::Archive::operator<<<Ogre::VertexData>

; 25   : 
; 26   : 		ar.serialize(m_MinValue, sizeof(m_MinValue));

	push	48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 132				; 00000084H
	push	edx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize

; 27   : 		ar.serialize(m_MaxValue, sizeof(m_MaxValue));

	push	48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 180				; 000000b4H
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize

; 28   : 
; 29   : 		ar.serializeRawArray(m_FrameTicks);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 228				; 000000e4H
	push	ecx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawArray@I@Archive@Ogre@@QAEAAV01@AAV?$vector@IV?$allocator@I@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<unsigned int>

; 30   : 		ar.serializeRawArray(m_Ranges);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 252				; 000000fcH
	push	edx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawArray@UAnimRange@MorphAnimData@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::MorphAnimData::AnimRange>

; 31   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@MorphAnimData@Ogre@@UAEXAAVArchive@2@H@Z ENDP ; Ogre::MorphAnimData::_serialize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector@19:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector@19
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector@19
$LN3@vector@19:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
PUBLIC	?_Buy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Buy
PUBLIC	??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z ; std::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
PUBLIC	??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@XZ	; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T74667 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74667[ebp], esp
	call	??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z ; std::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
PUBLIC	?_Tidy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@1@0PAU23@@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Ucopy<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> > >
PUBLIC	?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::begin
PUBLIC	?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::end
PUBLIC	?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
PUBLIC	??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T74679 = -36						; size = 8
$T74678 = -28						; size = 8
$T74677 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74677[ebp], esp
	push	eax
	call	??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z ; std::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@20

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T74678[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T74679[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@1@0PAU23@@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Ucopy<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@20
__catch$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@20
	ret	0
$LN5@vector@20:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@20:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@20:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
PUBLIC	?deallocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@I@Z ; std::allocator<Ogre::TriggerDesc>::deallocate
PUBLIC	??$_Ucopy@PAUTriggerDesc@Ogre@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@PAU23@00@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Ucopy<Ogre::TriggerDesc *>
PUBLIC	?capacity@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::capacity
PUBLIC	?_Destroy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXPAUTriggerDesc@Ogre@@0@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Destroy
PUBLIC	??$unchecked_copy@PAUTriggerDesc@Ogre@@PAU12@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00@Z ; stdext::unchecked_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
PUBLIC	?clear@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$63825 = -8					; size = 4
__Ptr$63815 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@3

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@3

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::clear
	jmp	$LN9@operator@3
$LN8@operator@3:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@3

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAUTriggerDesc@Ogre@@PAU12@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00@Z ; stdext::unchecked_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$63815[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$63815[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXPAUTriggerDesc@Ogre@@0@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@3
$LN6@operator@3:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@3

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Ptr$63825[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$63825[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAUTriggerDesc@Ogre@@PAU12@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00@Z ; stdext::unchecked_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$63825[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUTriggerDesc@Ogre@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@PAU23@00@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Ucopy<Ogre::TriggerDesc *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@3
$LN4@operator@3:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@3

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXPAUTriggerDesc@Ogre@@0@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@I@Z ; std::allocator<Ogre::TriggerDesc>::deallocate
$LN2@operator@3:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@3

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUTriggerDesc@Ogre@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@PAU23@00@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Ucopy<Ogre::TriggerDesc *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@3:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
PUBLIC	?_Buy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Buy
PUBLIC	??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z ; std::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
PUBLIC	??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@XZ	; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T74708 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74708[ebp], esp
	call	??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z ; std::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
PUBLIC	?_Tidy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@1@0PAU23@@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Ucopy<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> > >
PUBLIC	?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::begin
PUBLIC	?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::end
PUBLIC	?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
PUBLIC	??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T74720 = -36						; size = 8
$T74719 = -28						; size = 8
$T74718 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74718[ebp], esp
	push	eax
	call	??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z ; std::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@21

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T74719[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T74720[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@1@0PAU23@@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Ucopy<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@21
__catch$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@21
	ret	0
$LN5@vector@21:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@21:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@21:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
PUBLIC	?deallocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@I@Z ; std::allocator<Ogre::SequenceDesc>::deallocate
PUBLIC	??$_Ucopy@PAUSequenceDesc@Ogre@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@PAU23@00@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Ucopy<Ogre::SequenceDesc *>
PUBLIC	?capacity@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::capacity
PUBLIC	?_Destroy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXPAUSequenceDesc@Ogre@@0@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Destroy
PUBLIC	??$unchecked_copy@PAUSequenceDesc@Ogre@@PAU12@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00@Z ; stdext::unchecked_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
PUBLIC	?clear@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$63984 = -8					; size = 4
__Ptr$63974 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@4

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@4

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::clear
	jmp	$LN9@operator@4
$LN8@operator@4:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@4

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAUSequenceDesc@Ogre@@PAU12@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00@Z ; stdext::unchecked_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$63974[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$63974[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXPAUSequenceDesc@Ogre@@0@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
	jmp	$LN9@operator@4
$LN6@operator@4:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@4

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
	shl	eax, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR __Ptr$63984[ebp], eax

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Ptr$63984[ebp]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAUSequenceDesc@Ogre@@PAU12@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00@Z ; stdext::unchecked_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$63984[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUSequenceDesc@Ogre@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@PAU23@00@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Ucopy<Ogre::SequenceDesc *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@4
$LN4@operator@4:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@4

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXPAUSequenceDesc@Ogre@@0@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@I@Z ; std::allocator<Ogre::SequenceDesc>::deallocate
$LN2@operator@4:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@4

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUSequenceDesc@Ogre@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@PAU23@00@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Ucopy<Ogre::SequenceDesc *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@4:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::~_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
PUBLIC	?_Tidy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Ucopy<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> > >
PUBLIC	?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::begin
PUBLIC	?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::end
PUBLIC	?_Buy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Buy
PUBLIC	?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
PUBLIC	??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z ; std::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
PUBLIC	??0?$allocator@PAVBoneTrack@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BoneTrack *>::allocator<Ogre::BoneTrack *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T74750 = -36						; size = 8
$T74749 = -28						; size = 8
$T74748 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74748[ebp], esp
	push	eax
	call	??0?$allocator@PAVBoneTrack@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BoneTrack *>::allocator<Ogre::BoneTrack *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z ; std::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@22

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T74749[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T74750[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Ucopy<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@22
__catch$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@22
	ret	0
$LN5@vector@22:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@22:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@22:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::~vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::~vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
PUBLIC	?deallocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEXPAPAVBoneTrack@Ogre@@I@Z ; std::allocator<Ogre::BoneTrack *>::deallocate
PUBLIC	??$_Ucopy@PAPAVBoneTrack@Ogre@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Ucopy<Ogre::BoneTrack * *>
PUBLIC	?capacity@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::capacity
PUBLIC	?_Destroy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXPAPAVBoneTrack@Ogre@@0@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Destroy
PUBLIC	??$unchecked_copy@PAPAVBoneTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
PUBLIC	?clear@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$64138 = -8					; size = 4
__Ptr$64128 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@5

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@5

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::clear
	jmp	$LN9@operator@5
$LN8@operator@5:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@5

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAPAVBoneTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$64128[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$64128[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXPAPAVBoneTrack@Ogre@@0@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@5
$LN6@operator@5:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@5

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Ptr$64138[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$64138[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAPAVBoneTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$64138[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVBoneTrack@Ogre@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Ucopy<Ogre::BoneTrack * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@5
$LN4@operator@5:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@5

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXPAPAVBoneTrack@Ogre@@0@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEXPAPAVBoneTrack@Ogre@@I@Z ; std::allocator<Ogre::BoneTrack *>::deallocate
$LN2@operator@5:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@5

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVBoneTrack@Ogre@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Ucopy<Ogre::BoneTrack * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@5:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::~_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
PUBLIC	?_Tidy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Ucopy<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> > >
PUBLIC	?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::begin
PUBLIC	?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::end
PUBLIC	?_Buy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Buy
PUBLIC	?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
PUBLIC	??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ; std::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
PUBLIC	??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::MaterialParamTrack *>::allocator<Ogre::MaterialParamTrack *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T74780 = -36						; size = 8
$T74779 = -28						; size = 8
$T74778 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74778[ebp], esp
	push	eax
	call	??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::MaterialParamTrack *>::allocator<Ogre::MaterialParamTrack *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ; std::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@23

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T74779[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T74780[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@1@0PAPAV23@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Ucopy<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@23
__catch$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@23
	ret	0
$LN5@vector@23:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@23:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@23:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::~vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::~vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
PUBLIC	?deallocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEXPAPAVMaterialParamTrack@Ogre@@I@Z ; std::allocator<Ogre::MaterialParamTrack *>::deallocate
PUBLIC	??$_Ucopy@PAPAVMaterialParamTrack@Ogre@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Ucopy<Ogre::MaterialParamTrack * *>
PUBLIC	?capacity@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::capacity
PUBLIC	?_Destroy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXPAPAVMaterialParamTrack@Ogre@@0@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Destroy
PUBLIC	??$unchecked_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
PUBLIC	?clear@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$64292 = -8					; size = 4
__Ptr$64282 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@6

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@6

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::clear
	jmp	$LN9@operator@6
$LN8@operator@6:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@6

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$64282[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$64282[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXPAPAVMaterialParamTrack@Ogre@@0@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@6
$LN6@operator@6:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@6

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Ptr$64292[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$64292[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$64292[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVMaterialParamTrack@Ogre@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Ucopy<Ogre::MaterialParamTrack * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@6
$LN4@operator@6:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@6

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXPAPAVMaterialParamTrack@Ogre@@0@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEXPAPAVMaterialParamTrack@Ogre@@I@Z ; std::allocator<Ogre::MaterialParamTrack *>::deallocate
$LN2@operator@6:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@6

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVMaterialParamTrack@Ogre@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@PAPAV23@00@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Ucopy<Ogre::MaterialParamTrack * *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@6:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::VertexElement,std::allocator<Ogre::VertexElement> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 2

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::VertexElement,std::allocator<Ogre::VertexElement> >::size
_TEXT	ENDS
EXTRN	__imp___invalid_parameter_noinfo:PROC
; Function compile flags: /Odtp
;	COMDAT ??A?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEABVVertexElement@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEABVVertexElement@Ogre@@I@Z PROC ; std::vector<Ogre::VertexElement,std::allocator<Ogre::VertexElement> >::operator[], COMDAT
; _this$ = ecx

; 759  : 		{	// subscript nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 760  : 
; 761  :  #if _HAS_ITERATOR_DEBUGGING
; 762  : 		if (size() <= _Pos)
; 763  : 			{
; 764  : 			_DEBUG_ERROR("vector subscript out of range");
; 765  : 			_SCL_SECURE_OUT_OF_RANGE;
; 766  : 			}
; 767  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 768  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::VertexElement,std::allocator<Ogre::VertexElement> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@7
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@7:

; 769  : 
; 770  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 771  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@VVertexElement@Ogre@@V?$allocator@VVertexElement@Ogre@@@std@@@std@@QBEABVVertexElement@Ogre@@I@Z ENDP ; std::vector<Ogre::VertexElement,std::allocator<Ogre::VertexElement> >::operator[]
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@DV?$allocator@D@std@@@std@@IAE_NI@Z ; std::vector<char,std::allocator<char> >::_Buy
PUBLIC	??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z ; std::vector<char,std::allocator<char> >::_Ucopy<char *>
PUBLIC	?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::capacity
PUBLIC	?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z ; std::vector<char,std::allocator<char> >::_Destroy
PUBLIC	??$unchecked_copy@PADPAD@stdext@@YAPADPAD00@Z	; stdext::unchecked_copy<char *,char *>
PUBLIC	?clear@?$vector@DV?$allocator@D@std@@@std@@QAEXXZ ; std::vector<char,std::allocator<char> >::clear
PUBLIC	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
EXTRN	__imp_?deallocate@?$allocator@D@std@@QAEXPADI@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@DV?$allocator@D@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$64323 = -8					; size = 4
__Ptr$64313 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@DV?$allocator@D@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<char,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@8

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@8

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@DV?$allocator@D@std@@@std@@QAEXXZ ; std::vector<char,std::allocator<char> >::clear
	jmp	$LN9@operator@8
$LN8@operator@8:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@8

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PADPAD@stdext@@YAPADPAD00@Z ; stdext::unchecked_copy<char *,char *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$64313[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$64313[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z ; std::vector<char,std::allocator<char> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
	jmp	$LN9@operator@8
$LN6@operator@8:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@8

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	mov	ecx, DWORD PTR __Right$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR __Ptr$64323[ebp], eax

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Ptr$64323[ebp]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PADPAD@stdext@@YAPADPAD00@Z ; stdext::unchecked_copy<char *,char *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$64323[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z ; std::vector<char,std::allocator<char> >::_Ucopy<char *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@8
$LN4@operator@8:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@8

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z ; std::vector<char,std::allocator<char> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?deallocate@?$allocator@D@std@@QAEXPADI@Z
$LN2@operator@8:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@DV?$allocator@D@std@@@std@@IAE_NI@Z ; std::vector<char,std::allocator<char> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@8

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z ; std::vector<char,std::allocator<char> >::_Ucopy<char *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@8:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@DV?$allocator@D@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<char,std::allocator<char> >::operator=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$vector@DV?$allocator@D@std@@@std@@QAEAADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@DV?$allocator@D@std@@@std@@QAEAADI@Z PROC	; std::vector<char,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@9
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@9:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	add	eax, DWORD PTR __Pos$[ebp]

; 786  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@DV?$allocator@D@std@@@std@@QAEAADI@Z ENDP	; std::vector<char,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@GV?$allocator@G@std@@@std@@IAE_NI@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::_Buy
PUBLIC	?deallocate@?$allocator@G@std@@QAEXPAGI@Z	; std::allocator<unsigned short>::deallocate
PUBLIC	??$_Ucopy@PAG@?$vector@GV?$allocator@G@std@@@std@@IAEPAGPAG00@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::_Ucopy<unsigned short *>
PUBLIC	?capacity@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::capacity
PUBLIC	?_Destroy@?$vector@GV?$allocator@G@std@@@std@@IAEXPAG0@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::_Destroy
PUBLIC	??$unchecked_copy@PAGPAG@stdext@@YAPAGPAG00@Z	; stdext::unchecked_copy<unsigned short *,unsigned short *>
PUBLIC	?clear@?$vector@GV?$allocator@G@std@@@std@@QAEXXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@GV?$allocator@G@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$64352 = -8					; size = 4
__Ptr$64342 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@GV?$allocator@G@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<unsigned short,std::allocator<unsigned short> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@10

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@10

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@GV?$allocator@G@std@@@std@@QAEXXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::clear
	jmp	$LN9@operator@10
$LN8@operator@10:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@10

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAGPAG@stdext@@YAPAGPAG00@Z ; stdext::unchecked_copy<unsigned short *,unsigned short *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$64342[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$64342[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@GV?$allocator@G@std@@@std@@IAEXPAG0@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@10
$LN6@operator@10:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@10

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR __Ptr$64352[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$64352[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAGPAG@stdext@@YAPAGPAG00@Z ; stdext::unchecked_copy<unsigned short *,unsigned short *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$64352[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAG@?$vector@GV?$allocator@G@std@@@std@@IAEPAGPAG00@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::_Ucopy<unsigned short *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@10
$LN4@operator@10:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@10

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@GV?$allocator@G@std@@@std@@IAEXPAG0@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@G@std@@QAEXPAGI@Z ; std::allocator<unsigned short>::deallocate
$LN2@operator@10:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@GV?$allocator@G@std@@@std@@IAE_NI@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@10

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAG@?$vector@GV?$allocator@G@std@@@std@@IAEPAGPAG00@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::_Ucopy<unsigned short *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@10:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@GV?$allocator@G@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::operator=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ PROC	; std::vector<unsigned short,std::allocator<unsigned short> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 1

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ENDP	; std::vector<unsigned short,std::allocator<unsigned short> >::size
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ ; std::_Vector_val<unsigned int,std::allocator<unsigned int> >::~_Vector_val<unsigned int,std::allocator<unsigned int> >
PUBLIC	?_Buy@?$vector@IV?$allocator@I@std@@@std@@IAE_NI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy
PUBLIC	??0?$_Vector_val@IV?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z ; std::_Vector_val<unsigned int,std::allocator<unsigned int> >::_Vector_val<unsigned int,std::allocator<unsigned int> >
PUBLIC	??0?$allocator@I@std@@QAE@XZ			; std::allocator<unsigned int>::allocator<unsigned int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T74820 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74820[ebp], esp
	call	??0?$allocator@I@std@@QAE@XZ		; std::allocator<unsigned int>::allocator<unsigned int>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@IV?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z ; std::_Vector_val<unsigned int,std::allocator<unsigned int> >::_Vector_val<unsigned int,std::allocator<unsigned int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@IV?$allocator@I@std@@@std@@IAE_NI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
PUBLIC	?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IAEXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@@?$vector@IV?$allocator@I@std@@@std@@IAEPAIV?$_Vector_const_iterator@IV?$allocator@I@std@@@1@0PAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ucopy<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> > >
PUBLIC	?begin@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::begin
PUBLIC	?end@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::end
PUBLIC	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
PUBLIC	??0?$allocator@I@std@@QAE@ABV01@@Z		; std::allocator<unsigned int>::allocator<unsigned int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T74832 = -36						; size = 8
$T74831 = -28						; size = 8
$T74830 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74830[ebp], esp
	push	eax
	call	??0?$allocator@I@std@@QAE@ABV01@@Z	; std::allocator<unsigned int>::allocator<unsigned int>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@IV?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z ; std::_Vector_val<unsigned int,std::allocator<unsigned int> >::_Vector_val<unsigned int,std::allocator<unsigned int> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@IV?$allocator@I@std@@@std@@IAE_NI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@24

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T74831[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T74832[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@@?$vector@IV?$allocator@I@std@@@std@@IAEPAIV?$_Vector_const_iterator@IV?$allocator@I@std@@@1@0PAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ucopy<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@24
__catch$??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IAEXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@24
	ret	0
$LN5@vector@24:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@24:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@24:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IAEXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
PUBLIC	?deallocate@?$allocator@I@std@@QAEXPAII@Z	; std::allocator<unsigned int>::deallocate
PUBLIC	??$_Ucopy@PAI@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAI00@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ucopy<unsigned int *>
PUBLIC	?capacity@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::capacity
PUBLIC	?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IAEXPAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy
PUBLIC	??$unchecked_copy@PAIPAI@stdext@@YAPAIPAI00@Z	; stdext::unchecked_copy<unsigned int *,unsigned int *>
PUBLIC	?clear@?$vector@IV?$allocator@I@std@@@std@@QAEXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@IV?$allocator@I@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$64517 = -8					; size = 4
__Ptr$64507 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@IV?$allocator@I@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@11

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@11

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@IV?$allocator@I@std@@@std@@QAEXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::clear
	jmp	$LN9@operator@11
$LN8@operator@11:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@11

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAIPAI@stdext@@YAPAIPAI00@Z ; stdext::unchecked_copy<unsigned int *,unsigned int *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$64507[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$64507[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IAEXPAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@11
$LN6@operator@11:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@11

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Ptr$64517[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$64517[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAIPAI@stdext@@YAPAIPAI00@Z ; stdext::unchecked_copy<unsigned int *,unsigned int *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$64517[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAI@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAI00@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ucopy<unsigned int *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@11
$LN4@operator@11:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@11

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IAEXPAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@I@std@@QAEXPAII@Z ; std::allocator<unsigned int>::deallocate
$LN2@operator@11:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@IV?$allocator@I@std@@@std@@IAE_NI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@11

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAI@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAI00@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ucopy<unsigned int *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@11:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@IV?$allocator@I@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::~_Vector_val<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
PUBLIC	?_Buy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Buy
PUBLIC	??0?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z ; std::_Vector_val<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Vector_val<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
PUBLIC	??0?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::MorphAnimData::AnimRange>::allocator<Ogre::MorphAnimData::AnimRange>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T74860 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74860[ebp], esp
	call	??0?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::MorphAnimData::AnimRange>::allocator<Ogre::MorphAnimData::AnimRange>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z ; std::_Vector_val<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Vector_val<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
PUBLIC	?_Tidy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Tidy
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@1@0PAU234@@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Ucopy<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> > >
PUBLIC	?begin@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::begin
PUBLIC	?end@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::end
PUBLIC	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
PUBLIC	??0?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::allocator<Ogre::MorphAnimData::AnimRange>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z$3 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T74872 = -36						; size = 8
$T74871 = -28						; size = 8
$T74870 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74870[ebp], esp
	push	eax
	call	??0?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::allocator<Ogre::MorphAnimData::AnimRange>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z ; std::_Vector_val<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Vector_val<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@vector@25

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR $T74871[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T74872[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::begin
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@1@0PAU234@@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Ucopy<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> > >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN5@vector@25
__catch$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector@25
	ret	0
$LN5@vector@25:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector@25:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@25:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::~vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::~vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
PUBLIC	?deallocate@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@I@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::deallocate
PUBLIC	??$_Ucopy@PAUAnimRange@MorphAnimData@Ogre@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU234@00@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Ucopy<Ogre::MorphAnimData::AnimRange *>
PUBLIC	?capacity@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::capacity
PUBLIC	?_Destroy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXPAUAnimRange@MorphAnimData@Ogre@@0@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Destroy
PUBLIC	??$unchecked_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
PUBLIC	?clear@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::clear
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$64676 = -8					; size = 4
__Ptr$64666 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@12

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@12

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEXXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::clear
	jmp	$LN9@operator@12
$LN8@operator@12:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@12

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	??$unchecked_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$64666[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$64666[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXPAUAnimRange@MorphAnimData@Ogre@@0@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jmp	$LN9@operator@12
$LN6@operator@12:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@12

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Ptr$64676[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$64676[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	??$unchecked_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Ptr$64676[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUAnimRange@MorphAnimData@Ogre@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU234@00@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Ucopy<Ogre::MorphAnimData::AnimRange *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@12
$LN4@operator@12:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@operator@12

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXPAUAnimRange@MorphAnimData@Ogre@@0@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@I@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::deallocate
$LN2@operator@12:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@12

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUAnimRange@MorphAnimData@Ogre@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU234@00@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Ucopy<Ogre::MorphAnimData::AnimRange *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN9@operator@12:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator=
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >
__ehhandler$??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::~_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >
__ehhandler$??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::~_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::~_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >
__ehhandler$??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::~_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::~_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >
__ehhandler$??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::~_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<unsigned int> >::~_Container_base_aux_alloc_real<std::allocator<unsigned int> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ PROC	; std::_Vector_val<unsigned int,std::allocator<unsigned int> >::~_Vector_val<unsigned int,std::allocator<unsigned int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<unsigned int> >::~_Container_base_aux_alloc_real<std::allocator<unsigned int> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<unsigned int> >::~_Container_base_aux_alloc_real<std::allocator<unsigned int> >
__ehhandler$??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<unsigned int,std::allocator<unsigned int> >::~_Vector_val<unsigned int,std::allocator<unsigned int> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::~_Vector_val<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >
__ehhandler$??1?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::~_Vector_val<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
; Function compile flags: /Odtp
;	COMDAT ?capacity@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity
$LN3@capacity:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 3

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::erase
PUBLIC	?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::begin
PUBLIC	?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T74968 = -40						; size = 8
$T74967 = -32						; size = 8
$T74966 = -24						; size = 8
$T74965 = -16						; size = 8
$T74964 = -8						; size = 8
?clear@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T74965[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T74964[ebp], ecx
	mov	DWORD PTR $T74964[ebp+4], edx
	lea	eax, DWORD PTR $T74967[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T74966[ebp], ecx
	mov	DWORD PTR $T74966[ebp+4], edx
	mov	eax, DWORD PTR $T74964[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T74964[ebp]
	push	ecx
	mov	edx, DWORD PTR $T74966[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T74966[ebp]
	push	eax
	lea	ecx, DWORD PTR $T74968[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEPAUTriggerDesc@Ogre@@I@Z ; std::allocator<Ogre::TriggerDesc>::allocate
PUBLIC	?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Xlen
PUBLIC	?max_size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy
$LN2@Buy:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEPAUTriggerDesc@Ogre@@I@Z ; std::allocator<Ogre::TriggerDesc>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXPAUTriggerDesc@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXPAUTriggerDesc@Ogre@@0@Z PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::TriggerDesc> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXPAUTriggerDesc@Ogre@@0@Z ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXPAUTriggerDesc@Ogre@@0@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@I@Z ; std::allocator<Ogre::TriggerDesc>::deallocate
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T74977 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T74977[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >
__ehhandler$??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_val<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
PUBLIC	??1_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::~_Container_base_aux
PUBLIC	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
;	COMDAT ??1_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::~_Container_base_aux, COMDAT
; _this$ = ecx

; 402  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 403  : 		// Do nothing: ~_Container_base_aux_alloc_real() previously destroyed the aux object.
; 404  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::~_Container_base_aux
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@XZ PROC	; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@XZ ENDP	; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@UTriggerDesc@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::TriggerDesc>::allocator<Ogre::TriggerDesc>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@I@Z PROC ; std::allocator<Ogre::TriggerDesc>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@I@Z ENDP ; std::allocator<Ogre::TriggerDesc>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@2
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@2
$LN3@capacity@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 4
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@2:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 4

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::erase
PUBLIC	?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::begin
PUBLIC	?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T75018 = -40						; size = 8
$T75017 = -32						; size = 8
$T75016 = -24						; size = 8
$T75015 = -16						; size = 8
$T75014 = -8						; size = 8
?clear@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T75015[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T75014[ebp], ecx
	mov	DWORD PTR $T75014[ebp+4], edx
	lea	eax, DWORD PTR $T75017[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T75016[ebp], ecx
	mov	DWORD PTR $T75016[ebp+4], edx
	mov	eax, DWORD PTR $T75014[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T75014[ebp]
	push	ecx
	mov	edx, DWORD PTR $T75016[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T75016[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75018[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEPAUSequenceDesc@Ogre@@I@Z ; std::allocator<Ogre::SequenceDesc>::allocate
PUBLIC	?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Xlen
PUBLIC	?max_size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@2

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@2
	jmp	SHORT $LN3@Buy@2
$LN4@Buy@2:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@2

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@2
$LN2@Buy@2:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEPAUSequenceDesc@Ogre@@I@Z ; std::allocator<Ogre::SequenceDesc>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN3@Buy@2:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@2:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXPAUSequenceDesc@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXPAUSequenceDesc@Ogre@@0@Z PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::SequenceDesc> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXPAUSequenceDesc@Ogre@@0@Z ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@2

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXPAUSequenceDesc@Ogre@@0@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@I@Z ; std::allocator<Ogre::SequenceDesc>::deallocate
$LN1@Tidy@2:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T75027 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T75027[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >
__ehhandler$??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_val<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@XZ PROC	; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@XZ ENDP	; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@USequenceDesc@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::SequenceDesc>::allocator<Ogre::SequenceDesc>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@I@Z PROC ; std::allocator<Ogre::SequenceDesc>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@I@Z ENDP ; std::allocator<Ogre::SequenceDesc>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@3
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@3
$LN3@capacity@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@3:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 2

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::erase
PUBLIC	?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::begin
PUBLIC	?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T75066 = -40						; size = 8
$T75065 = -32						; size = 8
$T75064 = -24						; size = 8
$T75063 = -16						; size = 8
$T75062 = -8						; size = 8
?clear@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T75063[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T75062[ebp], ecx
	mov	DWORD PTR $T75062[ebp+4], edx
	lea	eax, DWORD PTR $T75065[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T75064[ebp], ecx
	mov	DWORD PTR $T75064[ebp+4], edx
	mov	eax, DWORD PTR $T75062[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T75062[ebp]
	push	ecx
	mov	edx, DWORD PTR $T75064[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T75064[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75066[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEPAPAVBoneTrack@Ogre@@I@Z ; std::allocator<Ogre::BoneTrack *>::allocate
PUBLIC	?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Xlen
PUBLIC	?max_size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@3

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@3
	jmp	SHORT $LN3@Buy@3
$LN4@Buy@3:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@3

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@3
$LN2@Buy@3:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEPAPAVBoneTrack@Ogre@@I@Z ; std::allocator<Ogre::BoneTrack *>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@3:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@3:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXPAPAVBoneTrack@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXPAPAVBoneTrack@Ogre@@0@Z PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BoneTrack *> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXPAPAVBoneTrack@Ogre@@0@Z ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@3

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXPAPAVBoneTrack@Ogre@@0@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEXPAPAVBoneTrack@Ogre@@I@Z ; std::allocator<Ogre::BoneTrack *>::deallocate
$LN1@Tidy@3:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T75075 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T75075[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@PAVBoneTrack@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BoneTrack *>::allocator<Ogre::BoneTrack *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@PAVBoneTrack@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BoneTrack *>::allocator<Ogre::BoneTrack *>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >
__ehhandler$??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_val<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVBoneTrack@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVBoneTrack@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::BoneTrack *>::allocator<Ogre::BoneTrack *>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@PAVBoneTrack@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::BoneTrack *>::allocator<Ogre::BoneTrack *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEXPAPAVBoneTrack@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEXPAPAVBoneTrack@Ogre@@I@Z PROC ; std::allocator<Ogre::BoneTrack *>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEXPAPAVBoneTrack@Ogre@@I@Z ENDP ; std::allocator<Ogre::BoneTrack *>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@4
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@4
$LN3@capacity@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@4:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 2

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::erase
PUBLIC	?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::begin
PUBLIC	?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T75112 = -40						; size = 8
$T75111 = -32						; size = 8
$T75110 = -24						; size = 8
$T75109 = -16						; size = 8
$T75108 = -8						; size = 8
?clear@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T75109[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T75108[ebp], ecx
	mov	DWORD PTR $T75108[ebp+4], edx
	lea	eax, DWORD PTR $T75111[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T75110[ebp], ecx
	mov	DWORD PTR $T75110[ebp+4], edx
	mov	eax, DWORD PTR $T75108[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T75108[ebp]
	push	ecx
	mov	edx, DWORD PTR $T75110[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T75110[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75112[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEPAPAVMaterialParamTrack@Ogre@@I@Z ; std::allocator<Ogre::MaterialParamTrack *>::allocate
PUBLIC	?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Xlen
PUBLIC	?max_size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@4

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@4
	jmp	SHORT $LN3@Buy@4
$LN4@Buy@4:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@4

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@4
$LN2@Buy@4:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEPAPAVMaterialParamTrack@Ogre@@I@Z ; std::allocator<Ogre::MaterialParamTrack *>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@4:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@4:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXPAPAVMaterialParamTrack@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXPAPAVMaterialParamTrack@Ogre@@0@Z PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::MaterialParamTrack *> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXPAPAVMaterialParamTrack@Ogre@@0@Z ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@4

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXPAPAVMaterialParamTrack@Ogre@@0@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEXPAPAVMaterialParamTrack@Ogre@@I@Z ; std::allocator<Ogre::MaterialParamTrack *>::deallocate
$LN1@Tidy@4:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T75121 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T75121[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::MaterialParamTrack *>::allocator<Ogre::MaterialParamTrack *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::MaterialParamTrack *>::allocator<Ogre::MaterialParamTrack *>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >
__ehhandler$??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_val<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::MaterialParamTrack *>::allocator<Ogre::MaterialParamTrack *>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::MaterialParamTrack *>::allocator<Ogre::MaterialParamTrack *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEXPAPAVMaterialParamTrack@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEXPAPAVMaterialParamTrack@Ogre@@I@Z PROC ; std::allocator<Ogre::MaterialParamTrack *>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEXPAPAVMaterialParamTrack@Ogre@@I@Z ENDP ; std::allocator<Ogre::MaterialParamTrack *>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC ; std::vector<char,std::allocator<char> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@5
	mov	DWORD PTR tv69[ebp], 0
	jmp	SHORT $LN4@capacity@5
$LN3@capacity@5:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv69[ebp], eax
$LN4@capacity@5:
	mov	eax, DWORD PTR tv69[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::vector<char,std::allocator<char> >::capacity
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC	; std::vector<char,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP	; std::vector<char,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@0@Z ; std::vector<char,std::allocator<char> >::erase
PUBLIC	?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ ; std::vector<char,std::allocator<char> >::begin
PUBLIC	?end@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ ; std::vector<char,std::allocator<char> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@DV?$allocator@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T75154 = -40						; size = 8
$T75153 = -32						; size = 8
$T75152 = -24						; size = 8
$T75151 = -16						; size = 8
$T75150 = -8						; size = 8
?clear@?$vector@DV?$allocator@D@std@@@std@@QAEXXZ PROC	; std::vector<char,std::allocator<char> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T75151[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ ; std::vector<char,std::allocator<char> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T75150[ebp], ecx
	mov	DWORD PTR $T75150[ebp+4], edx
	lea	eax, DWORD PTR $T75153[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ ; std::vector<char,std::allocator<char> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T75152[ebp], ecx
	mov	DWORD PTR $T75152[ebp+4], edx
	mov	eax, DWORD PTR $T75150[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T75150[ebp]
	push	ecx
	mov	edx, DWORD PTR $T75152[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T75152[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75154[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@0@Z ; std::vector<char,std::allocator<char> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@DV?$allocator@D@std@@@std@@QAEXXZ ENDP	; std::vector<char,std::allocator<char> >::clear
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ ; std::vector<char,std::allocator<char> >::_Xlen
PUBLIC	?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::max_size
EXTRN	__imp_?allocate@?$allocator@D@std@@QAEPADI@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@DV?$allocator@D@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@DV?$allocator@D@std@@@std@@IAE_NI@Z PROC	; std::vector<char,std::allocator<char> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@5

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@5
	jmp	SHORT $LN3@Buy@5
$LN4@Buy@5:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@5

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ ; std::vector<char,std::allocator<char> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@5
$LN2@Buy@5:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?allocate@?$allocator@D@std@@QAEPADI@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], eax
$LN3@Buy@5:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@5:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@DV?$allocator@D@std@@@std@@IAE_NI@Z ENDP	; std::vector<char,std::allocator<char> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@@Z ; std::_Destroy_range<std::allocator<char> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z PROC ; std::vector<char,std::allocator<char> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@@Z ; std::_Destroy_range<std::allocator<char> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z ENDP ; std::vector<char,std::allocator<char> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ PROC ; std::vector<unsigned short,std::allocator<unsigned short> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@6
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@6
$LN3@capacity@6:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 1
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@6:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::capacity
_TEXT	ENDS
PUBLIC	?erase@?$vector@GV?$allocator@G@std@@@std@@QAE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@V?$_Vector_const_iterator@GV?$allocator@G@std@@@2@0@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::erase
PUBLIC	?begin@?$vector@GV?$allocator@G@std@@@std@@QAE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@XZ ; std::vector<unsigned short,std::allocator<unsigned short> >::begin
PUBLIC	?end@?$vector@GV?$allocator@G@std@@@std@@QAE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@XZ ; std::vector<unsigned short,std::allocator<unsigned short> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@GV?$allocator@G@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T75169 = -40						; size = 8
$T75168 = -32						; size = 8
$T75167 = -24						; size = 8
$T75166 = -16						; size = 8
$T75165 = -8						; size = 8
?clear@?$vector@GV?$allocator@G@std@@@std@@QAEXXZ PROC	; std::vector<unsigned short,std::allocator<unsigned short> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T75166[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@GV?$allocator@G@std@@@std@@QAE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@XZ ; std::vector<unsigned short,std::allocator<unsigned short> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T75165[ebp], ecx
	mov	DWORD PTR $T75165[ebp+4], edx
	lea	eax, DWORD PTR $T75168[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@GV?$allocator@G@std@@@std@@QAE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@XZ ; std::vector<unsigned short,std::allocator<unsigned short> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T75167[ebp], ecx
	mov	DWORD PTR $T75167[ebp+4], edx
	mov	eax, DWORD PTR $T75165[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T75165[ebp]
	push	ecx
	mov	edx, DWORD PTR $T75167[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T75167[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75169[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@GV?$allocator@G@std@@@std@@QAE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@V?$_Vector_const_iterator@GV?$allocator@G@std@@@2@0@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@GV?$allocator@G@std@@@std@@QAEXXZ ENDP	; std::vector<unsigned short,std::allocator<unsigned short> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@G@std@@QAEPAGI@Z		; std::allocator<unsigned short>::allocate
PUBLIC	?_Xlen@?$vector@GV?$allocator@G@std@@@std@@KAXXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::_Xlen
PUBLIC	?max_size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@GV?$allocator@G@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@GV?$allocator@G@std@@@std@@IAE_NI@Z PROC	; std::vector<unsigned short,std::allocator<unsigned short> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@6

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@6
	jmp	SHORT $LN3@Buy@6
$LN4@Buy@6:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@6

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@GV?$allocator@G@std@@@std@@KAXXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@6
$LN2@Buy@6:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@G@std@@QAEPAGI@Z	; std::allocator<unsigned short>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@6:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@6:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@GV?$allocator@G@std@@@std@@IAE_NI@Z ENDP	; std::vector<unsigned short,std::allocator<unsigned short> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@@Z ; std::_Destroy_range<std::allocator<unsigned short> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@GV?$allocator@G@std@@@std@@IAEXPAG0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@GV?$allocator@G@std@@@std@@IAEXPAG0@Z PROC ; std::vector<unsigned short,std::allocator<unsigned short> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@@Z ; std::_Destroy_range<std::allocator<unsigned short> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@GV?$allocator@G@std@@@std@@IAEXPAG0@Z ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::_Destroy
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@G@std@@QAEXPAGI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@G@std@@QAEXPAGI@Z PROC		; std::allocator<unsigned short>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@G@std@@QAEXPAGI@Z ENDP		; std::allocator<unsigned short>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@7
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@7
$LN3@capacity@7:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@7:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QAE@PAIPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@XZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QAE@PAIPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@XZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@XZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QAE@PAIPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@XZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 2

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@V?$_Vector_const_iterator@IV?$allocator@I@std@@@2@0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::erase
PUBLIC	?begin@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::begin
PUBLIC	?end@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@IV?$allocator@I@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T75192 = -40						; size = 8
$T75191 = -32						; size = 8
$T75190 = -24						; size = 8
$T75189 = -16						; size = 8
$T75188 = -8						; size = 8
?clear@?$vector@IV?$allocator@I@std@@@std@@QAEXXZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T75189[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T75188[ebp], ecx
	mov	DWORD PTR $T75188[ebp+4], edx
	lea	eax, DWORD PTR $T75191[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T75190[ebp], ecx
	mov	DWORD PTR $T75190[ebp+4], edx
	mov	eax, DWORD PTR $T75188[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T75188[ebp]
	push	ecx
	mov	edx, DWORD PTR $T75190[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T75190[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75192[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@V?$_Vector_const_iterator@IV?$allocator@I@std@@@2@0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@IV?$allocator@I@std@@@std@@QAEXXZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@I@std@@QAEPAII@Z		; std::allocator<unsigned int>::allocate
PUBLIC	?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlen
PUBLIC	?max_size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@IV?$allocator@I@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@IV?$allocator@I@std@@@std@@IAE_NI@Z PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@7

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@7
	jmp	SHORT $LN3@Buy@7
$LN4@Buy@7:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@7

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@7
$LN2@Buy@7:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@I@std@@QAEPAII@Z	; std::allocator<unsigned int>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@7:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@7:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@IV?$allocator@I@std@@@std@@IAE_NI@Z ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPAI0AAV?$allocator@I@0@@Z ; std::_Destroy_range<std::allocator<unsigned int> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IAEXPAI0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IAEXPAI0@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPAI0AAV?$allocator@I@0@@Z ; std::_Destroy_range<std::allocator<unsigned int> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IAEXPAI0@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IAEXXZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@5

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IAEXPAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@I@std@@QAEXPAII@Z ; std::allocator<unsigned int>::deallocate
$LN1@Tidy@5:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IAEXXZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<unsigned int> >::_Container_base_aux_alloc_real<std::allocator<unsigned int> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@IV?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@IV?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@IV?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@IV?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@IV?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T75201 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@IV?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z PROC ; std::_Vector_val<unsigned int,std::allocator<unsigned int> >::_Vector_val<unsigned int,std::allocator<unsigned int> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@IV?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T75201[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@I@std@@QAE@ABV01@@Z	; std::allocator<unsigned int>::allocator<unsigned int>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<unsigned int> >::_Container_base_aux_alloc_real<std::allocator<unsigned int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@I@std@@QAE@ABV01@@Z	; std::allocator<unsigned int>::allocator<unsigned int>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@IV?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<unsigned int> >::~_Container_base_aux_alloc_real<std::allocator<unsigned int> >
__ehhandler$??0?$_Vector_val@IV?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@IV?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@IV?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z ENDP ; std::_Vector_val<unsigned int,std::allocator<unsigned int> >::_Vector_val<unsigned int,std::allocator<unsigned int> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<unsigned int> >::~_Container_base_aux_alloc_real<std::allocator<unsigned int> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<unsigned int> >::~_Container_base_aux_alloc_real<std::allocator<unsigned int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@I@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@I@std@@QAE@XZ PROC			; std::allocator<unsigned int>::allocator<unsigned int>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@I@std@@QAE@XZ ENDP			; std::allocator<unsigned int>::allocator<unsigned int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$allocator@I@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@I@std@@QAE@ABV01@@Z PROC			; std::allocator<unsigned int>::allocator<unsigned int>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@I@std@@QAE@ABV01@@Z ENDP			; std::allocator<unsigned int>::allocator<unsigned int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@I@std@@QAEXPAII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@I@std@@QAEXPAII@Z PROC		; std::allocator<unsigned int>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@I@std@@QAEXPAII@Z ENDP		; std::allocator<unsigned int>::deallocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@8
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@8
$LN3@capacity@8:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@8:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@PAUAnimRange@MorphAnimData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@PAUAnimRange@MorphAnimData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@PAUAnimRange@MorphAnimData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 3

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
_TEXT	ENDS
PUBLIC	?erase@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::erase
PUBLIC	?begin@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::begin
PUBLIC	?end@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::end
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T75240 = -40						; size = 8
$T75239 = -32						; size = 8
$T75238 = -24						; size = 8
$T75237 = -16						; size = 8
$T75236 = -8						; size = 8
?clear@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEXXZ PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T75237[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T75236[ebp], ecx
	mov	DWORD PTR $T75236[ebp+4], edx
	lea	eax, DWORD PTR $T75239[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T75238[ebp], ecx
	mov	DWORD PTR $T75238[ebp+4], edx
	mov	eax, DWORD PTR $T75236[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T75236[ebp]
	push	ecx
	mov	edx, DWORD PTR $T75238[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T75238[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75240[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::erase

; 1061 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEXXZ ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::clear
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEPAUAnimRange@MorphAnimData@Ogre@@I@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::allocate
PUBLIC	?_Xlen@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Xlen
PUBLIC	?max_size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@8

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@8
	jmp	SHORT $LN3@Buy@8
$LN4@Buy@8:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@8

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@8
$LN2@Buy@8:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEPAUAnimRange@MorphAnimData@Ogre@@I@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@8:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@8:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::MorphAnimData::AnimRange> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXPAUAnimRange@MorphAnimData@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXPAUAnimRange@MorphAnimData@Ogre@@0@Z PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::MorphAnimData::AnimRange> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXPAUAnimRange@MorphAnimData@Ogre@@0@Z ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@6

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXPAUAnimRange@MorphAnimData@Ogre@@0@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@I@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::deallocate
$LN1@Tidy@6:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >::_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T75249 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Vector_val<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T75249[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::allocator<Ogre::MorphAnimData::AnimRange>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >::_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::allocator<Ogre::MorphAnimData::AnimRange>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >
__ehhandler$??0?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Vector_val<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAE@XZ PROC ; std::allocator<Ogre::MorphAnimData::AnimRange>::allocator<Ogre::MorphAnimData::AnimRange>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAE@XZ ENDP ; std::allocator<Ogre::MorphAnimData::AnimRange>::allocator<Ogre::MorphAnimData::AnimRange>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::MorphAnimData::AnimRange>::allocator<Ogre::MorphAnimData::AnimRange>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::MorphAnimData::AnimRange>::allocator<Ogre::MorphAnimData::AnimRange>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@I@Z PROC ; std::allocator<Ogre::MorphAnimData::AnimRange>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@I@Z ENDP ; std::allocator<Ogre::MorphAnimData::AnimRange>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UTriggerDesc@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::TriggerDesc>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@UTriggerDesc@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::TriggerDesc>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator!=
PUBLIC	?_Make_iter@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$66761 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAUTriggerDesc@Ogre@@PAU12@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00@Z ; stdext::unchecked_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$66761[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$66761[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEXPAUTriggerDesc@Ogre@@0@Z ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$66761[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::erase
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T75283 = -80						; size = 28
$T75282 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T75283[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T75283[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75282[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T75282[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T75283[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T75283[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Xlen
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR __Message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 27   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1logic_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1logic_error@std@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1logic_error@std@@UAE@XZ$1
__ehfuncinfo$??1logic_error@std@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1logic_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 31   : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1logic_error@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??1logic_error@std@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1logic_error@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1logic_error@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Odtp
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@18
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@18:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1length_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1length_error@std@@UAE@XZ$0
__ehfuncinfo$??1length_error@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1length_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1length_error@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 110  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1length_error@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??1length_error@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1length_error@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1length_error@std@@UAE@XZ		; std::length_error::~length_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@19
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@19:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
PUBLIC	??$?0UTriggerDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UTriggerDesc@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::TriggerDesc>
PUBLIC	??0_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::_Container_base_aux
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T75349 = -24						; size = 4
$T75348 = -20						; size = 4
$T75347 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0UTriggerDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UTriggerDesc@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::TriggerDesc>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T75349[ebp], eax
	mov	ecx, DWORD PTR $T75349[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T75348[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T75348[ebp], 0
	je	SHORT $LN3@Container_
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T75348[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_
$LN3@Container_:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T75347[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T75347[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T75349[ebp]
	push	eax
	mov	ecx, DWORD PTR $T75348[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAE@V?$allocator@UTriggerDesc@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >::_Container_base_aux_alloc_real<std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 58   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 60   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 63   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 64   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pcont$ = 8						; size = 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z PROC	; std::_Aux_cont::_Aux_cont, COMDAT
; _this$ = ecx

; 364  : 	explicit _Aux_cont(const _Container_base_aux * const _Pcont)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pcont$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ENDP	; std::_Aux_cont::_Aux_cont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::_Container_base_aux, COMDAT
; _this$ = ecx

; 379  : 	_Container_base_aux()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  : 		{
; 381  : 		// Do nothing: _Container_base_aux_alloc_real() will construct the aux object.
; 382  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::_Container_base_aux
_TEXT	ENDS
PUBLIC	??$_Allocate@UTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@IPAU12@@Z ; std::_Allocate<Ogre::TriggerDesc>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEPAUTriggerDesc@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEPAUTriggerDesc@Ogre@@I@Z PROC ; std::allocator<Ogre::TriggerDesc>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@UTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@IPAU12@@Z ; std::_Allocate<Ogre::TriggerDesc>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UTriggerDesc@Ogre@@@std@@QAEPAUTriggerDesc@Ogre@@I@Z ENDP ; std::allocator<Ogre::TriggerDesc>::allocate
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@USequenceDesc@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::SequenceDesc>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@USequenceDesc@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::SequenceDesc>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator!=
PUBLIC	?_Make_iter@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$66812 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@2

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAUSequenceDesc@Ogre@@PAU12@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00@Z ; stdext::unchecked_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$66812[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$66812[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEXPAUSequenceDesc@Ogre@@0@Z ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$66812[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@2:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T75383 = -80						; size = 28
$T75382 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T75383[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T75383[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75382[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T75382[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T75383[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@2:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T75383[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Xlen
PUBLIC	??$?0USequenceDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USequenceDesc@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::SequenceDesc>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T75395 = -24						; size = 4
$T75394 = -20						; size = 4
$T75393 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0USequenceDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USequenceDesc@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::SequenceDesc>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T75395[ebp], eax
	mov	ecx, DWORD PTR $T75395[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T75394[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T75394[ebp], 0
	je	SHORT $LN3@Container_@2
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T75394[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@2
$LN3@Container_@2:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@2:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T75393[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T75393[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T75395[ebp]
	push	eax
	mov	ecx, DWORD PTR $T75394[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAE@V?$allocator@USequenceDesc@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >::_Container_base_aux_alloc_real<std::allocator<Ogre::SequenceDesc> >
PUBLIC	??$_Allocate@USequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@IPAU12@@Z ; std::_Allocate<Ogre::SequenceDesc>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEPAUSequenceDesc@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEPAUSequenceDesc@Ogre@@I@Z PROC ; std::allocator<Ogre::SequenceDesc>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@USequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@IPAU12@@Z ; std::_Allocate<Ogre::SequenceDesc>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@USequenceDesc@Ogre@@@std@@QAEPAUSequenceDesc@Ogre@@I@Z ENDP ; std::allocator<Ogre::SequenceDesc>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVBoneTrack@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::BoneTrack *>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@PAVBoneTrack@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::BoneTrack *>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator!=
PUBLIC	?_Make_iter@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$66856 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@3

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAPAVBoneTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$66856[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$66856[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEXPAPAVBoneTrack@Ogre@@0@Z ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$66856[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@3:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T75419 = -80						; size = 28
$T75418 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T75419[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T75419[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75418[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T75418[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T75419[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@3:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T75419[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Xlen
PUBLIC	??$?0PAVBoneTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVBoneTrack@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BoneTrack *>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T75431 = -24						; size = 4
$T75430 = -20						; size = 4
$T75429 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0PAVBoneTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVBoneTrack@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BoneTrack *>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T75431[ebp], eax
	mov	ecx, DWORD PTR $T75431[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T75430[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T75430[ebp], 0
	je	SHORT $LN3@Container_@3
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T75430[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@3
$LN3@Container_@3:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@3:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T75429[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T75429[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T75431[ebp]
	push	eax
	mov	ecx, DWORD PTR $T75430[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVBoneTrack@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BoneTrack *> >
PUBLIC	??$_Allocate@PAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::BoneTrack *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEPAPAVBoneTrack@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEPAPAVBoneTrack@Ogre@@I@Z PROC ; std::allocator<Ogre::BoneTrack *>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::BoneTrack *>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVBoneTrack@Ogre@@@std@@QAEPAPAVBoneTrack@Ogre@@I@Z ENDP ; std::allocator<Ogre::BoneTrack *>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::MaterialParamTrack *>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::MaterialParamTrack *>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator!=
PUBLIC	?_Make_iter@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$66900 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@4

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00@Z ; stdext::unchecked_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$66900[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$66900[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEXPAPAVMaterialParamTrack@Ogre@@0@Z ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$66900[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@4:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T75455 = -80						; size = 28
$T75454 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T75455[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T75455[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75454[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T75454[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T75455[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@4:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T75455[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Xlen
PUBLIC	??$?0PAVMaterialParamTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::MaterialParamTrack *>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T75467 = -24						; size = 4
$T75466 = -20						; size = 4
$T75465 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0PAVMaterialParamTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::MaterialParamTrack *>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T75467[ebp], eax
	mov	ecx, DWORD PTR $T75467[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T75466[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T75466[ebp], 0
	je	SHORT $LN3@Container_@4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T75466[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@4
$LN3@Container_@4:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@4:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T75465[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T75465[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T75467[ebp]
	push	eax
	mov	ecx, DWORD PTR $T75466[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAE@V?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >::_Container_base_aux_alloc_real<std::allocator<Ogre::MaterialParamTrack *> >
PUBLIC	??$_Allocate@PAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::MaterialParamTrack *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEPAPAVMaterialParamTrack@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEPAPAVMaterialParamTrack@Ogre@@I@Z PROC ; std::allocator<Ogre::MaterialParamTrack *>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@IPAPAV12@@Z ; std::_Allocate<Ogre::MaterialParamTrack *>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QAEPAPAVMaterialParamTrack@Ogre@@I@Z ENDP ; std::allocator<Ogre::MaterialParamTrack *>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<char,std::allocator<char> >::_Vector_iterator<char,std::allocator<char> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ PROC ; std::vector<char,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<char,std::allocator<char> >::_Vector_iterator<char,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ ENDP ; std::vector<char,std::allocator<char> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ PROC ; std::vector<char,std::allocator<char> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<char,std::allocator<char> >::_Vector_iterator<char,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@XZ ENDP ; std::vector<char,std::allocator<char> >::end
_TEXT	ENDS
EXTRN	__imp_?max_size@?$allocator@D@std@@QBEIXZ:PROC
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC ; std::vector<char,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?max_size@?$allocator@D@std@@QBEIXZ

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::vector<char,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<char,std::allocator<char> >::operator!=
PUBLIC	?_Make_iter@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@@Z ; std::vector<char,std::allocator<char> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$66944 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@0@Z PROC ; std::vector<char,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@@Z ; std::vector<char,std::allocator<char> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@@Z ; std::vector<char,std::allocator<char> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<char,std::allocator<char> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@5

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PADPAD@stdext@@YAPADPAD00@Z ; stdext::unchecked_copy<char *,char *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$66944[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$66944[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z ; std::vector<char,std::allocator<char> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$66944[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@5:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@0@Z ENDP ; std::vector<char,std::allocator<char> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T75491 = -80						; size = 28
$T75490 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ PROC	; std::vector<char,std::allocator<char> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T75491[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T75491[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75490[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T75490[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T75491[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@5:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T75491[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@DV?$allocator@D@std@@@std@@KAXXZ ENDP	; std::vector<char,std::allocator<char> >::_Xlen
PUBLIC	??0?$_Vector_iterator@GV?$allocator@G@std@@@std@@QAE@PAGPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<unsigned short,std::allocator<unsigned short> >::_Vector_iterator<unsigned short,std::allocator<unsigned short> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@GV?$allocator@G@std@@@std@@QAE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@GV?$allocator@G@std@@@std@@QAE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@XZ PROC ; std::vector<unsigned short,std::allocator<unsigned short> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@GV?$allocator@G@std@@@std@@QAE@PAGPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<unsigned short,std::allocator<unsigned short> >::_Vector_iterator<unsigned short,std::allocator<unsigned short> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@GV?$allocator@G@std@@@std@@QAE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@XZ ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@GV?$allocator@G@std@@@std@@QAE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@GV?$allocator@G@std@@@std@@QAE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@XZ PROC ; std::vector<unsigned short,std::allocator<unsigned short> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@GV?$allocator@G@std@@@std@@QAE@PAGPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<unsigned short,std::allocator<unsigned short> >::_Vector_iterator<unsigned short,std::allocator<unsigned short> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@GV?$allocator@G@std@@@std@@QAE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@XZ ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@G@std@@QBEIXZ		; std::allocator<unsigned short>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ PROC ; std::vector<unsigned short,std::allocator<unsigned short> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@G@std@@QBEIXZ	; std::allocator<unsigned short>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@GV?$allocator@G@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<unsigned short,std::allocator<unsigned short> >::operator!=
PUBLIC	?_Make_iter@?$vector@GV?$allocator@G@std@@@std@@QBE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@V?$_Vector_const_iterator@GV?$allocator@G@std@@@2@@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@GV?$allocator@G@std@@@std@@QAE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@V?$_Vector_const_iterator@GV?$allocator@G@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$66967 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@GV?$allocator@G@std@@@std@@QAE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@V?$_Vector_const_iterator@GV?$allocator@G@std@@@2@0@Z PROC ; std::vector<unsigned short,std::allocator<unsigned short> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@GV?$allocator@G@std@@@std@@QBE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@V?$_Vector_const_iterator@GV?$allocator@G@std@@@2@@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@GV?$allocator@G@std@@@std@@QBE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@V?$_Vector_const_iterator@GV?$allocator@G@std@@@2@@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@GV?$allocator@G@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<unsigned short,std::allocator<unsigned short> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@6

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAGPAG@stdext@@YAPAGPAG00@Z ; stdext::unchecked_copy<unsigned short *,unsigned short *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$66967[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$66967[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@GV?$allocator@G@std@@@std@@IAEXPAG0@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$66967[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@6:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@GV?$allocator@G@std@@@std@@QAE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@V?$_Vector_const_iterator@GV?$allocator@G@std@@@2@0@Z ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@GV?$allocator@G@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@GV?$allocator@G@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@GV?$allocator@G@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@GV?$allocator@G@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@GV?$allocator@G@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T75510 = -80						; size = 28
$T75509 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@GV?$allocator@G@std@@@std@@KAXXZ PROC	; std::vector<unsigned short,std::allocator<unsigned short> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@GV?$allocator@G@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T75510[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T75510[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75509[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T75509[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T75510[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@6:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@GV?$allocator@G@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T75510[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@GV?$allocator@G@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@GV?$allocator@G@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@GV?$allocator@G@std@@@std@@KAXXZ ENDP	; std::vector<unsigned short,std::allocator<unsigned short> >::_Xlen
PUBLIC	??$_Allocate@G@std@@YAPAGIPAG@Z			; std::_Allocate<unsigned short>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@G@std@@QAEPAGI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@G@std@@QAEPAGI@Z PROC		; std::allocator<unsigned short>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@G@std@@YAPAGIPAG@Z		; std::_Allocate<unsigned short>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@G@std@@QAEPAGI@Z ENDP		; std::allocator<unsigned short>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@IV?$allocator@I@std@@@std@@QAE@PAIPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<unsigned int,std::allocator<unsigned int> >::_Vector_iterator<unsigned int,std::allocator<unsigned int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@XZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@IV?$allocator@I@std@@@std@@QAE@PAIPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<unsigned int,std::allocator<unsigned int> >::_Vector_iterator<unsigned int,std::allocator<unsigned int> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@XZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@XZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@IV?$allocator@I@std@@@std@@QAE@PAIPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<unsigned int,std::allocator<unsigned int> >::_Vector_iterator<unsigned int,std::allocator<unsigned int> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@XZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@I@std@@QBEIXZ		; std::allocator<unsigned int>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@I@std@@QBEIXZ	; std::allocator<unsigned int>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::operator!=
PUBLIC	?_Make_iter@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@V?$_Vector_const_iterator@IV?$allocator@I@std@@@2@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@V?$_Vector_const_iterator@IV?$allocator@I@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$66998 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@V?$_Vector_const_iterator@IV?$allocator@I@std@@@2@0@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@V?$_Vector_const_iterator@IV?$allocator@I@std@@@2@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@V?$_Vector_const_iterator@IV?$allocator@I@std@@@2@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@7

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAIPAI@stdext@@YAPAIPAI00@Z ; stdext::unchecked_copy<unsigned int *,unsigned int *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$66998[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$66998[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IAEXPAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$66998[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@7:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@V?$_Vector_const_iterator@IV?$allocator@I@std@@@2@0@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T75531 = -80						; size = 28
$T75530 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T75531[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T75531[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75530[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T75530[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T75531[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@7:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T75531[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlen
PUBLIC	??$?0I@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@I@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><unsigned int>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T75543 = -24						; size = 4
$T75542 = -20						; size = 4
$T75541 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<unsigned int> >::_Container_base_aux_alloc_real<std::allocator<unsigned int> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0I@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@I@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><unsigned int>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T75543[ebp], eax
	mov	ecx, DWORD PTR $T75543[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T75542[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T75542[ebp], 0
	je	SHORT $LN3@Container_@5
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T75542[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@5
$LN3@Container_@5:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@5:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T75541[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T75541[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z$1:
	mov	eax, DWORD PTR $T75543[ebp]
	push	eax
	mov	ecx, DWORD PTR $T75542[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@I@std@@@std@@IAE@V?$allocator@I@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<unsigned int> >::_Container_base_aux_alloc_real<std::allocator<unsigned int> >
PUBLIC	??$_Allocate@I@std@@YAPAIIPAI@Z			; std::_Allocate<unsigned int>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@I@std@@QAEPAII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@I@std@@QAEPAII@Z PROC		; std::allocator<unsigned int>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@I@std@@YAPAIIPAI@Z		; std::_Allocate<unsigned int>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@I@std@@QAEPAII@Z ENDP		; std::allocator<unsigned int>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@PAUAnimRange@MorphAnimData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@PAUAnimRange@MorphAnimData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@PAUAnimRange@MorphAnimData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::MorphAnimData::AnimRange>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::MorphAnimData::AnimRange>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::max_size
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator!=
PUBLIC	?_Make_iter@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$67042 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@8

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$67042[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$67042[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXPAUAnimRange@MorphAnimData@Ogre@@0@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$67042[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@8:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T75567 = -80						; size = 28
$T75566 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T75567[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T75567[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75566[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T75566[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T75567[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@8:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T75567[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Xlen
PUBLIC	??$?0UAnimRange@MorphAnimData@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::MorphAnimData::AnimRange>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T75579 = -24						; size = 4
$T75578 = -20						; size = 4
$T75577 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >::_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0UAnimRange@MorphAnimData@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::MorphAnimData::AnimRange>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T75579[ebp], eax
	mov	ecx, DWORD PTR $T75579[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T75578[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T75578[ebp], 0
	je	SHORT $LN3@Container_@6
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T75578[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@6
$LN3@Container_@6:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@6:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T75577[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T75577[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T75579[ebp]
	push	eax
	mov	ecx, DWORD PTR $T75578[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >::_Container_base_aux_alloc_real<std::allocator<Ogre::MorphAnimData::AnimRange> >
PUBLIC	??$_Allocate@UAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::MorphAnimData::AnimRange>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEPAUAnimRange@MorphAnimData@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEPAUAnimRange@MorphAnimData@Ogre@@I@Z PROC ; std::allocator<Ogre::MorphAnimData::AnimRange>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@UAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::MorphAnimData::AnimRange>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEPAUAnimRange@MorphAnimData@Ogre@@I@Z ENDP ; std::allocator<Ogre::MorphAnimData::AnimRange>::allocate
_TEXT	ENDS
PUBLIC	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container
PUBLIC	??0?$_Ranit@UTriggerDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ ; std::_Ranit<Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &>::_Ranit<Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@UTriggerDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con
$LN1@Vector_con:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pcont$ = 8						; size = 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z PROC ; std::_Iterator_base_aux::_Set_container, COMDAT
; _this$ = ecx

; 452  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 453  : 		_Myaux = _Pcont->_Myownedaux;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pcont$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 454  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ENDP ; std::_Iterator_base_aux::_Set_container
_TEXT	ENDS
PUBLIC	??0?$_Ranit@USequenceDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ ; std::_Ranit<Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &>::_Ranit<Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@USequenceDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@2
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@2
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@2
$LN1@Vector_con@2:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@2:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@PAVBoneTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ; std::_Ranit<Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &>::_Ranit<Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@PAVBoneTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@3
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@3
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@3
$LN1@Vector_con@3:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@3:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@PAVMaterialParamTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ; std::_Ranit<Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &>::_Ranit<Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@PAVMaterialParamTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@4
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@4
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@4
$LN1@Vector_con@4:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@4:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@IHPBIABI@std@@QAE@XZ		; std::_Ranit<unsigned int,int,unsigned int const *,unsigned int const &>::_Ranit<unsigned int,int,unsigned int const *,unsigned int const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QAE@PAIPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QAE@PAIPBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@IHPBIABI@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@5
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@5
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@5
$LN1@Vector_con@5:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@5:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QAE@PAIPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@UAnimRange@MorphAnimData@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ; std::_Ranit<Ogre::MorphAnimData::AnimRange,int,Ogre::MorphAnimData::AnimRange const *,Ogre::MorphAnimData::AnimRange const &>::_Ranit<Ogre::MorphAnimData::AnimRange,int,Ogre::MorphAnimData::AnimRange const *,Ogre::MorphAnimData::AnimRange const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@PAUAnimRange@MorphAnimData@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@PAUAnimRange@MorphAnimData@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@UAnimRange@MorphAnimData@Ogre@@HPBU123@ABU123@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@6
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@6
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@6
$LN1@Vector_con@6:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@6:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@PAUAnimRange@MorphAnimData@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UTriggerDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@UTriggerDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@UTriggerDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &>::_Ranit<Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UTriggerDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@UTriggerDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &>::_Ranit<Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@USequenceDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@USequenceDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@USequenceDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &>::_Ranit<Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@USequenceDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@USequenceDesc@Ogre@@HPBU12@ABU12@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &>::_Ranit<Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVBoneTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@PAVBoneTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@PAVBoneTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &>::_Ranit<Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVBoneTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@PAVBoneTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &>::_Ranit<Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVMaterialParamTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@PAVMaterialParamTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@PAVMaterialParamTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &>::_Ranit<Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVMaterialParamTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@PAVMaterialParamTrack@Ogre@@HPBQAV12@ABQAV12@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &>::_Ranit<Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@IHPBIABIV_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,unsigned int,int,unsigned int const *,unsigned int const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,unsigned int,int,unsigned int const *,unsigned int const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@IHPBIABI@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@IHPBIABI@std@@QAE@XZ PROC			; std::_Ranit<unsigned int,int,unsigned int const *,unsigned int const &>::_Ranit<unsigned int,int,unsigned int const *,unsigned int const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@IHPBIABIV_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@IHPBIABI@std@@QAE@XZ ENDP			; std::_Ranit<unsigned int,int,unsigned int const *,unsigned int const &>::_Ranit<unsigned int,int,unsigned int const *,unsigned int const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UAnimRange@MorphAnimData@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::MorphAnimData::AnimRange,int,Ogre::MorphAnimData::AnimRange const *,Ogre::MorphAnimData::AnimRange const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::MorphAnimData::AnimRange,int,Ogre::MorphAnimData::AnimRange const *,Ogre::MorphAnimData::AnimRange const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@UAnimRange@MorphAnimData@Ogre@@HPBU123@ABU123@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@UAnimRange@MorphAnimData@Ogre@@HPBU123@ABU123@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::MorphAnimData::AnimRange,int,Ogre::MorphAnimData::AnimRange const *,Ogre::MorphAnimData::AnimRange const &>::_Ranit<Ogre::MorphAnimData::AnimRange,int,Ogre::MorphAnimData::AnimRange const *,Ogre::MorphAnimData::AnimRange const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UAnimRange@MorphAnimData@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@UAnimRange@MorphAnimData@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::MorphAnimData::AnimRange,int,Ogre::MorphAnimData::AnimRange const *,Ogre::MorphAnimData::AnimRange const &>::_Ranit<Ogre::MorphAnimData::AnimRange,int,Ogre::MorphAnimData::AnimRange const *,Ogre::MorphAnimData::AnimRange const &>
_TEXT	ENDS
PUBLIC	??0_Iterator_base_aux@std@@QAE@XZ		; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UTriggerDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UTriggerDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UTriggerDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::TriggerDesc,int,Ogre::TriggerDesc const *,Ogre::TriggerDesc const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Iterator_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base_aux@std@@QAE@XZ PROC			; std::_Iterator_base_aux::_Iterator_base_aux, COMDAT
; _this$ = ecx

; 448  : 	_Iterator_base_aux()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base_aux@std@@QAE@XZ ENDP			; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@USequenceDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@USequenceDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@USequenceDesc@Ogre@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::SequenceDesc,int,Ogre::SequenceDesc const *,Ogre::SequenceDesc const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVBoneTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVBoneTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVBoneTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BoneTrack *,int,Ogre::BoneTrack * const *,Ogre::BoneTrack * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVMaterialParamTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVMaterialParamTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVMaterialParamTrack@Ogre@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::MaterialParamTrack *,int,Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@IHPBIABIV_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@IHPBIABIV_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,unsigned int,int,unsigned int const *,unsigned int const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,unsigned int,int,unsigned int const *,unsigned int const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@IHPBIABIV_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,unsigned int,int,unsigned int const *,unsigned int const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,unsigned int,int,unsigned int const *,unsigned int const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UAnimRange@MorphAnimData@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UAnimRange@MorphAnimData@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::MorphAnimData::AnimRange,int,Ogre::MorphAnimData::AnimRange const *,Ogre::MorphAnimData::AnimRange const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::MorphAnimData::AnimRange,int,Ogre::MorphAnimData::AnimRange const *,Ogre::MorphAnimData::AnimRange const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UAnimRange@MorphAnimData@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::MorphAnimData::AnimRange,int,Ogre::MorphAnimData::AnimRange const *,Ogre::MorphAnimData::AnimRange const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::MorphAnimData::AnimRange,int,Ogre::MorphAnimData::AnimRange const *,Ogre::MorphAnimData::AnimRange const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UTriggerDesc@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@UTriggerDesc@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::TriggerDesc>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@UTriggerDesc@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::TriggerDesc>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::allocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@USequenceDesc@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@USequenceDesc@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::SequenceDesc>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 268435455	; 0fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@2
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@2
$LN3@max_size@2:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@USequenceDesc@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::SequenceDesc>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAVBoneTrack@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@PAVBoneTrack@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::BoneTrack *>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@3
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@3
$LN3@max_size@3:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@3:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVBoneTrack@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::BoneTrack *>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::MaterialParamTrack *>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@4
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@4
$LN3@max_size@4:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@4:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVMaterialParamTrack@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::MaterialParamTrack *>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@@Z PROC ; std::vector<char,std::allocator<char> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<char,std::allocator<char> >::_Vector_iterator<char,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_iterator@DV?$allocator@D@std@@@2@V?$_Vector_const_iterator@DV?$allocator@D@std@@@2@@Z ENDP ; std::vector<char,std::allocator<char> >::_Make_iter
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@GV?$allocator@G@std@@@std@@QBE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@V?$_Vector_const_iterator@GV?$allocator@G@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@GV?$allocator@G@std@@@std@@QBE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@V?$_Vector_const_iterator@GV?$allocator@G@std@@@2@@Z PROC ; std::vector<unsigned short,std::allocator<unsigned short> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@GV?$allocator@G@std@@@std@@QAE@PAGPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<unsigned short,std::allocator<unsigned short> >::_Vector_iterator<unsigned short,std::allocator<unsigned short> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@GV?$allocator@G@std@@@std@@QBE?AV?$_Vector_iterator@GV?$allocator@G@std@@@2@V?$_Vector_const_iterator@GV?$allocator@G@std@@@2@@Z ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@G@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@G@std@@QBEIXZ PROC		; std::allocator<unsigned short>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 2147483647	; 7fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@5
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@5
$LN3@max_size@5:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@5:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@G@std@@QBEIXZ ENDP		; std::allocator<unsigned short>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@V?$_Vector_const_iterator@IV?$allocator@I@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@V?$_Vector_const_iterator@IV?$allocator@I@std@@@2@@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@IV?$allocator@I@std@@@std@@QAE@PAIPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<unsigned int,std::allocator<unsigned int> >::_Vector_iterator<unsigned int,std::allocator<unsigned int> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@V?$_Vector_const_iterator@IV?$allocator@I@std@@@2@@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@I@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@I@std@@QBEIXZ PROC		; std::allocator<unsigned int>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@6
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@6
$LN3@max_size@6:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@6:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@I@std@@QBEIXZ ENDP		; std::allocator<unsigned int>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@PAUAnimRange@MorphAnimData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Make_iter
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::MorphAnimData::AnimRange>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@7
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@7
$LN3@max_size@7:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@7:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::MorphAnimData::AnimRange>::max_size
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator==
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator!=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QAE@PAUTriggerDesc@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Vector_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QAE@PAUSequenceDesc@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Vector_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QAE@PAPAVBoneTrack@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Vector_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QAE@PAPAVMaterialParamTrack@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Vector_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<char,std::allocator<char> >::_Vector_const_iterator<char,std::allocator<char> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<char,std::allocator<char> >::_Vector_iterator<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<char,std::allocator<char> >::_Vector_const_iterator<char,std::allocator<char> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<char,std::allocator<char> >::_Vector_iterator<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<char,std::allocator<char> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<char,std::allocator<char> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<char,std::allocator<char> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<char,std::allocator<char> >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@GV?$allocator@G@std@@@std@@QAE@PAGPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<unsigned short,std::allocator<unsigned short> >::_Vector_const_iterator<unsigned short,std::allocator<unsigned short> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_iterator@GV?$allocator@G@std@@@std@@QAE@PAGPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@GV?$allocator@G@std@@@std@@QAE@PAGPBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<unsigned short,std::allocator<unsigned short> >::_Vector_iterator<unsigned short,std::allocator<unsigned short> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@GV?$allocator@G@std@@@std@@QAE@PAGPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<unsigned short,std::allocator<unsigned short> >::_Vector_const_iterator<unsigned short,std::allocator<unsigned short> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@GV?$allocator@G@std@@@std@@QAE@PAGPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<unsigned short,std::allocator<unsigned short> >::_Vector_iterator<unsigned short,std::allocator<unsigned short> >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@GV?$allocator@G@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<unsigned short,std::allocator<unsigned short> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@GV?$allocator@G@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@GV?$allocator@G@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<unsigned short,std::allocator<unsigned short> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@GV?$allocator@G@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<unsigned short,std::allocator<unsigned short> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@GV?$allocator@G@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<unsigned short,std::allocator<unsigned short> >::operator!=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@IV?$allocator@I@std@@@std@@QAE@PAIPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@IV?$allocator@I@std@@@std@@QAE@PAIPBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<unsigned int,std::allocator<unsigned int> >::_Vector_iterator<unsigned int,std::allocator<unsigned int> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QAE@PAIPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@IV?$allocator@I@std@@@std@@QAE@PAIPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<unsigned int,std::allocator<unsigned int> >::_Vector_iterator<unsigned int,std::allocator<unsigned int> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@PAUAnimRange@MorphAnimData@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@PAUAnimRange@MorphAnimData@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@PAUAnimRange@MorphAnimData@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE@PAUAnimRange@MorphAnimData@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
PUBLIC	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Odtp
;	COMDAT ??8?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@13
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@13
$LN1@operator@13:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@13:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::operator==
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_aux::_Same_container, COMDAT
; _this$ = ecx

; 462  : 		{	// Accelerate the comparison by not going through the aux object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 463  : 		return _Myaux == _Other._Myaux;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Other$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al

; 464  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_aux::_Same_container
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Has_container@_Iterator_base_aux@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ PROC	; std::_Iterator_base_aux::_Has_container, COMDAT
; _this$ = ecx

; 467  : 		{	// Accelerate the comparison by not going through the aux object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 468  : 		return _Myaux != 0;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	setne	cl
	mov	al, cl

; 469  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ENDP	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@14
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@14
$LN1@operator@14:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@14:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@15
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@15
$LN1@operator@15:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@15:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@16
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@16
$LN1@operator@16:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@16:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@17
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@17
$LN1@operator@17:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@17:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@18
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@18
$LN1@operator@18:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@18:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator==
_TEXT	ENDS
PUBLIC	??0?$_Ranit@DHPBDABD@std@@QAE@XZ		; std::_Ranit<char,int,char const *,char const &>::_Ranit<char,int,char const *,char const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<char,std::allocator<char> >::_Vector_const_iterator<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@DHPBDABD@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@7
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@7
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@7
$LN1@Vector_con@7:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@7:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QAE@PADPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<char,std::allocator<char> >::_Vector_const_iterator<char,std::allocator<char> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<char,std::allocator<char> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@19
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@19
$LN1@operator@19:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@19:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@DV?$allocator@D@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<char,std::allocator<char> >::operator==
_TEXT	ENDS
PUBLIC	??0?$_Ranit@GHPBGABG@std@@QAE@XZ		; std::_Ranit<unsigned short,int,unsigned short const *,unsigned short const &>::_Ranit<unsigned short,int,unsigned short const *,unsigned short const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@GV?$allocator@G@std@@@std@@QAE@PAGPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@GV?$allocator@G@std@@@std@@QAE@PAGPBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<unsigned short,std::allocator<unsigned short> >::_Vector_const_iterator<unsigned short,std::allocator<unsigned short> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@GHPBGABG@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@8
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@8
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@8
$LN1@Vector_con@8:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@8:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@GV?$allocator@G@std@@@std@@QAE@PAGPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<unsigned short,std::allocator<unsigned short> >::_Vector_const_iterator<unsigned short,std::allocator<unsigned short> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@GV?$allocator@G@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@GV?$allocator@G@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<unsigned short,std::allocator<unsigned short> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@20
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@20
$LN1@operator@20:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@20:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@GV?$allocator@G@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<unsigned short,std::allocator<unsigned short> >::operator==
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@DHPBDABDV_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@DHPBDABD@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@DHPBDABD@std@@QAE@XZ PROC			; std::_Ranit<char,int,char const *,char const &>::_Ranit<char,int,char const *,char const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@DHPBDABDV_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@DHPBDABD@std@@QAE@XZ ENDP			; std::_Ranit<char,int,char const *,char const &>::_Ranit<char,int,char const *,char const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@GHPBGABGV_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,unsigned short,int,unsigned short const *,unsigned short const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,unsigned short,int,unsigned short const *,unsigned short const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@GHPBGABG@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@GHPBGABG@std@@QAE@XZ PROC			; std::_Ranit<unsigned short,int,unsigned short const *,unsigned short const &>::_Ranit<unsigned short,int,unsigned short const *,unsigned short const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@GHPBGABGV_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@GHPBGABG@std@@QAE@XZ ENDP			; std::_Ranit<unsigned short,int,unsigned short const *,unsigned short const &>::_Ranit<unsigned short,int,unsigned short const *,unsigned short const &>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@DHPBDABDV_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@DHPBDABDV_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@DHPBDABDV_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@GHPBGABGV_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@GHPBGABGV_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,unsigned short,int,unsigned short const *,unsigned short const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,unsigned short,int,unsigned short const *,unsigned short const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@GHPBGABGV_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,unsigned short,int,unsigned short const *,unsigned short const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,unsigned short,int,unsigned short const *,unsigned short const &,std::_Iterator_base_aux>
_TEXT	ENDS
EXTRN	?writeObject@Archive@Ogre@@QAEXPAVBaseObject@2@@Z:PROC ; Ogre::Archive::writeObject
EXTRN	?readObject@Archive@Ogre@@QAEPAVBaseObject@2@XZ:PROC ; Ogre::Archive::readObject
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrearchive.h
;	COMDAT ??$?6VVertexData@Ogre@@@Archive@Ogre@@QAEAAV01@AAPAVVertexData@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_p$67612 = -4						; size = 4
_pobj$ = 8						; size = 4
??$?6VVertexData@Ogre@@@Archive@Ogre@@QAEAAV01@AAPAVVertexData@1@@Z PROC ; Ogre::Archive::operator<<<Ogre::VertexData>, COMDAT
; _this$ = ecx

; 40   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 			if(isLoading())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@operator@21

; 42   : 			{
; 43   : 				BaseObject *p = readObject();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readObject@Archive@Ogre@@QAEPAVBaseObject@2@XZ ; Ogre::Archive::readObject
	mov	DWORD PTR _p$67612[ebp], eax

; 44   : 				if(p == NULL) pobj = NULL;

	cmp	DWORD PTR _p$67612[ebp], 0
	jne	SHORT $LN3@operator@21
	mov	ecx, DWORD PTR _pobj$[ebp]
	mov	DWORD PTR [ecx], 0

; 45   : 				else

	jmp	SHORT $LN2@operator@21
$LN3@operator@21:

; 46   : 				{
; 47   : 					assert(IS_KIND_OF(T, p));
; 48   : 					pobj = static_cast<T *>(p);

	mov	edx, DWORD PTR _pobj$[ebp]
	mov	eax, DWORD PTR _p$67612[ebp]
	mov	DWORD PTR [edx], eax
$LN2@operator@21:

; 49   : 				}
; 50   : 			}
; 51   : 			else

	jmp	SHORT $LN1@operator@21
$LN4@operator@21:

; 52   : 			{
; 53   : 				writeObject(pobj);

	mov	ecx, DWORD PTR _pobj$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?writeObject@Archive@Ogre@@QAEXPAVBaseObject@2@@Z ; Ogre::Archive::writeObject
$LN1@operator@21:

; 54   : 			}
; 55   : 
; 56   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 57   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$?6VVertexData@Ogre@@@Archive@Ogre@@QAEAAV01@AAPAVVertexData@1@@Z ENDP ; Ogre::Archive::operator<<<Ogre::VertexData>
_TEXT	ENDS
PUBLIC	??A?$vector@IV?$allocator@I@std@@@std@@QAEAAII@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
PUBLIC	?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::resize
; Function compile flags: /Odtp
;	COMDAT ??$serializeRawArray@I@Archive@Ogre@@QAEAAV01@AAV?$vector@IV?$allocator@I@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = -4						; size = 4
_array$ = 8						; size = 4
??$serializeRawArray@I@Archive@Ogre@@QAEAAV01@AAV?$vector@IV?$allocator@I@std@@@std@@@Z PROC ; Ogre::Archive::serializeRawArray<unsigned int>, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			uint num;
; 123  : 			if(isLoading())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@serializeR

; 124  : 			{
; 125  : 				read(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read

; 126  : 				array.resize(num);

	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::resize

; 127  : 				if(num > 0) read(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN3@serializeR
	mov	eax, DWORD PTR _num$[ebp]
	shl	eax, 2
	push	eax
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@IV?$allocator@I@std@@@std@@QAEAAII@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read
$LN3@serializeR:

; 128  : 			}
; 129  : 			else

	jmp	SHORT $LN2@serializeR
$LN4@serializeR:

; 130  : 			{
; 131  : 				num = (uint)array.size();

	mov	ecx, DWORD PTR _array$[ebp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	mov	DWORD PTR _num$[ebp], eax

; 132  : 				write(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write

; 133  : 				if(num > 0) write(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN2@serializeR
	mov	edx, DWORD PTR _num$[ebp]
	shl	edx, 2
	push	edx
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@IV?$allocator@I@std@@@std@@QAEAAII@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write
$LN2@serializeR:

; 134  : 			}
; 135  : 
; 136  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 137  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawArray@I@Archive@Ogre@@QAEAAV01@AAV?$vector@IV?$allocator@I@std@@@std@@@Z ENDP ; Ogre::Archive::serializeRawArray<unsigned int>
_TEXT	ENDS
PUBLIC	??A?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAUAnimRange@MorphAnimData@Ogre@@I@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator[]
PUBLIC	?resize@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::resize
; Function compile flags: /Odtp
;	COMDAT ??$serializeRawArray@UAnimRange@MorphAnimData@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = -4						; size = 4
_array$ = 8						; size = 4
??$serializeRawArray@UAnimRange@MorphAnimData@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@@Z PROC ; Ogre::Archive::serializeRawArray<Ogre::MorphAnimData::AnimRange>, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			uint num;
; 123  : 			if(isLoading())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@serializeR@2

; 124  : 			{
; 125  : 				read(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read

; 126  : 				array.resize(num);

	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::resize

; 127  : 				if(num > 0) read(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN3@serializeR@2
	mov	eax, DWORD PTR _num$[ebp]
	shl	eax, 3
	push	eax
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAUAnimRange@MorphAnimData@Ogre@@I@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read
$LN3@serializeR@2:

; 128  : 			}
; 129  : 			else

	jmp	SHORT $LN2@serializeR@2
$LN4@serializeR@2:

; 130  : 			{
; 131  : 				num = (uint)array.size();

	mov	ecx, DWORD PTR _array$[ebp]
	call	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
	mov	DWORD PTR _num$[ebp], eax

; 132  : 				write(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write

; 133  : 				if(num > 0) write(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN2@serializeR@2
	mov	edx, DWORD PTR _num$[ebp]
	shl	edx, 3
	push	edx
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAUAnimRange@MorphAnimData@Ogre@@I@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write
$LN2@serializeR@2:

; 134  : 			}
; 135  : 
; 136  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 137  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawArray@UAnimRange@MorphAnimData@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@@Z ENDP ; Ogre::Archive::serializeRawArray<Ogre::MorphAnimData::AnimRange>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@2@@stdext@@YAPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@1@0PAU23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@1@0PAU23@@Z PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Ucopy<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@2@@stdext@@YAPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@1@0PAU23@@Z ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Ucopy<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
PUBLIC	??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::TriggerDesc *>
PUBLIC	??$_Iter_random@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUTriggerDesc@Ogre@@0@Z ; std::_Iter_random<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
PUBLIC	??$_Ptr_cat@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUTriggerDesc@Ogre@@0@Z ; std::_Ptr_cat<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUTriggerDesc@Ogre@@PAU12@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00@Z
_TEXT	SEGMENT
$T75763 = -3						; size = 1
$T75762 = -2						; size = 1
$T75761 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUTriggerDesc@Ogre@@PAU12@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00@Z PROC ; stdext::unchecked_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75761[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUTriggerDesc@Ogre@@0@Z ; std::_Ptr_cat<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
	add	esp, 8
	mov	BYTE PTR $T75762[ebp], al
	movzx	eax, BYTE PTR $T75761[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75762[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75763[ebp]
	push	ecx
	call	??$_Iter_random@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUTriggerDesc@Ogre@@0@Z ; std::_Iter_random<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::TriggerDesc *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::TriggerDesc *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAUTriggerDesc@Ogre@@PAU12@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00@Z ENDP ; stdext::unchecked_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUTriggerDesc@Ogre@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@PAU23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUTriggerDesc@Ogre@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@PAU23@00@Z PROC ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Ucopy<Ogre::TriggerDesc *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAUTriggerDesc@Ogre@@@?$vector@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@IAEPAUTriggerDesc@Ogre@@PAU23@00@Z ENDP ; std::vector<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Ucopy<Ogre::TriggerDesc *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@2@@stdext@@YAPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@1@0PAU23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@1@0PAU23@@Z PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Ucopy<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@2@@stdext@@YAPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@1@0PAU23@@Z ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Ucopy<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
PUBLIC	??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::SequenceDesc *>
PUBLIC	??$_Iter_random@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSequenceDesc@Ogre@@0@Z ; std::_Iter_random<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
PUBLIC	??$_Ptr_cat@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSequenceDesc@Ogre@@0@Z ; std::_Ptr_cat<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUSequenceDesc@Ogre@@PAU12@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00@Z
_TEXT	SEGMENT
$T75772 = -3						; size = 1
$T75771 = -2						; size = 1
$T75770 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUSequenceDesc@Ogre@@PAU12@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00@Z PROC ; stdext::unchecked_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75770[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSequenceDesc@Ogre@@0@Z ; std::_Ptr_cat<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
	add	esp, 8
	mov	BYTE PTR $T75771[ebp], al
	movzx	eax, BYTE PTR $T75770[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75771[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75772[ebp]
	push	ecx
	call	??$_Iter_random@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSequenceDesc@Ogre@@0@Z ; std::_Iter_random<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::SequenceDesc *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::SequenceDesc *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAUSequenceDesc@Ogre@@PAU12@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00@Z ENDP ; stdext::unchecked_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUSequenceDesc@Ogre@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@PAU23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUSequenceDesc@Ogre@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@PAU23@00@Z PROC ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Ucopy<Ogre::SequenceDesc *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAUSequenceDesc@Ogre@@@?$vector@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@IAEPAUSequenceDesc@Ogre@@PAU23@00@Z ENDP ; std::vector<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Ucopy<Ogre::SequenceDesc *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@2@@stdext@@YAPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@1@0PAPAV23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@1@0PAPAV23@@Z PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Ucopy<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@2@@stdext@@YAPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@1@0PAPAV23@@Z ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Ucopy<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAPAVBoneTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneTrack * *>
PUBLIC	??$_Iter_random@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneTrack@Ogre@@0@Z ; std::_Iter_random<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
PUBLIC	??$_Ptr_cat@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneTrack@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVBoneTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00@Z
_TEXT	SEGMENT
$T75781 = -3						; size = 1
$T75780 = -2						; size = 1
$T75779 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVBoneTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00@Z PROC ; stdext::unchecked_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75779[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneTrack@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
	add	esp, 8
	mov	BYTE PTR $T75780[ebp], al
	movzx	eax, BYTE PTR $T75779[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75780[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75781[ebp]
	push	ecx
	call	??$_Iter_random@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneTrack@Ogre@@0@Z ; std::_Iter_random<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneTrack * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneTrack * *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAPAVBoneTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVBoneTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00@Z ENDP ; stdext::unchecked_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAPAVBoneTrack@Ogre@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@PAPAV23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAPAVBoneTrack@Ogre@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@PAPAV23@00@Z PROC ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Ucopy<Ogre::BoneTrack * *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAPAVBoneTrack@Ogre@@@?$vector@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@IAEPAPAVBoneTrack@Ogre@@PAPAV23@00@Z ENDP ; std::vector<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Ucopy<Ogre::BoneTrack * *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@2@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@1@0PAPAV23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@1@0PAPAV23@@Z PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Ucopy<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@2@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@1@0PAPAV23@@Z ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Ucopy<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAPAVMaterialParamTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::MaterialParamTrack * *>
PUBLIC	??$_Iter_random@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVMaterialParamTrack@Ogre@@0@Z ; std::_Iter_random<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
PUBLIC	??$_Ptr_cat@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVMaterialParamTrack@Ogre@@0@Z ; std::_Ptr_cat<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00@Z
_TEXT	SEGMENT
$T75790 = -3						; size = 1
$T75789 = -2						; size = 1
$T75788 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00@Z PROC ; stdext::unchecked_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75788[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVMaterialParamTrack@Ogre@@0@Z ; std::_Ptr_cat<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
	add	esp, 8
	mov	BYTE PTR $T75789[ebp], al
	movzx	eax, BYTE PTR $T75788[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75789[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75790[ebp]
	push	ecx
	call	??$_Iter_random@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVMaterialParamTrack@Ogre@@0@Z ; std::_Iter_random<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::MaterialParamTrack * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::MaterialParamTrack * *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAPAVMaterialParamTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00@Z ENDP ; stdext::unchecked_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAPAVMaterialParamTrack@Ogre@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@PAPAV23@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAPAVMaterialParamTrack@Ogre@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@PAPAV23@00@Z PROC ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Ucopy<Ogre::MaterialParamTrack * *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAPAVMaterialParamTrack@Ogre@@@?$vector@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@IAEPAPAVMaterialParamTrack@Ogre@@PAPAV23@00@Z ENDP ; std::vector<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Ucopy<Ogre::MaterialParamTrack * *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PADPADUrandom_access_iterator_tag@std@@@std@@YAPADPAD00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<char *,char *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAD@std@@YAPADAAPAD@Z		; std::_Checked_base<char *>
PUBLIC	??$_Iter_random@PADPAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD0@Z ; std::_Iter_random<char *,char *>
PUBLIC	??$_Ptr_cat@PADPAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAD0@Z ; std::_Ptr_cat<char *,char *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PADPAD@stdext@@YAPADPAD00@Z
_TEXT	SEGMENT
$T75797 = -3						; size = 1
$T75796 = -2						; size = 1
$T75795 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PADPAD@stdext@@YAPADPAD00@Z PROC	; stdext::unchecked_copy<char *,char *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75795[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PADPAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAD0@Z ; std::_Ptr_cat<char *,char *>
	add	esp, 8
	mov	BYTE PTR $T75796[ebp], al
	movzx	eax, BYTE PTR $T75795[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75796[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75797[ebp]
	push	ecx
	call	??$_Iter_random@PADPAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD0@Z ; std::_Iter_random<char *,char *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAD@std@@YAPADAAPAD@Z	; std::_Checked_base<char *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAD@std@@YAPADAAPAD@Z	; std::_Checked_base<char *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PADPADUrandom_access_iterator_tag@std@@@std@@YAPADPAD00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<char *,char *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PADPAD@stdext@@YAPADPAD00@Z ENDP	; stdext::unchecked_copy<char *,char *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PADPADV?$allocator@D@std@@@stdext@@YAPADPAD00AAV?$allocator@D@std@@@Z ; stdext::unchecked_uninitialized_copy<char *,char *,std::allocator<char> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z PROC ; std::vector<char,std::allocator<char> >::_Ucopy<char *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PADPADV?$allocator@D@std@@@stdext@@YAPADPAD00AAV?$allocator@D@std@@@Z ; stdext::unchecked_uninitialized_copy<char *,char *,std::allocator<char> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z ENDP ; std::vector<char,std::allocator<char> >::_Ucopy<char *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAGPAGUrandom_access_iterator_tag@std@@@std@@YAPAGPAG00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<unsigned short *,unsigned short *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAG@std@@YAPAGAAPAG@Z		; std::_Checked_base<unsigned short *>
PUBLIC	??$_Iter_random@PAGPAG@std@@YA?AUrandom_access_iterator_tag@0@ABQAG0@Z ; std::_Iter_random<unsigned short *,unsigned short *>
PUBLIC	??$_Ptr_cat@PAGPAG@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAG0@Z ; std::_Ptr_cat<unsigned short *,unsigned short *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAGPAG@stdext@@YAPAGPAG00@Z
_TEXT	SEGMENT
$T75804 = -3						; size = 1
$T75803 = -2						; size = 1
$T75802 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAGPAG@stdext@@YAPAGPAG00@Z PROC	; stdext::unchecked_copy<unsigned short *,unsigned short *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75802[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAGPAG@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAG0@Z ; std::_Ptr_cat<unsigned short *,unsigned short *>
	add	esp, 8
	mov	BYTE PTR $T75803[ebp], al
	movzx	eax, BYTE PTR $T75802[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75803[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75804[ebp]
	push	ecx
	call	??$_Iter_random@PAGPAG@std@@YA?AUrandom_access_iterator_tag@0@ABQAG0@Z ; std::_Iter_random<unsigned short *,unsigned short *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAG@std@@YAPAGAAPAG@Z	; std::_Checked_base<unsigned short *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAG@std@@YAPAGAAPAG@Z	; std::_Checked_base<unsigned short *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAGPAGUrandom_access_iterator_tag@std@@@std@@YAPAGPAG00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<unsigned short *,unsigned short *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAGPAG@stdext@@YAPAGPAG00@Z ENDP	; stdext::unchecked_copy<unsigned short *,unsigned short *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAGPAGV?$allocator@G@std@@@stdext@@YAPAGPAG00AAV?$allocator@G@std@@@Z ; stdext::unchecked_uninitialized_copy<unsigned short *,unsigned short *,std::allocator<unsigned short> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAG@?$vector@GV?$allocator@G@std@@@std@@IAEPAGPAG00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAG@?$vector@GV?$allocator@G@std@@@std@@IAEPAGPAG00@Z PROC ; std::vector<unsigned short,std::allocator<unsigned short> >::_Ucopy<unsigned short *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAGPAGV?$allocator@G@std@@@stdext@@YAPAGPAG00AAV?$allocator@G@std@@@Z ; stdext::unchecked_uninitialized_copy<unsigned short *,unsigned short *,std::allocator<unsigned short> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAG@?$vector@GV?$allocator@G@std@@@std@@IAEPAGPAG00@Z ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::_Ucopy<unsigned short *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@stdext@@YAPAIV?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@0PAIAAV?$allocator@I@2@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >,unsigned int *,std::allocator<unsigned int> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@@?$vector@IV?$allocator@I@std@@@std@@IAEPAIV?$_Vector_const_iterator@IV?$allocator@I@std@@@1@0PAI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@@?$vector@IV?$allocator@I@std@@@std@@IAEPAIV?$_Vector_const_iterator@IV?$allocator@I@std@@@1@0PAI@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ucopy<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@stdext@@YAPAIV?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@0PAIAAV?$allocator@I@2@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >,unsigned int *,std::allocator<unsigned int> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@@?$vector@IV?$allocator@I@std@@@std@@IAEPAIV?$_Vector_const_iterator@IV?$allocator@I@std@@@1@0PAI@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ucopy<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAIPAIUrandom_access_iterator_tag@std@@@std@@YAPAIPAI00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<unsigned int *,unsigned int *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAI@std@@YAPAIAAPAI@Z		; std::_Checked_base<unsigned int *>
PUBLIC	??$_Iter_random@PAIPAI@std@@YA?AUrandom_access_iterator_tag@0@ABQAI0@Z ; std::_Iter_random<unsigned int *,unsigned int *>
PUBLIC	??$_Ptr_cat@PAIPAI@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAI0@Z ; std::_Ptr_cat<unsigned int *,unsigned int *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAIPAI@stdext@@YAPAIPAI00@Z
_TEXT	SEGMENT
$T75813 = -3						; size = 1
$T75812 = -2						; size = 1
$T75811 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAIPAI@stdext@@YAPAIPAI00@Z PROC	; stdext::unchecked_copy<unsigned int *,unsigned int *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75811[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAIPAI@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAI0@Z ; std::_Ptr_cat<unsigned int *,unsigned int *>
	add	esp, 8
	mov	BYTE PTR $T75812[ebp], al
	movzx	eax, BYTE PTR $T75811[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75812[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75813[ebp]
	push	ecx
	call	??$_Iter_random@PAIPAI@std@@YA?AUrandom_access_iterator_tag@0@ABQAI0@Z ; std::_Iter_random<unsigned int *,unsigned int *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAI@std@@YAPAIAAPAI@Z	; std::_Checked_base<unsigned int *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAI@std@@YAPAIAAPAI@Z	; std::_Checked_base<unsigned int *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAIPAIUrandom_access_iterator_tag@std@@@std@@YAPAIPAI00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<unsigned int *,unsigned int *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAIPAI@stdext@@YAPAIPAI00@Z ENDP	; stdext::unchecked_copy<unsigned int *,unsigned int *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAIPAIV?$allocator@I@std@@@stdext@@YAPAIPAI00AAV?$allocator@I@std@@@Z ; stdext::unchecked_uninitialized_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAI@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAI00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAI@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAI00@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ucopy<unsigned int *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAIPAIV?$allocator@I@std@@@stdext@@YAPAIPAI00AAV?$allocator@I@std@@@Z ; stdext::unchecked_uninitialized_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAI@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAI00@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ucopy<unsigned int *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@PAUAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@2@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@5@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >
; Function compile flags: /Odtp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@1@0PAU234@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@1@0PAU234@@Z PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Ucopy<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@PAUAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@2@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@5@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >
	add	esp, 24					; 00000018H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@1@0PAU234@@Z ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Ucopy<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> > >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
PUBLIC	??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>
PUBLIC	??$_Iter_random@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAnimRange@MorphAnimData@Ogre@@0@Z ; std::_Iter_random<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
PUBLIC	??$_Ptr_cat@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@MorphAnimData@Ogre@@0@Z ; std::_Ptr_cat<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T75822 = -3						; size = 1
$T75821 = -2						; size = 1
$T75820 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00@Z PROC ; stdext::unchecked_copy<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T75820[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@MorphAnimData@Ogre@@0@Z ; std::_Ptr_cat<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
	add	esp, 8
	mov	BYTE PTR $T75821[ebp], al
	movzx	eax, BYTE PTR $T75820[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T75821[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75822[ebp]
	push	ecx
	call	??$_Iter_random@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAnimRange@MorphAnimData@Ogre@@0@Z ; std::_Iter_random<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00@Z ENDP ; stdext::unchecked_copy<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUAnimRange@MorphAnimData@Ogre@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUAnimRange@MorphAnimData@Ogre@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Ucopy<Ogre::MorphAnimData::AnimRange *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAUAnimRange@MorphAnimData@Ogre@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Ucopy<Ogre::MorphAnimData::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@@Z
_TEXT	SEGMENT
$T75827 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::TriggerDesc> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUTriggerDesc@Ogre@@0@Z ; std::_Ptr_cat<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
	add	esp, 8
	mov	BYTE PTR $T75827[ebp], al
	movzx	edx, BYTE PTR $T75827[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::TriggerDesc> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::TriggerDesc> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@@Z
_TEXT	SEGMENT
$T75830 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::SequenceDesc> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSequenceDesc@Ogre@@0@Z ; std::_Ptr_cat<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
	add	esp, 8
	mov	BYTE PTR $T75830[ebp], al
	movzx	edx, BYTE PTR $T75830[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::SequenceDesc> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::SequenceDesc> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@@Z
_TEXT	SEGMENT
$T75833 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::BoneTrack *> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneTrack@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
	add	esp, 8
	mov	BYTE PTR $T75833[ebp], al
	movzx	edx, BYTE PTR $T75833[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BoneTrack *> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::BoneTrack *> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@@Z
_TEXT	SEGMENT
$T75836 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::MaterialParamTrack *> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVMaterialParamTrack@Ogre@@0@Z ; std::_Ptr_cat<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
	add	esp, 8
	mov	BYTE PTR $T75836[ebp], al
	movzx	edx, BYTE PTR $T75836[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::MaterialParamTrack *> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::MaterialParamTrack *> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<char> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@@Z
_TEXT	SEGMENT
$T75839 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@@Z PROC ; std::_Destroy_range<std::allocator<char> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PADPAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAD0@Z ; std::_Ptr_cat<char *,char *>
	add	esp, 8
	mov	BYTE PTR $T75839[ebp], al
	movzx	edx, BYTE PTR $T75839[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<char> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@@Z ENDP ; std::_Destroy_range<std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<unsigned short> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@@Z
_TEXT	SEGMENT
$T75842 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned short> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAGPAG@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAG0@Z ; std::_Ptr_cat<unsigned short *,unsigned short *>
	add	esp, 8
	mov	BYTE PTR $T75842[ebp], al
	movzx	edx, BYTE PTR $T75842[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<unsigned short> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned short> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPAI0AAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<unsigned int> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPAI0AAV?$allocator@I@0@@Z
_TEXT	SEGMENT
$T75845 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPAI0AAV?$allocator@I@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned int> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAIPAI@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAI0@Z ; std::_Ptr_cat<unsigned int *,unsigned int *>
	add	esp, 8
	mov	BYTE PTR $T75845[ebp], al
	movzx	edx, BYTE PTR $T75845[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPAI0AAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<unsigned int> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPAI0AAV?$allocator@I@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned int> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::MorphAnimData::AnimRange> >
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@@Z
_TEXT	SEGMENT
$T75848 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::MorphAnimData::AnimRange> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@MorphAnimData@Ogre@@0@Z ; std::_Ptr_cat<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
	add	esp, 8
	mov	BYTE PTR $T75848[ebp], al
	movzx	edx, BYTE PTR $T75848[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::MorphAnimData::AnimRange> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::MorphAnimData::AnimRange> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0UTriggerDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UTriggerDesc@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0UTriggerDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UTriggerDesc@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::TriggerDesc>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0UTriggerDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UTriggerDesc@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::TriggerDesc>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Allocate@UTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@IPAU12@@Z
_TEXT	SEGMENT
$T75853 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@IPAU12@@Z PROC ; std::_Allocate<Ogre::TriggerDesc>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 8
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T75853[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T75853[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@IPAU12@@Z ENDP ; std::_Allocate<Ogre::TriggerDesc>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@PBD@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0bad_alloc@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0bad_alloc@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_alloc@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0
__ehfuncinfo$??1bad_alloc@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_alloc@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1bad_alloc@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 381  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??1bad_alloc@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1bad_alloc@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ		; std::bad_alloc::~bad_alloc
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@20
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@20:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0USequenceDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USequenceDesc@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0USequenceDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USequenceDesc@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::SequenceDesc>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0USequenceDesc@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USequenceDesc@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::SequenceDesc>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@USequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@IPAU12@@Z
_TEXT	SEGMENT
$T75878 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@USequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@IPAU12@@Z PROC ; std::_Allocate<Ogre::SequenceDesc>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 16					; 00000010H
	jae	SHORT $LN2@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T75878[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T75878[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 4
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@USequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@IPAU12@@Z ENDP ; std::_Allocate<Ogre::SequenceDesc>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0PAVBoneTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVBoneTrack@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVBoneTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVBoneTrack@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BoneTrack *>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAVBoneTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVBoneTrack@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BoneTrack *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@IPAPAV12@@Z
_TEXT	SEGMENT
$T75883 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@IPAPAV12@@Z PROC ; std::_Allocate<Ogre::BoneTrack *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@3
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T75883[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T75883[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@3:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@IPAPAV12@@Z ENDP ; std::_Allocate<Ogre::BoneTrack *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0PAVMaterialParamTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVMaterialParamTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::MaterialParamTrack *>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAVMaterialParamTrack@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVMaterialParamTrack@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::MaterialParamTrack *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@IPAPAV12@@Z
_TEXT	SEGMENT
$T75888 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@IPAPAV12@@Z PROC ; std::_Allocate<Ogre::MaterialParamTrack *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@4
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T75888[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T75888[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@4:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@IPAPAV12@@Z ENDP ; std::_Allocate<Ogre::MaterialParamTrack *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@G@std@@YAPAGIPAG@Z
_TEXT	SEGMENT
$T75891 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@G@std@@YAPAGIPAG@Z PROC			; std::_Allocate<unsigned short>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@5

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@5
$LN3@Allocate@5:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 2
	jae	SHORT $LN2@Allocate@5

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T75891[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T75891[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@5:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 1
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@5:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@G@std@@YAPAGIPAG@Z ENDP			; std::_Allocate<unsigned short>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0I@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@I@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0I@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@I@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><unsigned int>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0I@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@I@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><unsigned int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@I@std@@YAPAIIPAI@Z
_TEXT	SEGMENT
$T75896 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@I@std@@YAPAIIPAI@Z PROC			; std::_Allocate<unsigned int>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@6

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@6
$LN3@Allocate@6:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@6

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T75896[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T75896[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@6:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@6:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@I@std@@YAPAIIPAI@Z ENDP			; std::_Allocate<unsigned int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0UAnimRange@MorphAnimData@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0UAnimRange@MorphAnimData@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::MorphAnimData::AnimRange>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0UAnimRange@MorphAnimData@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UAnimRange@MorphAnimData@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::MorphAnimData::AnimRange>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@UAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@IPAU123@@Z
_TEXT	SEGMENT
$T75901 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@IPAU123@@Z PROC ; std::_Allocate<Ogre::MorphAnimData::AnimRange>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@7

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@7
$LN3@Allocate@7:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 8
	jae	SHORT $LN2@Allocate@7

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T75901[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T75901[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@7:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@7:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@IPAU123@@Z ENDP ; std::_Allocate<Ogre::MorphAnimData::AnimRange>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z
_TEXT	SEGMENT
$T75904 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z PROC ; std::_Allocate<std::_Aux_cont>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@8

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@8
$LN3@Allocate@8:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@8

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T75904[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T75904[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@8:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@8:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ENDP ; std::_Allocate<std::_Aux_cont>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
PUBLIC	?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXII@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::resize
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::resize, COMDAT
; _this$ = ecx

; 712  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		resize(_Newsize, _Ty());

	push	0
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXII@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::resize

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::resize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$vector@IV?$allocator@I@std@@@std@@QAEAAII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@IV?$allocator@I@std@@@std@@QAEAAII@Z PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@22
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@22:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 786  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@IV?$allocator@I@std@@@std@@QAEAAII@Z ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
_TEXT	ENDS
PUBLIC	?resize@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEXIUAnimRange@MorphAnimData@Ogre@@@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::resize
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T75920 = -8						; size = 8
__Newsize$ = 8						; size = 4
?resize@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEXI@Z PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::resize, COMDAT
; _this$ = ecx

; 712  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		resize(_Newsize, _Ty());

	xor	eax, eax
	mov	DWORD PTR $T75920[ebp], eax
	mov	DWORD PTR $T75920[ebp+4], eax
	mov	ecx, DWORD PTR $T75920[ebp+4]
	push	ecx
	mov	edx, DWORD PTR $T75920[ebp]
	push	edx
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEXIUAnimRange@MorphAnimData@Ogre@@@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::resize

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::resize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAUAnimRange@MorphAnimData@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAUAnimRange@MorphAnimData@Ogre@@I@Z PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@23
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@23:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]

; 786  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAUAnimRange@MorphAnimData@Ogre@@I@Z ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator[]
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@IV?$allocator@I@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<unsigned int,std::allocator<unsigned int> >::operator+
PUBLIC	?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T75932 = -64						; size = 8
$T75931 = -56						; size = 8
$T75930 = -48						; size = 8
$T75929 = -40						; size = 8
$T75928 = -32						; size = 8
$T75927 = -24						; size = 8
$T75926 = -16						; size = 8
$T75925 = -8						; size = 8
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXII@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 		if (size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	lea	eax, DWORD PTR $T75926[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T75925[ebp], ecx
	mov	DWORD PTR $T75925[ebp+4], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR $T75925[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T75925[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Insert_n
	jmp	SHORT $LN4@resize
$LN3@resize:

; 720  : 		else if (_Newsize < size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN4@resize

; 721  : 			erase(begin() + _Newsize, end());

	lea	ecx, DWORD PTR $T75928[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::end
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T75927[ebp], edx
	mov	DWORD PTR $T75927[ebp+4], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T75931[ebp]
	push	edx
	lea	eax, DWORD PTR $T75930[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::begin
	mov	ecx, eax
	call	??H?$_Vector_iterator@IV?$allocator@I@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<unsigned int,std::allocator<unsigned int> >::operator+
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T75929[ebp], ecx
	mov	DWORD PTR $T75929[ebp+4], edx
	mov	eax, DWORD PTR $T75927[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T75927[ebp]
	push	ecx
	mov	edx, DWORD PTR $T75929[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T75929[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75932[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@V?$_Vector_const_iterator@IV?$allocator@I@std@@@2@0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::erase
$LN4@resize:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXII@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::resize
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator+
PUBLIC	?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEXIUAnimRange@MorphAnimData@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T75942 = -64						; size = 8
$T75941 = -56						; size = 8
$T75940 = -48						; size = 8
$T75939 = -40						; size = 8
$T75938 = -32						; size = 8
$T75937 = -24						; size = 8
$T75936 = -16						; size = 8
$T75935 = -8						; size = 8
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 8
?resize@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEXIUAnimRange@MorphAnimData@Ogre@@@Z PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 		if (size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize@2

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	lea	eax, DWORD PTR $T75936[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T75935[ebp], ecx
	mov	DWORD PTR $T75935[ebp+4], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR $T75935[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T75935[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Insert_n
	jmp	SHORT $LN4@resize@2
$LN3@resize@2:

; 720  : 		else if (_Newsize < size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN4@resize@2

; 721  : 			erase(begin() + _Newsize, end());

	lea	ecx, DWORD PTR $T75938[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::end
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T75937[ebp], edx
	mov	DWORD PTR $T75937[ebp+4], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T75941[ebp]
	push	edx
	lea	eax, DWORD PTR $T75940[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@XZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::begin
	mov	ecx, eax
	call	??H?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator+
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T75939[ebp], ecx
	mov	DWORD PTR $T75939[ebp+4], edx
	mov	eax, DWORD PTR $T75937[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T75937[ebp]
	push	ecx
	mov	edx, DWORD PTR $T75939[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T75939[ebp]
	push	eax
	lea	ecx, DWORD PTR $T75942[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::erase
$LN4@resize@2:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?resize@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEXIUAnimRange@MorphAnimData@Ogre@@@Z ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::resize
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAIPAI@stdext@@YAPAIPAI00@Z ; stdext::_Unchecked_move_backward<unsigned int *,unsigned int *>
PUBLIC	??$fill@PAII@std@@YAXPAI0ABI@Z			; std::fill<unsigned int *,unsigned int>
PUBLIC	??$_Umove@PAI@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAI00@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove<unsigned int *>
PUBLIC	?_Ufill@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAIIABI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ufill
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$2
__catchsym$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$0
__unwindtable$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z
_TEXT	SEGMENT
tv84 = -52						; size = 4
_this$ = -48						; size = 4
__Tmp$69578 = -44					; size = 4
__Oldend$69579 = -40					; size = 4
__Tmp$69568 = -36					; size = 4
__Ncopied$69555 = -32					; size = 4
__Newvec$69553 = -28					; size = 4
__Whereoff$69554 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n
	jmp	$LN16@Insert_n
$LN14@Insert_n:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlen
	jmp	$LN16@Insert_n
$LN12@Insert_n:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n
$LN17@Insert_n:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	ecx, DWORD PTR __Capacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@I@std@@QAEPAII@Z	; std::allocator<unsigned int>::allocate
	mov	DWORD PTR __Newvec$69553[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	mov	DWORD PTR __Whereoff$69554[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$69555[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereoff$69554[ebp]
	mov	ecx, DWORD PTR __Newvec$69553[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAIIABI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$69555[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$69555[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR __Newvec$69553[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAI@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAI00@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove<unsigned int *>

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$69555[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$69555[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR __Whereoff$69554[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$69553[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAI@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAI00@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove<unsigned int *>
	jmp	SHORT $LN19@Insert_n
__catch$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$69555[ebp], 1
	jle	SHORT $LN7@Insert_n

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$69554[ebp]
	mov	ecx, DWORD PTR __Newvec$69553[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR __Newvec$69553[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IAEXPAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$69555[ebp], 0
	jle	SHORT $LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$69554[ebp]
	mov	edx, DWORD PTR __Newvec$69553[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR __Whereoff$69554[ebp]
	mov	ecx, DWORD PTR __Newvec$69553[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IAEXPAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$69553[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@I@std@@QAEXPAII@Z ; std::allocator<unsigned int>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$1
	ret	0
$LN19@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$1:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN5@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IAEXPAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@I@std@@QAEXPAII@Z ; std::allocator<unsigned int>::deallocate
$LN5@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$69553[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$69553[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$69553[ebp]
	mov	DWORD PTR [edx+12], eax
	jmp	$LN16@Insert_n
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 2
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$69568[ebp], ecx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAI@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAI00@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove<unsigned int *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	edx, DWORD PTR __Tmp$69568[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR __Where$[ebp+4]
	sar	ecx, 2
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAIIABI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ufill
	jmp	SHORT $LN21@Insert_n
__catch$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+4]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IAEXPAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$3
	ret	0
$LN21@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	edx, DWORD PTR __Tmp$69568[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+4]
	push	eax
	call	??$fill@PAII@std@@YAXPAI0ABI@Z		; std::fill<unsigned int *,unsigned int>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	SHORT $LN16@Insert_n
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$69578[ebp], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR __Oldend$69579[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Oldend$69579[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR __Oldend$69579[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAI@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAI00@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove<unsigned int *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$69579[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Oldend$69579[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$_Unchecked_move_backward@PAIPAI@stdext@@YAPAIPAI00@Z ; stdext::_Unchecked_move_backward<unsigned int *,unsigned int *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$69578[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAII@std@@YAXPAI0ABI@Z		; std::fill<unsigned int *,unsigned int>
	add	esp, 12					; 0000000cH
$LN16@Insert_n:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Insert_n
PUBLIC	??$_Unchecked_move_backward@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
PUBLIC	??$fill@PAUAnimRange@MorphAnimData@Ogre@@U123@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0ABU123@@Z ; std::fill<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange>
PUBLIC	??$_Umove@PAUAnimRange@MorphAnimData@Ogre@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU234@00@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Umove<Ogre::MorphAnimData::AnimRange *>
PUBLIC	?_Ufill@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Ufill
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z$2
__catchsym$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z$0
__unwindtable$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z
_TEXT	SEGMENT
tv84 = -60						; size = 4
_this$ = -56						; size = 4
__Tmp$69621 = -52					; size = 8
__Oldend$69622 = -44					; size = 4
__Tmp$69611 = -40					; size = 8
__Ncopied$69598 = -32					; size = 4
__Newvec$69596 = -28					; size = 4
__Whereoff$69597 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 44					; 0000002cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@2
	jmp	$LN16@Insert_n@2
$LN14@Insert_n@2:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n@2

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Xlen
	jmp	$LN16@Insert_n@2
$LN12@Insert_n@2:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@2

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@2
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@2
$LN17@Insert_n@2:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n@2:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n@2

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n@2:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	ecx, DWORD PTR __Capacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEPAUAnimRange@MorphAnimData@Ogre@@I@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::allocate
	mov	DWORD PTR __Newvec$69596[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	mov	DWORD PTR __Whereoff$69597[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$69598[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereoff$69597[ebp]
	mov	ecx, DWORD PTR __Newvec$69596[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$69598[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$69598[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR __Newvec$69596[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUAnimRange@MorphAnimData@Ogre@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU234@00@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Umove<Ogre::MorphAnimData::AnimRange *>

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$69598[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$69598[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR __Whereoff$69597[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$69596[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUAnimRange@MorphAnimData@Ogre@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU234@00@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Umove<Ogre::MorphAnimData::AnimRange *>
	jmp	SHORT $LN19@Insert_n@2
__catch$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$69598[ebp], 1
	jle	SHORT $LN7@Insert_n@2

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$69597[ebp]
	mov	ecx, DWORD PTR __Newvec$69596[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR __Newvec$69596[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXPAUAnimRange@MorphAnimData@Ogre@@0@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Destroy
$LN7@Insert_n@2:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$69598[ebp], 0
	jle	SHORT $LN6@Insert_n@2

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$69597[ebp]
	mov	edx, DWORD PTR __Newvec$69596[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	push	edx
	mov	eax, DWORD PTR __Whereoff$69597[ebp]
	mov	ecx, DWORD PTR __Newvec$69596[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXPAUAnimRange@MorphAnimData@Ogre@@0@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Destroy
$LN6@Insert_n@2:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$69596[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@I@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z$1
	ret	0
$LN19@Insert_n@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z$1:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN5@Insert_n@2

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXPAUAnimRange@MorphAnimData@Ogre@@0@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@I@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::deallocate
$LN5@Insert_n@2:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$69596[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$69596[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$69596[ebp]
	mov	DWORD PTR [edx+12], eax
	jmp	$LN16@Insert_n@2
$LN10@Insert_n@2:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 3
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@2

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$69611[ebp], ecx
	mov	DWORD PTR __Tmp$69611[ebp+4], edx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+4]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUAnimRange@MorphAnimData@Ogre@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU234@00@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Umove<Ogre::MorphAnimData::AnimRange *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$69611[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 3
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Ufill
	jmp	SHORT $LN21@Insert_n@2
__catch$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXPAUAnimRange@MorphAnimData@Ogre@@0@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z$3
	ret	0
$LN21@Insert_n@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	eax, DWORD PTR __Tmp$69611[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, ecx
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAUAnimRange@MorphAnimData@Ogre@@U123@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0ABU123@@Z ; std::fill<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	SHORT $LN16@Insert_n@2
$LN3@Insert_n@2:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$69621[ebp], eax
	mov	DWORD PTR __Tmp$69621[ebp+4], ecx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR __Oldend$69622[ebp], eax

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Oldend$69622[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Oldend$69622[ebp]
	sub	edx, ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUAnimRange@MorphAnimData@Ogre@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU234@00@Z ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Umove<Ogre::MorphAnimData::AnimRange *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$69622[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Oldend$69622[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$_Unchecked_move_backward@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$69621[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAUAnimRange@MorphAnimData@Ogre@@U123@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0ABU123@@Z ; std::fill<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange>
	add	esp, 12					; 0000000cH
$LN16@Insert_n@2:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@2@IABUAnimRange@MorphAnimData@Ogre@@@Z ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Insert_n
PUBLIC	??Y?$_Vector_iterator@IV?$allocator@I@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<unsigned int,std::allocator<unsigned int> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??H?$_Vector_iterator@IV?$allocator@I@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@IV?$allocator@I@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<unsigned int,std::allocator<unsigned int> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@IV?$allocator@I@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<unsigned int,std::allocator<unsigned int> >::operator+=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Vector_iterator@IV?$allocator@I@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<unsigned int,std::allocator<unsigned int> >::operator+
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??H?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator+=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator+
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAIIIV?$allocator@I@std@@@stdext@@YAXPAIIABIAAV?$allocator@I@std@@@Z ; stdext::unchecked_uninitialized_fill_n<unsigned int *,unsigned int,unsigned int,std::allocator<unsigned int> >
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAIIABI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAIIABI@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAIIIV?$allocator@I@std@@@stdext@@YAXPAIIABIAAV?$allocator@I@std@@@Z ; stdext::unchecked_uninitialized_fill_n<unsigned int *,unsigned int,unsigned int,std::allocator<unsigned int> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAIIABI@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ufill
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@stdext@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::MorphAnimData::AnimRange *,unsigned int,Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU345@IABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU345@IABU345@@Z PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@stdext@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::MorphAnimData::AnimRange *,unsigned int,Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU345@IABU345@@Z ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Ufill
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_iterator@IV?$allocator@I@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@IV?$allocator@I@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<unsigned int,std::allocator<unsigned int> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@IV?$allocator@I@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<unsigned int,std::allocator<unsigned int> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator+=
_TEXT	ENDS
PUBLIC	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@24
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@24:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+16]
	ja	SHORT $LN1@operator@24
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN2@operator@24
$LN1@operator@24:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@24:

; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::operator+=
_TEXT	ENDS
PUBLIC	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Iterator_base_aux::_Getmycont, COMDAT
; _this$ = ecx

; 457  : 		{	// Go through the aux object to get the container

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Getmycont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
	mov	DWORD PTR tv67[ebp], eax
	jmp	SHORT $LN4@Getmycont
$LN3@Getmycont:
	mov	DWORD PTR tv67[ebp], 0
$LN4@Getmycont:
	mov	eax, DWORD PTR tv67[ebp]

; 459  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Aux_cont::_Getcont, COMDAT
; _this$ = ecx

; 368  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 369  : 		return _Mycontainer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 370  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Aux_cont::_Getcont
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@25
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@25:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+16]
	ja	SHORT $LN1@operator@25
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN2@operator@25
$LN1@operator@25:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@25:

; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::operator+=
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::TriggerDesc const *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@AAPAUTriggerDesc@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,Ogre::TriggerDesc *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@2@@stdext@@YAPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@4@@Z
_TEXT	SEGMENT
$T76014 = -2						; size = 1
$T76013 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@2@@stdext@@YAPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T76013[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@AAPAUTriggerDesc@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,Ogre::TriggerDesc *>
	add	esp, 8
	mov	BYTE PTR $T76014[ebp], al
	movzx	eax, BYTE PTR $T76013[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76014[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::TriggerDesc const *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@2@@stdext@@YAPAUTriggerDesc@Ogre@@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::TriggerDesc *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@@Z PROC ; std::_Checked_base<Ogre::TriggerDesc *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::TriggerDesc *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@@Z ENDP ; std::_Checked_base<Ogre::TriggerDesc *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUTriggerDesc@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUTriggerDesc@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::TriggerDesc *,Ogre::TriggerDesc *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUTriggerDesc@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUTriggerDesc@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUTriggerDesc@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::TriggerDesc *,Ogre::TriggerDesc *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUTriggerDesc@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T76025 = -7						; size = 1
$T76024 = -6						; size = 1
$T76023 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::TriggerDesc *,Ogre::TriggerDesc *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Result$[ebp], edx

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T76023[ebp], al
	xor	ecx, ecx
	mov	BYTE PTR $T76024[ebp], cl
	movzx	edx, BYTE PTR $T76023[ebp]
	push	edx
	movzx	eax, BYTE PTR $T76024[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76025[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::TriggerDesc *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T76029 = -2						; size = 1
$T76028 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T76028[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUTriggerDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUTriggerDesc@Ogre@@0@Z ; std::_Ptr_cat<Ogre::TriggerDesc *,Ogre::TriggerDesc *>
	add	esp, 8
	mov	BYTE PTR $T76029[ebp], al
	movzx	eax, BYTE PTR $T76028[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76029[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::TriggerDesc *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::TriggerDesc *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@stdext@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::SequenceDesc const *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@AAPAUSequenceDesc@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,Ogre::SequenceDesc *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@2@@stdext@@YAPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@4@@Z
_TEXT	SEGMENT
$T76033 = -2						; size = 1
$T76032 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@2@@stdext@@YAPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T76032[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@AAPAUSequenceDesc@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,Ogre::SequenceDesc *>
	add	esp, 8
	mov	BYTE PTR $T76033[ebp], al
	movzx	eax, BYTE PTR $T76032[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76033[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::SequenceDesc const *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@2@@stdext@@YAPAUSequenceDesc@Ogre@@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::SequenceDesc *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@@Z PROC ; std::_Checked_base<Ogre::SequenceDesc *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::SequenceDesc *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@@Z ENDP ; std::_Checked_base<Ogre::SequenceDesc *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSequenceDesc@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSequenceDesc@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::SequenceDesc *,Ogre::SequenceDesc *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSequenceDesc@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSequenceDesc@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSequenceDesc@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::SequenceDesc *,Ogre::SequenceDesc *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSequenceDesc@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T76044 = -7						; size = 1
$T76043 = -6						; size = 1
$T76042 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::SequenceDesc *,Ogre::SequenceDesc *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 4
	shl	eax, 4
	add	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Result$[ebp], eax

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	ecx, ecx
	mov	BYTE PTR $T76042[ebp], cl
	xor	edx, edx
	mov	BYTE PTR $T76043[ebp], dl
	movzx	eax, BYTE PTR $T76042[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76043[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T76044[ebp]
	push	edx
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::SequenceDesc *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T76048 = -2						; size = 1
$T76047 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T76047[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUSequenceDesc@Ogre@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSequenceDesc@Ogre@@0@Z ; std::_Ptr_cat<Ogre::SequenceDesc *,Ogre::SequenceDesc *>
	add	esp, 8
	mov	BYTE PTR $T76048[ebp], al
	movzx	eax, BYTE PTR $T76047[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76048[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::SequenceDesc *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@@Z ; std::_Checked_base<Ogre::SequenceDesc *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@stdext@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBQAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::BoneTrack * const *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@AAPAPAVBoneTrack@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,Ogre::BoneTrack * *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@2@@stdext@@YAPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@4@@Z
_TEXT	SEGMENT
$T76052 = -2						; size = 1
$T76051 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@2@@stdext@@YAPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T76051[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@AAPAPAVBoneTrack@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,Ogre::BoneTrack * *>
	add	esp, 8
	mov	BYTE PTR $T76052[ebp], al
	movzx	eax, BYTE PTR $T76051[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76052[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBQAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::BoneTrack * const *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@2@@stdext@@YAPAPAVBoneTrack@Ogre@@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::BoneTrack * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@@Z PROC ; std::_Checked_base<Ogre::BoneTrack * *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::BoneTrack * *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@@Z ENDP ; std::_Checked_base<Ogre::BoneTrack * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneTrack@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneTrack@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::BoneTrack * *,Ogre::BoneTrack * *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVBoneTrack@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneTrack@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneTrack@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::BoneTrack * *,Ogre::BoneTrack * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneTrack@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
_TEXT	ENDS
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAPAVBoneTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAPAVBoneTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	ecx, DWORD PTR __Off$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_opt:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAPAVBoneTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T76064 = -2						; size = 1
$T76063 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T76063[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVBoneTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVBoneTrack@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BoneTrack * *,Ogre::BoneTrack * *>
	add	esp, 8
	mov	BYTE PTR $T76064[ebp], al
	movzx	eax, BYTE PTR $T76063[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76064[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneTrack * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::BoneTrack * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@stdext@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBQAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@AAPAPAVMaterialParamTrack@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,Ogre::MaterialParamTrack * *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@2@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@4@@Z
_TEXT	SEGMENT
$T76068 = -2						; size = 1
$T76067 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@2@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T76067[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@AAPAPAVMaterialParamTrack@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,Ogre::MaterialParamTrack * *>
	add	esp, 8
	mov	BYTE PTR $T76068[ebp], al
	movzx	eax, BYTE PTR $T76067[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76068[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBQAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@2@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::MaterialParamTrack * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@@Z PROC ; std::_Checked_base<Ogre::MaterialParamTrack * *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::MaterialParamTrack * *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@@Z ENDP ; std::_Checked_base<Ogre::MaterialParamTrack * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVMaterialParamTrack@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVMaterialParamTrack@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVMaterialParamTrack@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVMaterialParamTrack@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVMaterialParamTrack@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVMaterialParamTrack@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAPAVMaterialParamTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAPAVMaterialParamTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt@2

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	ecx, DWORD PTR __Off$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_opt@2:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAPAVMaterialParamTrack@Ogre@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T76080 = -2						; size = 1
$T76079 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T76079[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVMaterialParamTrack@Ogre@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVMaterialParamTrack@Ogre@@0@Z ; std::_Ptr_cat<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *>
	add	esp, 8
	mov	BYTE PTR $T76080[ebp], al
	movzx	eax, BYTE PTR $T76079[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76080[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::MaterialParamTrack * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@@Z ; std::_Checked_base<Ogre::MaterialParamTrack * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@stdext@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAD@std@@YAPADAAPADU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<char *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAD@std@@YAPADAAPAD@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAD@std@@YAPADAAPAD@Z PROC		; std::_Checked_base<char *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAD@std@@YAPADAAPADU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<char *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAD@std@@YAPADAAPAD@Z ENDP		; std::_Checked_base<char *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PADPAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PADPAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD0@Z PROC ; std::_Iter_random<char *,char *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PADPAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD0@Z ENDP ; std::_Iter_random<char *,char *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PADPAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAD0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PADPAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAD0@Z PROC ; std::_Ptr_cat<char *,char *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PADPAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAD0@Z ENDP ; std::_Ptr_cat<char *,char *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PADPADUrandom_access_iterator_tag@std@@@std@@YAPADPAD00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PADPADUrandom_access_iterator_tag@std@@@std@@YAPADPAD00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<char *,char *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Result$[ebp], ecx

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt@3

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_opt@3:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PADPADUrandom_access_iterator_tag@std@@@std@@YAPADPAD00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<char *,char *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<char *,char *,std::allocator<char> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PADPADV?$allocator@D@std@@@stdext@@YAPADPAD00AAV?$allocator@D@std@@@Z
_TEXT	SEGMENT
$T76092 = -2						; size = 1
$T76091 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PADPADV?$allocator@D@std@@@stdext@@YAPADPAD00AAV?$allocator@D@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<char *,char *,std::allocator<char> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T76091[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PADPAD@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAD0@Z ; std::_Ptr_cat<char *,char *>
	add	esp, 8
	mov	BYTE PTR $T76092[ebp], al
	movzx	eax, BYTE PTR $T76091[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76092[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAD@std@@YAPADAAPAD@Z	; std::_Checked_base<char *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAD@std@@YAPADAAPAD@Z	; std::_Checked_base<char *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<char *,char *,std::allocator<char> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PADPADV?$allocator@D@std@@@stdext@@YAPADPAD00AAV?$allocator@D@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<char *,char *,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAG@std@@YAPAGAAPAGU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<unsigned short *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAG@std@@YAPAGAAPAG@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAG@std@@YAPAGAAPAG@Z PROC		; std::_Checked_base<unsigned short *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAG@std@@YAPAGAAPAGU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<unsigned short *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAG@std@@YAPAGAAPAG@Z ENDP		; std::_Checked_base<unsigned short *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAGPAG@std@@YA?AUrandom_access_iterator_tag@0@ABQAG0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAGPAG@std@@YA?AUrandom_access_iterator_tag@0@ABQAG0@Z PROC ; std::_Iter_random<unsigned short *,unsigned short *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAGPAG@std@@YA?AUrandom_access_iterator_tag@0@ABQAG0@Z ENDP ; std::_Iter_random<unsigned short *,unsigned short *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAGPAG@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAG0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAGPAG@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAG0@Z PROC ; std::_Ptr_cat<unsigned short *,unsigned short *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAGPAG@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAG0@Z ENDP ; std::_Ptr_cat<unsigned short *,unsigned short *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAGPAGUrandom_access_iterator_tag@std@@@std@@YAPAGPAG00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAGPAGUrandom_access_iterator_tag@std@@@std@@YAPAGPAG00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<unsigned short *,unsigned short *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 1
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR __Result$[ebp], eax

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt@4

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	ecx, DWORD PTR __Off$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_opt@4:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAGPAGUrandom_access_iterator_tag@std@@@std@@YAPAGPAG00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<unsigned short *,unsigned short *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAGPAGV?$allocator@G@std@@@std@@YAPAGPAG00AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<unsigned short *,unsigned short *,std::allocator<unsigned short> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAGPAGV?$allocator@G@std@@@stdext@@YAPAGPAG00AAV?$allocator@G@std@@@Z
_TEXT	SEGMENT
$T76104 = -2						; size = 1
$T76103 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAGPAGV?$allocator@G@std@@@stdext@@YAPAGPAG00AAV?$allocator@G@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<unsigned short *,unsigned short *,std::allocator<unsigned short> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T76103[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAGPAG@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAG0@Z ; std::_Ptr_cat<unsigned short *,unsigned short *>
	add	esp, 8
	mov	BYTE PTR $T76104[ebp], al
	movzx	eax, BYTE PTR $T76103[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76104[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAG@std@@YAPAGAAPAG@Z	; std::_Checked_base<unsigned short *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAG@std@@YAPAGAAPAG@Z	; std::_Checked_base<unsigned short *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAGPAGV?$allocator@G@std@@@std@@YAPAGPAG00AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<unsigned short *,unsigned short *,std::allocator<unsigned short> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAGPAGV?$allocator@G@std@@@stdext@@YAPAGPAG00AAV?$allocator@G@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<unsigned short *,unsigned short *,std::allocator<unsigned short> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBIPAIV?$allocator@I@std@@@std@@YAPAIPBI0PAIAAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<unsigned int const *,unsigned int *,std::allocator<unsigned int> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@@std@@YAPBIAAV?$_Vector_const_iterator@IV?$allocator@I@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@PAI@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@IV?$allocator@I@std@@@0@AAPAI@Z ; std::_Ptr_cat<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >,unsigned int *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@stdext@@YAPAIV?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@0PAIAAV?$allocator@I@2@@Z
_TEXT	SEGMENT
$T76108 = -2						; size = 1
$T76107 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@stdext@@YAPAIV?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@0PAIAAV?$allocator@I@2@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >,unsigned int *,std::allocator<unsigned int> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T76107[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@PAI@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@IV?$allocator@I@std@@@0@AAPAI@Z ; std::_Ptr_cat<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >,unsigned int *>
	add	esp, 8
	mov	BYTE PTR $T76108[ebp], al
	movzx	eax, BYTE PTR $T76107[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76108[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@@std@@YAPBIAAV?$_Vector_const_iterator@IV?$allocator@I@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@@std@@YAPBIAAV?$_Vector_const_iterator@IV?$allocator@I@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBIPAIV?$allocator@I@std@@@std@@YAPAIPBI0PAIAAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<unsigned int const *,unsigned int *,std::allocator<unsigned int> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@stdext@@YAPAIV?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@0PAIAAV?$allocator@I@2@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >,unsigned int *,std::allocator<unsigned int> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAI@std@@YAPAIAAPAIU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<unsigned int *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAI@std@@YAPAIAAPAI@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAI@std@@YAPAIAAPAI@Z PROC		; std::_Checked_base<unsigned int *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAI@std@@YAPAIAAPAIU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<unsigned int *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAI@std@@YAPAIAAPAI@Z ENDP		; std::_Checked_base<unsigned int *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAIPAI@std@@YA?AUrandom_access_iterator_tag@0@ABQAI0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAIPAI@std@@YA?AUrandom_access_iterator_tag@0@ABQAI0@Z PROC ; std::_Iter_random<unsigned int *,unsigned int *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAIPAI@std@@YA?AUrandom_access_iterator_tag@0@ABQAI0@Z ENDP ; std::_Iter_random<unsigned int *,unsigned int *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAIPAI@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAI0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAIPAI@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAI0@Z PROC ; std::_Ptr_cat<unsigned int *,unsigned int *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAIPAI@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAI0@Z ENDP ; std::_Ptr_cat<unsigned int *,unsigned int *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAIPAIUrandom_access_iterator_tag@std@@@std@@YAPAIPAI00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAIPAIUrandom_access_iterator_tag@std@@@std@@YAPAIPAI00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<unsigned int *,unsigned int *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt@5

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	ecx, DWORD PTR __Off$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_opt@5:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAIPAIUrandom_access_iterator_tag@std@@@std@@YAPAIPAI00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<unsigned int *,unsigned int *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAIPAIV?$allocator@I@std@@@std@@YAPAIPAI00AAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAIPAIV?$allocator@I@std@@@stdext@@YAPAIPAI00AAV?$allocator@I@std@@@Z
_TEXT	SEGMENT
$T76120 = -2						; size = 1
$T76119 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAIPAIV?$allocator@I@std@@@stdext@@YAPAIPAI00AAV?$allocator@I@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T76119[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAIPAI@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAI0@Z ; std::_Ptr_cat<unsigned int *,unsigned int *>
	add	esp, 8
	mov	BYTE PTR $T76120[ebp], al
	movzx	eax, BYTE PTR $T76119[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76120[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAI@std@@YAPAIAAPAI@Z	; std::_Checked_base<unsigned int *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAI@std@@YAPAIAAPAI@Z	; std::_Checked_base<unsigned int *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAIPAIV?$allocator@I@std@@@std@@YAPAIPAI00AAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAIPAIV?$allocator@I@std@@@stdext@@YAPAIPAI00AAV?$allocator@I@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::MorphAnimData::AnimRange const *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@@std@@YAPBUAnimRange@MorphAnimData@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@PAUAnimRange@MorphAnimData@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@0@AAPAUAnimRange@MorphAnimData@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >,Ogre::MorphAnimData::AnimRange *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@PAUAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@2@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@5@@Z
_TEXT	SEGMENT
$T76124 = -2						; size = 1
$T76123 = -1						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@PAUAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@2@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@5@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T76123[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@PAUAnimRange@MorphAnimData@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@0@AAPAUAnimRange@MorphAnimData@Ogre@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >,Ogre::MorphAnimData::AnimRange *>
	add	esp, 8
	mov	BYTE PTR $T76124[ebp], al
	movzx	eax, BYTE PTR $T76123[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76124[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@@std@@YAPBUAnimRange@MorphAnimData@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> > >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@@std@@YAPBUAnimRange@MorphAnimData@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> > >
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::MorphAnimData::AnimRange const *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@PAUAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@2@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@5@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@@Z PROC ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@@Z ENDP ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAnimRange@MorphAnimData@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAnimRange@MorphAnimData@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAnimRange@MorphAnimData@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@MorphAnimData@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@MorphAnimData@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@MorphAnimData@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T76135 = -7						; size = 1
$T76134 = -6						; size = 1
$T76133 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Result$[ebp], edx

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T76133[ebp], al
	xor	ecx, ecx
	mov	BYTE PTR $T76134[ebp], cl
	movzx	edx, BYTE PTR $T76133[ebp]
	push	edx
	movzx	eax, BYTE PTR $T76134[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76135[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Copy_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T76139 = -2						; size = 1
$T76138 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T76138[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@MorphAnimData@Ogre@@0@Z ; std::_Ptr_cat<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
	add	esp, 8
	mov	BYTE PTR $T76139[ebp], al
	movzx	eax, BYTE PTR $T76138[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76139[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@@Z ; std::allocator<Ogre::TriggerDesc>::destroy
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::TriggerDesc> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@@Z ; std::allocator<Ogre::TriggerDesc>::destroy
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAXPAUTriggerDesc@Ogre@@0AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::TriggerDesc> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@@Z ; std::allocator<Ogre::SequenceDesc>::destroy
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::SequenceDesc> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra@2
$LN2@Destroy_ra@2:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@2:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra@2

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@@Z ; std::allocator<Ogre::SequenceDesc>::destroy
	jmp	SHORT $LN2@Destroy_ra@2
$LN4@Destroy_ra@2:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAXPAUSequenceDesc@Ogre@@0AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::BoneTrack *> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 242  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAXPAPAVBoneTrack@Ogre@@0AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::MaterialParamTrack *> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 242  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAXPAPAVMaterialParamTrack@Ogre@@0AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<char> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 242  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<char> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned short> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 242  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned short> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPAI0AAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPAI0AAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned int> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 242  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPAI0AAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned int> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::destroy
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::MorphAnimData::AnimRange> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra@3
$LN2@Destroy_ra@3:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@3:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra@3

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::destroy
	jmp	SHORT $LN2@Destroy_ra@3
$LN4@Destroy_ra@3:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::MorphAnimData::AnimRange> >
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAIPAIV?$allocator@I@std@@@stdext@@YAPAIPAI00AAV?$allocator@I@std@@@Z ; stdext::_Unchecked_uninitialized_move<unsigned int *,unsigned int *,std::allocator<unsigned int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAI@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAI00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAI@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAI00@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove<unsigned int *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAIPAIV?$allocator@I@std@@@stdext@@YAPAIPAI00AAV?$allocator@I@std@@@Z ; stdext::_Unchecked_uninitialized_move<unsigned int *,unsigned int *,std::allocator<unsigned int> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAI@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAI00@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove<unsigned int *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAII@std@@YAXPAI0ABI@Z			; std::_Fill<unsigned int *,unsigned int>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAII@std@@YAXPAI0ABI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAII@std@@YAXPAI0ABI@Z PROC			; std::fill<unsigned int *,unsigned int>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAI@std@@YAPAIAAPAI@Z	; std::_Checked_base<unsigned int *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAI@std@@YAPAIAAPAI@Z	; std::_Checked_base<unsigned int *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAII@std@@YAXPAI0ABI@Z		; std::_Fill<unsigned int *,unsigned int>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	ebp
	ret	0
??$fill@PAII@std@@YAXPAI0ABI@Z ENDP			; std::fill<unsigned int *,unsigned int>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAIPAIUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAIPAI00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<unsigned int *,unsigned int *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAI@std@@YA?AU_Undefined_move_tag@0@ABQAI@Z ; std::_Move_cat<unsigned int *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_move_backward@PAIPAI@stdext@@YAPAIPAI00@Z
_TEXT	SEGMENT
$T76164 = -3						; size = 1
$T76163 = -2						; size = 1
$T76162 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAIPAI@stdext@@YAPAIPAI00@Z PROC ; stdext::_Unchecked_move_backward<unsigned int *,unsigned int *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T76162[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAI@std@@YA?AU_Undefined_move_tag@0@ABQAI@Z ; std::_Move_cat<unsigned int *>
	add	esp, 4
	mov	BYTE PTR $T76163[ebp], al
	movzx	edx, BYTE PTR $T76162[ebp]
	push	edx
	movzx	eax, BYTE PTR $T76163[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T76164[ebp]
	push	eax
	call	??$_Iter_random@PAIPAI@std@@YA?AUrandom_access_iterator_tag@0@ABQAI0@Z ; std::_Iter_random<unsigned int *,unsigned int *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAI@std@@YAPAIAAPAI@Z	; std::_Checked_base<unsigned int *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAI@std@@YAPAIAAPAI@Z	; std::_Checked_base<unsigned int *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAIPAIUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAIPAI00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<unsigned int *,unsigned int *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAIPAI@stdext@@YAPAIPAI00@Z ENDP ; stdext::_Unchecked_move_backward<unsigned int *,unsigned int *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAUAnimRange@MorphAnimData@Ogre@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUAnimRange@MorphAnimData@Ogre@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Umove<Ogre::MorphAnimData::AnimRange *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAUAnimRange@MorphAnimData@Ogre@@@?$vector@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@IAEPAUAnimRange@MorphAnimData@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Umove<Ogre::MorphAnimData::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAUAnimRange@MorphAnimData@Ogre@@U123@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAUAnimRange@MorphAnimData@Ogre@@U123@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUAnimRange@MorphAnimData@Ogre@@U123@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0ABU123@@Z PROC ; std::fill<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAUAnimRange@MorphAnimData@Ogre@@U123@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	ebp
	ret	0
??$fill@PAUAnimRange@MorphAnimData@Ogre@@U123@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0ABU123@@Z ENDP ; std::fill<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAUAnimRange@MorphAnimData@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUAnimRange@MorphAnimData@Ogre@@@Z ; std::_Move_cat<Ogre::MorphAnimData::AnimRange *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_move_backward@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T76173 = -3						; size = 1
$T76172 = -2						; size = 1
$T76171 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00@Z PROC ; stdext::_Unchecked_move_backward<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T76171[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUAnimRange@MorphAnimData@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUAnimRange@MorphAnimData@Ogre@@@Z ; std::_Move_cat<Ogre::MorphAnimData::AnimRange *>
	add	esp, 4
	mov	BYTE PTR $T76172[ebp], al
	movzx	edx, BYTE PTR $T76171[ebp]
	push	edx
	movzx	eax, BYTE PTR $T76172[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T76173[ebp]
	push	eax
	call	??$_Iter_random@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAnimRange@MorphAnimData@Ogre@@0@Z ; std::_Iter_random<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00@Z ENDP ; stdext::_Unchecked_move_backward<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAIIIV?$allocator@I@std@@@std@@YAXPAIIABIAAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<unsigned int *,unsigned int,unsigned int,std::allocator<unsigned int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAIIIV?$allocator@I@std@@@stdext@@YAXPAIIABIAAV?$allocator@I@std@@@Z
_TEXT	SEGMENT
$T76177 = -2						; size = 1
$T76176 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAIIIV?$allocator@I@std@@@stdext@@YAXPAIIABIAAV?$allocator@I@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<unsigned int *,unsigned int,unsigned int,std::allocator<unsigned int> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T76176[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAIPAI@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAI0@Z ; std::_Ptr_cat<unsigned int *,unsigned int *>
	add	esp, 8
	mov	BYTE PTR $T76177[ebp], al
	movzx	eax, BYTE PTR $T76176[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76177[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAIIIV?$allocator@I@std@@@std@@YAXPAIIABIAAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<unsigned int *,unsigned int,unsigned int,std::allocator<unsigned int> >
	add	esp, 24					; 00000018H

; 943  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAIIIV?$allocator@I@std@@@stdext@@YAXPAIIABIAAV?$allocator@I@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<unsigned int *,unsigned int,unsigned int,std::allocator<unsigned int> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::MorphAnimData::AnimRange *,unsigned int,Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@stdext@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T76181 = -2						; size = 1
$T76180 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@stdext@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<Ogre::MorphAnimData::AnimRange *,unsigned int,Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T76180[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@MorphAnimData@Ogre@@0@Z ; std::_Ptr_cat<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
	add	esp, 8
	mov	BYTE PTR $T76181[ebp], al
	movzx	eax, BYTE PTR $T76180[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76181[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::MorphAnimData::AnimRange *,unsigned int,Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
	add	esp, 24					; 00000018H

; 943  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@stdext@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<Ogre::MorphAnimData::AnimRange *,unsigned int,Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
_TEXT	ENDS
PUBLIC	??$_Destroy@UTriggerDesc@Ogre@@@std@@YAXPAUTriggerDesc@Ogre@@@Z ; std::_Destroy<Ogre::TriggerDesc>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@@Z PROC ; std::allocator<Ogre::TriggerDesc>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@UTriggerDesc@Ogre@@@std@@YAXPAUTriggerDesc@Ogre@@@Z ; std::_Destroy<Ogre::TriggerDesc>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@@Z ENDP ; std::allocator<Ogre::TriggerDesc>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@USequenceDesc@Ogre@@@std@@YAXPAUSequenceDesc@Ogre@@@Z ; std::_Destroy<Ogre::SequenceDesc>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@@Z PROC ; std::allocator<Ogre::SequenceDesc>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@USequenceDesc@Ogre@@@std@@YAXPAUSequenceDesc@Ogre@@@Z ; std::_Destroy<Ogre::SequenceDesc>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@@Z ENDP ; std::allocator<Ogre::SequenceDesc>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@UAnimRange@MorphAnimData@Ogre@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@@Z ; std::_Destroy<Ogre::MorphAnimData::AnimRange>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@@Z PROC ; std::allocator<Ogre::MorphAnimData::AnimRange>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@UAnimRange@MorphAnimData@Ogre@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@@Z ; std::_Destroy<Ogre::MorphAnimData::AnimRange>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@@Z ENDP ; std::allocator<Ogre::MorphAnimData::AnimRange>::destroy
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@AAPAUTriggerDesc@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@AAPAUTriggerDesc@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,Ogre::TriggerDesc *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@PAUTriggerDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@AAPAUTriggerDesc@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,Ogre::TriggerDesc *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@ABU34@@Z ; std::allocator<Ogre::TriggerDesc>::construct
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::TriggerDesc const *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@ABU34@@Z ; std::allocator<Ogre::TriggerDesc>::construct
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@@Z ; std::allocator<Ogre::TriggerDesc>::destroy
	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::TriggerDesc const *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::TriggerDesc *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAUTriggerDesc@Ogre@@@std@@YAPAUTriggerDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::TriggerDesc *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt@6
$LN2@Copy_opt@6:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 8
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt@6:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@6

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Copy_opt@6
$LN1@Copy_opt@6:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAUTriggerDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::forward_iterator_tag>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@2
$LN5@Uninit_cop@2:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@2:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@2

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@ABU34@@Z ; std::allocator<Ogre::TriggerDesc>::construct
	jmp	SHORT $LN5@Uninit_cop@2
$LN4@Uninit_cop@2:
	jmp	SHORT $LN10@Uninit_cop@2
__catch$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@2
$LN2@Uninit_cop@2:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@2:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@2

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@@Z ; std::allocator<Ogre::TriggerDesc>::destroy
	jmp	SHORT $LN2@Uninit_cop@2
$LN1@Uninit_cop@2:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@2:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUTriggerDesc@Ogre@@PAU12@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@YAPAUTriggerDesc@Ogre@@PAU12@00AAV?$allocator@UTriggerDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::TriggerDesc *,Ogre::TriggerDesc *,std::allocator<Ogre::TriggerDesc> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@AAPAUSequenceDesc@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@AAPAUSequenceDesc@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,Ogre::SequenceDesc *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@PAUSequenceDesc@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@AAPAUSequenceDesc@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,Ogre::SequenceDesc *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@ABU34@@Z ; std::allocator<Ogre::SequenceDesc>::construct
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::SequenceDesc const *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@3
$LN5@Uninit_cop@3:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@3:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@3

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@ABU34@@Z ; std::allocator<Ogre::SequenceDesc>::construct
	jmp	SHORT $LN5@Uninit_cop@3
$LN4@Uninit_cop@3:
	jmp	SHORT $LN10@Uninit_cop@3
__catch$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@3
$LN2@Uninit_cop@3:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@3:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@3

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@@Z ; std::allocator<Ogre::SequenceDesc>::destroy
	jmp	SHORT $LN2@Uninit_cop@3
$LN1@Uninit_cop@3:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@3:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PBU12@0PAU12@AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::SequenceDesc const *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::SequenceDesc *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAUSequenceDesc@Ogre@@@std@@YAPAUSequenceDesc@Ogre@@AAPAU12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::SequenceDesc *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt@7
$LN2@Copy_opt@7:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt@7:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@7

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	jmp	SHORT $LN2@Copy_opt@7
$LN1@Copy_opt@7:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAUSequenceDesc@Ogre@@PAU12@Uforward_iterator_tag@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::forward_iterator_tag>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@4
$LN5@Uninit_cop@4:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@4:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@4

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@ABU34@@Z ; std::allocator<Ogre::SequenceDesc>::construct
	jmp	SHORT $LN5@Uninit_cop@4
$LN4@Uninit_cop@4:
	jmp	SHORT $LN10@Uninit_cop@4
__catch$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@4
$LN2@Uninit_cop@4:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@4:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@4

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@@Z ; std::allocator<Ogre::SequenceDesc>::destroy
	jmp	SHORT $LN2@Uninit_cop@4
$LN1@Uninit_cop@4:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@4:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUSequenceDesc@Ogre@@PAU12@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@YAPAUSequenceDesc@Ogre@@PAU12@00AAV?$allocator@USequenceDesc@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::SequenceDesc *,Ogre::SequenceDesc *,std::allocator<Ogre::SequenceDesc> >
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@AAPAPAVBoneTrack@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@AAPAPAVBoneTrack@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,Ogre::BoneTrack * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@PAPAVBoneTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@AAPAPAVBoneTrack@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,Ogre::BoneTrack * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PBQAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBQAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::BoneTrack * const *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@5

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@5:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBQAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::BoneTrack * const *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::BoneTrack * *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAPAVBoneTrack@Ogre@@@std@@YAPAPAVBoneTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::BoneTrack * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@6

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@6:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAPAVBoneTrack@Ogre@@PAPAV12@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@YAPAPAVBoneTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVBoneTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::BoneTrack * *,Ogre::BoneTrack * *,std::allocator<Ogre::BoneTrack *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@AAPAPAVMaterialParamTrack@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@AAPAPAVMaterialParamTrack@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,Ogre::MaterialParamTrack * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@PAPAVMaterialParamTrack@Ogre@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@AAPAPAVMaterialParamTrack@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,Ogre::MaterialParamTrack * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PBQAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBQAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@7

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@7:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBQAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PBQAV12@0PAPAV12@AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::MaterialParamTrack * const *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::MaterialParamTrack * *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAPAVMaterialParamTrack@Ogre@@@std@@YAPAPAVMaterialParamTrack@Ogre@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::MaterialParamTrack * *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@8

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@8:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAPAVMaterialParamTrack@Ogre@@PAPAV12@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@YAPAPAVMaterialParamTrack@Ogre@@PAPAV12@00AAV?$allocator@PAVMaterialParamTrack@Ogre@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::MaterialParamTrack * *,Ogre::MaterialParamTrack * *,std::allocator<Ogre::MaterialParamTrack *> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAD@std@@YAPADAAPADU_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAD@std@@YAPADAAPADU_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<char *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAD@std@@YAPADAAPADU_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<char *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<char *,char *,std::allocator<char> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Result$[ebp], ecx

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@9

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@9:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<char *,char *,std::allocator<char> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAG@std@@YAPAGAAPAGU_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAG@std@@YAPAGAAPAGU_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<unsigned short *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAG@std@@YAPAGAAPAGU_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<unsigned short *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAGPAGV?$allocator@G@std@@@std@@YAPAGPAG00AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAGPAGV?$allocator@G@std@@@std@@YAPAGPAG00AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<unsigned short *,unsigned short *,std::allocator<unsigned short> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 1
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@10

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@10:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAGPAGV?$allocator@G@std@@@std@@YAPAGPAG00AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<unsigned short *,unsigned short *,std::allocator<unsigned short> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBIAAV?$_Vector_const_iterator@IV?$allocator@I@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@@std@@YAPBIAAV?$_Vector_const_iterator@IV?$allocator@I@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@@std@@YAPBIAAV?$_Vector_const_iterator@IV?$allocator@I@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBIAAV?$_Vector_const_iterator@IV?$allocator@I@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@@std@@YAPBIAAV?$_Vector_const_iterator@IV?$allocator@I@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@PAI@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@IV?$allocator@I@std@@@0@AAPAI@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@PAI@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@IV?$allocator@I@std@@@0@AAPAI@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >,unsigned int *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@PAI@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@IV?$allocator@I@std@@@0@AAPAI@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >,unsigned int *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PBIPAIV?$allocator@I@std@@@std@@YAPAIPBI0PAIAAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBIPAIV?$allocator@I@std@@@std@@YAPAIPBI0PAIAAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<unsigned int const *,unsigned int *,std::allocator<unsigned int> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@11

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@11:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PBIPAIV?$allocator@I@std@@@std@@YAPAIPBI0PAIAAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<unsigned int const *,unsigned int *,std::allocator<unsigned int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAI@std@@YAPAIAAPAIU_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAI@std@@YAPAIAAPAIU_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<unsigned int *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAI@std@@YAPAIAAPAIU_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<unsigned int *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAIPAIV?$allocator@I@std@@@std@@YAPAIPAI00AAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAIPAIV?$allocator@I@std@@@std@@YAPAIPAI00AAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@12

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@12:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAIPAIV?$allocator@I@std@@@std@@YAPAIPAI00AAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUAnimRange@MorphAnimData@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@@std@@YAPBUAnimRange@MorphAnimData@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@@std@@YAPBUAnimRange@MorphAnimData@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUAnimRange@MorphAnimData@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >,std::_Different_checked_iterator_base_type_tag>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@@std@@YAPBUAnimRange@MorphAnimData@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@PAUAnimRange@MorphAnimData@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@0@AAPAUAnimRange@MorphAnimData@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@PAUAnimRange@MorphAnimData@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@0@AAPAUAnimRange@MorphAnimData@Ogre@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >,Ogre::MorphAnimData::AnimRange *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@PAUAnimRange@MorphAnimData@Ogre@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@0@AAPAUAnimRange@MorphAnimData@Ogre@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >,Ogre::MorphAnimData::AnimRange *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@ABU345@@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::construct
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::MorphAnimData::AnimRange const *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@13
$LN5@Uninit_cop@13:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@13:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@13

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@ABU345@@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::construct
	jmp	SHORT $LN5@Uninit_cop@13
$LN4@Uninit_cop@13:
	jmp	SHORT $LN10@Uninit_cop@13
__catch$??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@13
$LN2@Uninit_cop@13:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@13:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@13

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::destroy
	jmp	SHORT $LN2@Uninit_cop@13
$LN1@Uninit_cop@13:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@13:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@13:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PBU123@0PAU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::MorphAnimData::AnimRange const *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt@8
$LN2@Copy_opt@8:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 8
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt@8:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@8

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Copy_opt@8
$LN1@Copy_opt@8:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::forward_iterator_tag>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@14
$LN5@Uninit_cop@14:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@14:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@14

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@ABU345@@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::construct
	jmp	SHORT $LN5@Uninit_cop@14
$LN4@Uninit_cop@14:
	jmp	SHORT $LN10@Uninit_cop@14
__catch$??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@14
$LN2@Uninit_cop@14:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@14:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@14

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::destroy
	jmp	SHORT $LN2@Uninit_cop@14
$LN1@Uninit_cop@14:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@14:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@14:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >
PUBLIC	??$_Uninit_move@PAIPAIV?$allocator@I@std@@U_Undefined_move_tag@2@@std@@YAPAIPAI00AAV?$allocator@I@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<unsigned int *,unsigned int *,std::allocator<unsigned int>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_uninitialized_move@PAIPAIV?$allocator@I@std@@@stdext@@YAPAIPAI00AAV?$allocator@I@std@@@Z
_TEXT	SEGMENT
$T76343 = -2						; size = 1
$T76342 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAIPAIV?$allocator@I@std@@@stdext@@YAPAIPAI00AAV?$allocator@I@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<unsigned int *,unsigned int *,std::allocator<unsigned int> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T76342[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAI@std@@YA?AU_Undefined_move_tag@0@ABQAI@Z ; std::_Move_cat<unsigned int *>
	add	esp, 4
	mov	BYTE PTR $T76343[ebp], al
	movzx	edx, BYTE PTR $T76342[ebp]
	push	edx
	movzx	eax, BYTE PTR $T76343[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAI@std@@YAPAIAAPAI@Z	; std::_Checked_base<unsigned int *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAI@std@@YAPAIAAPAI@Z	; std::_Checked_base<unsigned int *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAIPAIV?$allocator@I@std@@U_Undefined_move_tag@2@@std@@YAPAIPAI00AAV?$allocator@I@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<unsigned int *,unsigned int *,std::allocator<unsigned int>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAIPAIV?$allocator@I@std@@@stdext@@YAPAIPAI00AAV?$allocator@I@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<unsigned int *,unsigned int *,std::allocator<unsigned int> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill@PAII@std@@YAXPAI0ABI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAII@std@@YAXPAI0ABI@Z PROC			; std::_Fill<unsigned int *,unsigned int>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill
$LN2@Fill:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 4
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill

; 3159 : 		*_First = _Val;

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@Fill
$LN4@Fill:

; 3160 : 	}

	pop	ebp
	ret	0
??$_Fill@PAII@std@@YAXPAI0ABI@Z ENDP			; std::_Fill<unsigned int *,unsigned int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAI@std@@YA?AU_Undefined_move_tag@0@ABQAI@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAI@std@@YA?AU_Undefined_move_tag@0@ABQAI@Z PROC ; std::_Move_cat<unsigned int *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_cat@PAI@std@@YA?AU_Undefined_move_tag@0@ABQAI@Z ENDP ; std::_Move_cat<unsigned int *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAIPAIUrandom_access_iterator_tag@std@@@std@@YAPAIPAI00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<unsigned int *,unsigned int *,std::random_access_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward_opt@PAIPAIUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAIPAI00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T76351 = -2						; size = 1
$T76350 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAIPAIUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAIPAI00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<unsigned int *,unsigned int *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	push	ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T76350[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAIPAI@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAI0@Z ; std::_Ptr_cat<unsigned int *,unsigned int *>
	add	esp, 8
	mov	BYTE PTR $T76351[ebp], al
	movzx	eax, BYTE PTR $T76350[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76351[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAIPAIUrandom_access_iterator_tag@std@@@std@@YAPAIPAI00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<unsigned int *,unsigned int *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 2755 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAIPAIUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAIPAI00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<unsigned int *,unsigned int *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T76355 = -2						; size = 1
$T76354 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T76354[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUAnimRange@MorphAnimData@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUAnimRange@MorphAnimData@Ogre@@@Z ; std::_Move_cat<Ogre::MorphAnimData::AnimRange *>
	add	esp, 4
	mov	BYTE PTR $T76355[ebp], al
	movzx	edx, BYTE PTR $T76354[ebp]
	push	edx
	movzx	eax, BYTE PTR $T76355[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill@PAUAnimRange@MorphAnimData@Ogre@@U123@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUAnimRange@MorphAnimData@Ogre@@U123@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0ABU123@@Z PROC ; std::_Fill<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill@2
$LN2@Fill@2:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill@2:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill@2

; 3159 : 		*_First = _Val;

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN2@Fill@2
$LN4@Fill@2:

; 3160 : 	}

	pop	ebp
	ret	0
??$_Fill@PAUAnimRange@MorphAnimData@Ogre@@U123@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@0ABU123@@Z ENDP ; std::_Fill<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAUAnimRange@MorphAnimData@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUAnimRange@MorphAnimData@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUAnimRange@MorphAnimData@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUAnimRange@MorphAnimData@Ogre@@@Z PROC ; std::_Move_cat<Ogre::MorphAnimData::AnimRange *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_cat@PAUAnimRange@MorphAnimData@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUAnimRange@MorphAnimData@Ogre@@@Z ENDP ; std::_Move_cat<Ogre::MorphAnimData::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T76363 = -2						; size = 1
$T76362 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	push	ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T76362[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@MorphAnimData@Ogre@@0@Z ; std::_Ptr_cat<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
	add	esp, 8
	mov	BYTE PTR $T76363[ebp], al
	movzx	eax, BYTE PTR $T76362[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T76363[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
	add	esp, 24					; 00000018H

; 2755 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$unchecked_fill_n@PAIII@stdext@@YAXPAIIABI@Z	; stdext::unchecked_fill_n<unsigned int *,unsigned int,unsigned int>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_fill_n@PAIIIV?$allocator@I@std@@@std@@YAXPAIIABIAAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAIIIV?$allocator@I@std@@@std@@YAXPAIIABIAAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<unsigned int *,unsigned int,unsigned int,std::allocator<unsigned int> >, COMDAT

; 418  : 	{	// copy _Count *_Val to raw _First, using _Al, scalar type

	push	ebp
	mov	ebp, esp

; 419  : 		_STDEXT unchecked_fill_n(_First, _Count, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_fill_n@PAIII@stdext@@YAXPAIIABI@Z ; stdext::unchecked_fill_n<unsigned int *,unsigned int,unsigned int>
	add	esp, 12					; 0000000cH

; 420  : 	}

	pop	ebp
	ret	0
??$_Uninit_fill_n@PAIIIV?$allocator@I@std@@@std@@YAXPAIIABIAAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<unsigned int *,unsigned int,unsigned int,std::allocator<unsigned int> >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<Ogre::MorphAnimData::AnimRange *,unsigned int,Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil
$LN5@Uninit_fil:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@ABU345@@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::construct
	jmp	SHORT $LN5@Uninit_fil
$LN4@Uninit_fil:
	jmp	SHORT $LN10@Uninit_fil
__catch$??$_Uninit_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil
$LN2@Uninit_fil:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_fil:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil

; 407  : 		_Al.destroy(_Next);

	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@@Z ; std::allocator<Ogre::MorphAnimData::AnimRange>::destroy
	jmp	SHORT $LN2@Uninit_fil
$LN1@Uninit_fil:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil
	ret	0
$LN10@Uninit_fil:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUAnimRange@MorphAnimData@Ogre@@IU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@IABU123@AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<Ogre::MorphAnimData::AnimRange *,unsigned int,Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UTriggerDesc@Ogre@@@std@@YAXPAUTriggerDesc@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UTriggerDesc@Ogre@@@std@@YAXPAUTriggerDesc@Ogre@@@Z PROC ; std::_Destroy<Ogre::TriggerDesc>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@UTriggerDesc@Ogre@@@std@@YAXPAUTriggerDesc@Ogre@@@Z ENDP ; std::_Destroy<Ogre::TriggerDesc>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@USequenceDesc@Ogre@@@std@@YAXPAUSequenceDesc@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@USequenceDesc@Ogre@@@std@@YAXPAUSequenceDesc@Ogre@@@Z PROC ; std::_Destroy<Ogre::SequenceDesc>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@USequenceDesc@Ogre@@@std@@YAXPAUSequenceDesc@Ogre@@@Z ENDP ; std::_Destroy<Ogre::SequenceDesc>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@UAnimRange@MorphAnimData@Ogre@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UAnimRange@MorphAnimData@Ogre@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@@Z PROC ; std::_Destroy<Ogre::MorphAnimData::AnimRange>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@UAnimRange@MorphAnimData@Ogre@@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@@Z ENDP ; std::_Destroy<Ogre::MorphAnimData::AnimRange>
_TEXT	ENDS
PUBLIC	??$_Construct@UTriggerDesc@Ogre@@U12@@std@@YAXPAUTriggerDesc@Ogre@@ABU12@@Z ; std::_Construct<Ogre::TriggerDesc,Ogre::TriggerDesc>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@ABU34@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@ABU34@@Z PROC ; std::allocator<Ogre::TriggerDesc>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@UTriggerDesc@Ogre@@U12@@std@@YAXPAUTriggerDesc@Ogre@@ABU12@@Z ; std::_Construct<Ogre::TriggerDesc,Ogre::TriggerDesc>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@UTriggerDesc@Ogre@@@std@@QAEXPAUTriggerDesc@Ogre@@ABU34@@Z ENDP ; std::allocator<Ogre::TriggerDesc>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@USequenceDesc@Ogre@@U12@@std@@YAXPAUSequenceDesc@Ogre@@ABU12@@Z ; std::_Construct<Ogre::SequenceDesc,Ogre::SequenceDesc>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@ABU34@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@ABU34@@Z PROC ; std::allocator<Ogre::SequenceDesc>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@USequenceDesc@Ogre@@U12@@std@@YAXPAUSequenceDesc@Ogre@@ABU12@@Z ; std::_Construct<Ogre::SequenceDesc,Ogre::SequenceDesc>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@USequenceDesc@Ogre@@@std@@QAEXPAUSequenceDesc@Ogre@@ABU34@@Z ENDP ; std::allocator<Ogre::SequenceDesc>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UAnimRange@MorphAnimData@Ogre@@U123@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@ABU123@@Z ; std::_Construct<Ogre::MorphAnimData::AnimRange,Ogre::MorphAnimData::AnimRange>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@ABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@ABU345@@Z PROC ; std::allocator<Ogre::MorphAnimData::AnimRange>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@UAnimRange@MorphAnimData@Ogre@@U123@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@ABU123@@Z ; std::_Construct<Ogre::MorphAnimData::AnimRange,Ogre::MorphAnimData::AnimRange>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@QAEXPAUAnimRange@MorphAnimData@Ogre@@ABU345@@Z ENDP ; std::allocator<Ogre::MorphAnimData::AnimRange>::construct
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEPBUTriggerDesc@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Checked_iterator_base
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEPBUTriggerDesc@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUTriggerDesc@Ogre@@AAV?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEPBUSequenceDesc@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEPBUSequenceDesc@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUSequenceDesc@Ogre@@AAV?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEPBQAVBoneTrack@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEPBQAVBoneTrack@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVBoneTrack@Ogre@@AAV?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEPBQAVMaterialParamTrack@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEPBQAVMaterialParamTrack@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBQAVMaterialParamTrack@Ogre@@AAV?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QBEPBIXZ ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBIAAV?$_Vector_const_iterator@IV?$allocator@I@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBIAAV?$_Vector_const_iterator@IV?$allocator@I@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QBEPBIXZ ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBIAAV?$_Vector_const_iterator@IV?$allocator@I@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEPBUAnimRange@MorphAnimData@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUAnimRange@MorphAnimData@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUAnimRange@MorphAnimData@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEPBUAnimRange@MorphAnimData@Ogre@@XZ ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Checked_iterator_base

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUAnimRange@MorphAnimData@Ogre@@AAV?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_move@PAIPAIV?$allocator@I@std@@U_Undefined_move_tag@2@@std@@YAPAIPAI00AAV?$allocator@I@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAIPAIV?$allocator@I@std@@U_Undefined_move_tag@2@@std@@YAPAIPAI00AAV?$allocator@I@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<unsigned int *,unsigned int *,std::allocator<unsigned int>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAIPAIV?$allocator@I@std@@@stdext@@YAPAIPAI00AAV?$allocator@I@std@@@Z ; stdext::unchecked_uninitialized_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	ebp
	ret	0
??$_Uninit_move@PAIPAIV?$allocator@I@std@@U_Undefined_move_tag@2@@std@@YAPAIPAI00AAV?$allocator@I@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<unsigned int *,unsigned int *,std::allocator<unsigned int>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAIPAIUrandom_access_iterator_tag@std@@@std@@YAPAIPAI00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAIPAIUrandom_access_iterator_tag@std@@@std@@YAPAIPAI00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<unsigned int *,unsigned int *,std::random_access_iterator_tag>, COMDAT

; 2698 : 	{	// copy [_First, _Last) backwards to [..., _Dest), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2699 : 
; 2700 :  #if _HAS_ITERATOR_DEBUGGING
; 2701 : 	_DEBUG_RANGE(_First, _Last);
; 2702 : 	if (_First != _Last)
; 2703 : 		_DEBUG_POINTER(_Dest);
; 2704 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2705 : 
; 2706 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2707 : 	/* if _OutIt is range checked, this will make sure there is enough space for 
; 2708 : 	 * the memmove
; 2709 : 	 */
; 2710 : 	_OutIt _Result = _Dest - _Off;

	mov	ecx, DWORD PTR __Off$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, ecx
	mov	DWORD PTR __Result$[ebp], edx

; 2711 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_backw

; 2712 : 		_CRT_SECURE_MEMMOVE(&*_Result, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Off$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR __Result$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Copy_backw:

; 2713 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2714 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAIPAIUrandom_access_iterator_tag@std@@@std@@YAPAIPAI00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<unsigned int *,unsigned int *,std::random_access_iterator_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_move@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@stdext@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	ebp
	ret	0
??$_Uninit_move@PAUAnimRange@MorphAnimData@Ogre@@PAU123@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00AAV?$allocator@UAnimRange@MorphAnimData@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::allocator<Ogre::MorphAnimData::AnimRange>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::forward_iterator_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T76415 = -7						; size = 1
$T76414 = -6						; size = 1
$T76413 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	shl	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$[ebp], ecx

; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T76413[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T76414[ebp], al
	movzx	ecx, BYTE PTR $T76413[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T76414[ebp]
	push	edx
	movzx	eax, BYTE PTR $T76415[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@MorphAnimData@Ogre@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::MorphAnimData::AnimRange *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_backward_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2690 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2691 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAIII@std@@YAXPAIIABIUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<unsigned int *,unsigned int,unsigned int>
PUBLIC	??$_Iter_cat@PAI@std@@YA?AUrandom_access_iterator_tag@0@ABQAI@Z ; std::_Iter_cat<unsigned int *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_fill_n@PAIII@stdext@@YAXPAIIABI@Z
_TEXT	SEGMENT
$T76419 = -2						; size = 1
$T76418 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAIII@stdext@@YAXPAIIABI@Z PROC	; stdext::unchecked_fill_n<unsigned int *,unsigned int,unsigned int>, COMDAT

; 3720 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T76418[ebp], al
	movzx	ecx, BYTE PTR $T76418[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T76419[ebp]
	push	eax
	call	??$_Iter_cat@PAI@std@@YA?AUrandom_access_iterator_tag@0@ABQAI@Z ; std::_Iter_cat<unsigned int *>
	add	esp, 8
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Fill_n@PAIII@std@@YAXPAIIABIUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<unsigned int *,unsigned int,unsigned int>
	add	esp, 20					; 00000014H

; 3722 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAIII@stdext@@YAXPAIIABI@Z ENDP	; stdext::unchecked_fill_n<unsigned int *,unsigned int,unsigned int>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Construct@UTriggerDesc@Ogre@@U12@@std@@YAXPAUTriggerDesc@Ogre@@ABU12@@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
$T76422 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UTriggerDesc@Ogre@@U12@@std@@YAXPAUTriggerDesc@Ogre@@ABU12@@Z PROC ; std::_Construct<Ogre::TriggerDesc,Ogre::TriggerDesc>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T76422[ebp], eax
	cmp	DWORD PTR $T76422[ebp], 0
	je	SHORT $LN3@Construct
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T76422[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T76422[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN1@Construct
$LN3@Construct:
	mov	DWORD PTR tv69[ebp], 0
$LN1@Construct:

; 53   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@UTriggerDesc@Ogre@@U12@@std@@YAXPAUTriggerDesc@Ogre@@ABU12@@Z ENDP ; std::_Construct<Ogre::TriggerDesc,Ogre::TriggerDesc>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Construct@USequenceDesc@Ogre@@U12@@std@@YAXPAUSequenceDesc@Ogre@@ABU12@@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
$T76427 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@USequenceDesc@Ogre@@U12@@std@@YAXPAUSequenceDesc@Ogre@@ABU12@@Z PROC ; std::_Construct<Ogre::SequenceDesc,Ogre::SequenceDesc>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	16					; 00000010H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T76427[ebp], eax
	cmp	DWORD PTR $T76427[ebp], 0
	je	SHORT $LN3@Construct@2
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR $T76427[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T76427[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN1@Construct@2
$LN3@Construct@2:
	mov	DWORD PTR tv69[ebp], 0
$LN1@Construct@2:

; 53   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@USequenceDesc@Ogre@@U12@@std@@YAXPAUSequenceDesc@Ogre@@ABU12@@Z ENDP ; std::_Construct<Ogre::SequenceDesc,Ogre::SequenceDesc>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Construct@UAnimRange@MorphAnimData@Ogre@@U123@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@ABU123@@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
$T76432 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UAnimRange@MorphAnimData@Ogre@@U123@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@ABU123@@Z PROC ; std::_Construct<Ogre::MorphAnimData::AnimRange,Ogre::MorphAnimData::AnimRange>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T76432[ebp], eax
	cmp	DWORD PTR $T76432[ebp], 0
	je	SHORT $LN3@Construct@3
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T76432[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T76432[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN1@Construct@3
$LN3@Construct@3:
	mov	DWORD PTR tv69[ebp], 0
$LN1@Construct@3:

; 53   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@UAnimRange@MorphAnimData@Ogre@@U123@@std@@YAXPAUAnimRange@MorphAnimData@Ogre@@ABU123@@Z ENDP ; std::_Construct<Ogre::MorphAnimData::AnimRange,Ogre::MorphAnimData::AnimRange>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEPBUTriggerDesc@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEPBUTriggerDesc@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@UTriggerDesc@Ogre@@V?$allocator@UTriggerDesc@Ogre@@@std@@@std@@QBEPBUTriggerDesc@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::TriggerDesc,std::allocator<Ogre::TriggerDesc> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEPBUSequenceDesc@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEPBUSequenceDesc@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@USequenceDesc@Ogre@@V?$allocator@USequenceDesc@Ogre@@@std@@@std@@QBEPBUSequenceDesc@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::SequenceDesc,std::allocator<Ogre::SequenceDesc> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEPBQAVBoneTrack@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEPBQAVBoneTrack@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@PAVBoneTrack@Ogre@@V?$allocator@PAVBoneTrack@Ogre@@@std@@@std@@QBEPBQAVBoneTrack@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::BoneTrack *,std::allocator<Ogre::BoneTrack *> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEPBQAVMaterialParamTrack@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEPBQAVMaterialParamTrack@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@PAVMaterialParamTrack@Ogre@@V?$allocator@PAVMaterialParamTrack@Ogre@@@std@@@std@@QBEPBQAVMaterialParamTrack@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::MaterialParamTrack *,std::allocator<Ogre::MaterialParamTrack *> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QBEPBIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QBEPBIXZ PROC ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@IV?$allocator@I@std@@@std@@QBEPBIXZ ENDP ; std::_Vector_const_iterator<unsigned int,std::allocator<unsigned int> >::_Checked_iterator_base
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEPBUAnimRange@MorphAnimData@Ogre@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Checked_iterator_base@?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEPBUAnimRange@MorphAnimData@Ogre@@XZ PROC ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 46   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@UAnimRange@MorphAnimData@Ogre@@V?$allocator@UAnimRange@MorphAnimData@Ogre@@@std@@@std@@QBEPBUAnimRange@MorphAnimData@Ogre@@XZ ENDP ; std::_Vector_const_iterator<Ogre::MorphAnimData::AnimRange,std::allocator<Ogre::MorphAnimData::AnimRange> >::_Checked_iterator_base
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
$LN2@Copy_backw@2:

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_backw@2

; 2676 : 		*--_Dest = *--_Last;

	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Last$[ebp], ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Dest$[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Copy_backw@2
$LN1@Copy_backw@2:

; 2677 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2678 : 	}

	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUAnimRange@MorphAnimData@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@MorphAnimData@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::MorphAnimData::AnimRange *,Ogre::MorphAnimData::AnimRange *,std::forward_iterator_tag>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAI@std@@YA?AUrandom_access_iterator_tag@0@ABQAI@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAI@std@@YA?AUrandom_access_iterator_tag@0@ABQAI@Z PROC ; std::_Iter_cat<unsigned int *>, COMDAT

; 952  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 955  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAI@std@@YA?AUrandom_access_iterator_tag@0@ABQAI@Z ENDP ; std::_Iter_cat<unsigned int *>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAIII@std@@YAXPAIIABIU_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<unsigned int *,unsigned int,unsigned int>
; Function compile flags: /Odtp
;	COMDAT ??$_Fill_n@PAIII@std@@YAXPAIIABIUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T76453 = -5						; size = 1
__Last$ = -4						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Fill_n@PAIII@std@@YAXPAIIABIUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<unsigned int *,unsigned int,unsigned int>, COMDAT

; 3250 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3251 : 		// if _OutIt is checked, this will ensure we have enough space
; 3252 : 		_OutIt _Last = _First + _Count; (_Last);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Last$[ebp], edx

; 3253 : 		_Fill_n(_CHECKED_BASE(_First), _Count, _Val,
; 3254 : 			_Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T76453[ebp], al
	movzx	ecx, BYTE PTR $T76453[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAI@std@@YAPAIAAPAI@Z	; std::_Checked_base<unsigned int *>
	add	esp, 4
	push	eax
	call	??$_Fill_n@PAIII@std@@YAXPAIIABIU_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<unsigned int *,unsigned int,unsigned int>
	add	esp, 16					; 00000010H

; 3255 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill_n@PAIII@std@@YAXPAIIABIUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<unsigned int *,unsigned int,unsigned int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Fill_n@PAIII@std@@YAXPAIIABIU_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_n@PAIII@std@@YAXPAIIABIU_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<unsigned int *,unsigned int,unsigned int>, COMDAT

; 3196 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp

; 3197 : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN3@Fill_n
$LN2@Fill_n:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Fill_n:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Fill_n

; 3198 : 		*_First = _Val;

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@Fill_n
$LN4@Fill_n:

; 3199 : 	}

	pop	ebp
	ret	0
??$_Fill_n@PAIII@std@@YAXPAIIABIU_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<unsigned int *,unsigned int,unsigned int>
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
_TEXT	ENDS
;	COMDAT ??__ETWO_PI@Ogre@@YAXXZ
text$yc	SEGMENT
??__ETWO_PI@Ogre@@YAXXZ PROC				; Ogre::`dynamic initializer for 'TWO_PI'', COMDAT

; 10   : 	const float TWO_PI = ONE_PI*2;

	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _ONE_PI
	fadd	ST(0), ST(0)
	fstp	DWORD PTR _TWO_PI
	pop	ebp
	ret	0
??__ETWO_PI@Ogre@@YAXXZ ENDP				; Ogre::`dynamic initializer for 'TWO_PI''
text$yc	ENDS
PUBLIC	__real@3fe0000000000000
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??__EHALF_PI@Ogre@@YAXXZ
text$yc	SEGMENT
??__EHALF_PI@Ogre@@YAXXZ PROC				; Ogre::`dynamic initializer for 'HALF_PI'', COMDAT

; 11   : 	const float	HALF_PI = ONE_PI*0.5f;

	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _ONE_PI
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR _HALF_PI
	pop	ebp
	ret	0
??__EHALF_PI@Ogre@@YAXXZ ENDP				; Ogre::`dynamic initializer for 'HALF_PI''
text$yc	ENDS
EXTRN	??0RuntimeClass@Ogre@@QAE@PBDPBV01@HP6APAVBaseObject@1@XZ@Z:PROC ; Ogre::RuntimeClass::RuntimeClass
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremorphanimdata.cpp
;	COMDAT ??__E?m_RTTI@MorphAnimData@Ogre@@2VRuntimeClass@2@B@@YAXXZ
text$yc	SEGMENT
??__E?m_RTTI@MorphAnimData@Ogre@@2VRuntimeClass@2@B@@YAXXZ PROC ; `dynamic initializer for 'Ogre::MorphAnimData::m_RTTI'', COMDAT

; 6    : 	IMPLEMENT_RTTI(MorphAnimData, AnimationData, 100)

	push	ebp
	mov	ebp, esp
	push	OFFSET ?newObject@MorphAnimData@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::MorphAnimData::newObject
	push	100					; 00000064H
	push	OFFSET ?m_RTTI@AnimationData@Ogre@@2VRuntimeClass@2@B ; Ogre::AnimationData::m_RTTI
	push	OFFSET $SG62277
	mov	ecx, OFFSET ?m_RTTI@MorphAnimData@Ogre@@2VRuntimeClass@2@B ; Ogre::MorphAnimData::m_RTTI
	call	??0RuntimeClass@Ogre@@QAE@PBDPBV01@HP6APAVBaseObject@1@XZ@Z ; Ogre::RuntimeClass::RuntimeClass
	pop	ebp
	ret	0
??__E?m_RTTI@MorphAnimData@Ogre@@2VRuntimeClass@2@B@@YAXXZ ENDP ; `dynamic initializer for 'Ogre::MorphAnimData::m_RTTI''
text$yc	ENDS
PUBLIC	?m_RTTI@MorphAnimData@Ogre@@2VRuntimeClass@2@B	; Ogre::MorphAnimData::m_RTTI
_BSS	SEGMENT
_TWO_PI	DD	01H DUP (?)
_HALF_PI DD	01H DUP (?)
?m_RTTI@MorphAnimData@Ogre@@2VRuntimeClass@2@B DB 014H DUP (?) ; Ogre::MorphAnimData::m_RTTI
_BSS	ENDS
CRT$XCU	SEGMENT
_TWO_PI$initializer$ DD FLAT:??__ETWO_PI@Ogre@@YAXXZ
_HALF_PI$initializer$ DD FLAT:??__EHALF_PI@Ogre@@YAXXZ
?m_RTTI$initializer$@MorphAnimData@Ogre@@2P6AXXZA DD FLAT:??__E?m_RTTI@MorphAnimData@Ogre@@2VRuntimeClass@2@B@@YAXXZ ; Ogre::MorphAnimData::m_RTTI$initializer$
CRT$XCU	ENDS
END
