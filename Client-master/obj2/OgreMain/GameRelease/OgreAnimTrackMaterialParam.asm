; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\OgreMain\OgreAnimTrackMaterialParam.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG5715
_DATA	ENDS
CONST	SEGMENT
$SG5715	DB	'bad allocation', 00H
	ORG $+1
_MAX_FLOAT DD	07f7fffffr			; 3.40282e+038
_ONE_PI	DD	040490fd0r			; 3.14159
_EPSILON DD	03727c5acr			; 1e-005
_RADS_PER_DEG DD 03c8efa35r			; 0.0174533
_DEGS_PER_RAD DD 042652ee1r			; 57.2958
$SG58597 DB	'MaterialParamTrack', 00H
CONST	ENDS
PUBLIC	??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MemoryDelegation::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MemoryDelegation::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MemoryDelegation@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MemoryDelegation::operator=
_TEXT	ENDS
PUBLIC	?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ	; Ogre::RuntimeClass::getBaseClass
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrebaseobject.h
;	COMDAT ?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ PROC	; Ogre::RuntimeClass::getBaseClass, COMDAT
; _this$ = ecx

; 20   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 21   : 			return m_pBaseClass;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 22   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getBaseClass@RuntimeClass@Ogre@@QBEPBV12@XZ ENDP	; Ogre::RuntimeClass::getBaseClass
_TEXT	ENDS
PUBLIC	?getClassName@RuntimeClass@Ogre@@QBEPBDXZ	; Ogre::RuntimeClass::getClassName
; Function compile flags: /Odtp
;	COMDAT ?getClassName@RuntimeClass@Ogre@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getClassName@RuntimeClass@Ogre@@QBEPBDXZ PROC		; Ogre::RuntimeClass::getClassName, COMDAT
; _this$ = ecx

; 25   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 26   : 			return m_pClassName; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 27   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getClassName@RuntimeClass@Ogre@@QBEPBDXZ ENDP		; Ogre::RuntimeClass::getClassName
_TEXT	ENDS
PUBLIC	?getVersion@RuntimeClass@Ogre@@QBEHXZ		; Ogre::RuntimeClass::getVersion
; Function compile flags: /Odtp
;	COMDAT ?getVersion@RuntimeClass@Ogre@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVersion@RuntimeClass@Ogre@@QBEHXZ PROC		; Ogre::RuntimeClass::getVersion, COMDAT
; _this$ = ecx

; 30   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 			return m_Version;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 32   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getVersion@RuntimeClass@Ogre@@QBEHXZ ENDP		; Ogre::RuntimeClass::getVersion
_TEXT	ENDS
PUBLIC	?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ ; Ogre::RuntimeClass::newObject
; Function compile flags: /Odtp
;	COMDAT ?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ PROC ; Ogre::RuntimeClass::newObject, COMDAT
; _this$ = ecx

; 35   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 			return (*m_pNewFunc)();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx

; 37   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?newObject@RuntimeClass@Ogre@@QAEPAVBaseObject@2@XZ ENDP ; Ogre::RuntimeClass::newObject
_TEXT	ENDS
PUBLIC	??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::RuntimeClass::operator=
; Function compile flags: /Odtp
;	COMDAT ??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::RuntimeClass::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4RuntimeClass@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::RuntimeClass::operator=
_TEXT	ENDS
PUBLIC	?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::BaseObject::getRTTI
EXTRN	?m_RTTI@BaseObject@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::BaseObject::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::BaseObject::getRTTI, COMDAT
; _this$ = ecx

; 56   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 			return &m_RTTI;

	mov	eax, OFFSET ?m_RTTI@BaseObject@Ogre@@2VRuntimeClass@2@B ; Ogre::BaseObject::m_RTTI

; 58   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::BaseObject::getRTTI
_TEXT	ENDS
PUBLIC	?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z ; Ogre::BaseObject::isExactKindOf
; Function compile flags: /Odtp
;	COMDAT ?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_prtti$ = 8						; size = 4
?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z PROC ; Ogre::BaseObject::isExactKindOf, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			return (getRTTI() == prtti);

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	xor	ecx, ecx
	cmp	eax, DWORD PTR _prtti$[ebp]
	sete	cl
	mov	al, cl

; 63   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?isExactKindOf@BaseObject@Ogre@@QBE_NPBVRuntimeClass@2@@Z ENDP ; Ogre::BaseObject::isExactKindOf
_TEXT	ENDS
PUBLIC	?release@BaseObject@Ogre@@UAEXXZ		; Ogre::BaseObject::release
; Function compile flags: /Odtp
;	COMDAT ?release@BaseObject@Ogre@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?release@BaseObject@Ogre@@UAEXXZ PROC			; Ogre::BaseObject::release, COMDAT
; _this$ = ecx

; 68   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 			m_RefCount--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 70   : 			if(m_RefCount <= 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jg	SHORT $LN2@release

; 71   : 			{
; 72   : 				deleteThis();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
$LN2@release:

; 73   : 			}
; 74   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?release@BaseObject@Ogre@@UAEXXZ ENDP			; Ogre::BaseObject::release
_TEXT	ENDS
PUBLIC	?addRef@BaseObject@Ogre@@UAEXXZ			; Ogre::BaseObject::addRef
; Function compile flags: /Odtp
;	COMDAT ?addRef@BaseObject@Ogre@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?addRef@BaseObject@Ogre@@UAEXXZ PROC			; Ogre::BaseObject::addRef, COMDAT
; _this$ = ecx

; 77   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 			m_RefCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 79   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?addRef@BaseObject@Ogre@@UAEXXZ ENDP			; Ogre::BaseObject::addRef
_TEXT	ENDS
PUBLIC	?getRefCount@BaseObject@Ogre@@UAEHXZ		; Ogre::BaseObject::getRefCount
; Function compile flags: /Odtp
;	COMDAT ?getRefCount@BaseObject@Ogre@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRefCount@BaseObject@Ogre@@UAEHXZ PROC		; Ogre::BaseObject::getRefCount, COMDAT
; _this$ = ecx

; 82   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 			return m_RefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 84   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getRefCount@BaseObject@Ogre@@UAEHXZ ENDP		; Ogre::BaseObject::getRefCount
_TEXT	ENDS
PUBLIC	?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::BaseObject::_serialize
; Function compile flags: /Odtp
;	COMDAT ?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z PROC	; Ogre::BaseObject::_serialize, COMDAT
; _this$ = ecx

; 87   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 88   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z ENDP	; Ogre::BaseObject::_serialize
_TEXT	ENDS
PUBLIC	??_7BaseObject@Ogre@@6B@			; Ogre::BaseObject::`vftable'
PUBLIC	??0BaseObject@Ogre@@IAE@XZ			; Ogre::BaseObject::BaseObject
PUBLIC	??_R4BaseObject@Ogre@@6B@			; Ogre::BaseObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBaseObject@Ogre@@@8			; Ogre::BaseObject `RTTI Type Descriptor'
PUBLIC	??_R3BaseObject@Ogre@@8				; Ogre::BaseObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BaseObject@Ogre@@8				; Ogre::BaseObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BaseObject@Ogre@@8		; Ogre::BaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@MemoryDelegation@Ogre@@8		; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVMemoryDelegation@Ogre@@@8		; Ogre::MemoryDelegation `RTTI Type Descriptor'
PUBLIC	??_R3MemoryDelegation@Ogre@@8			; Ogre::MemoryDelegation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryDelegation@Ogre@@8			; Ogre::MemoryDelegation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryDelegation@Ogre@@8		; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EBaseObject@Ogre@@MAEPAXI@Z			; Ogre::BaseObject::`vector deleting destructor'
PUBLIC	?deleteThis@BaseObject@Ogre@@MAEXXZ		; Ogre::BaseObject::deleteThis
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryDelegation@Ogre@@8 DD FLAT:??_R0?AVMemoryDelegation@Ogre@@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R2MemoryDelegation@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MemoryDelegation@Ogre@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R3MemoryDelegation@Ogre@@8 DD 00H			; Ogre::MemoryDelegation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryDelegation@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMemoryDelegation@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MemoryDelegation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryDelegation@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	SEGMENT
??_R13?0A@EA@MemoryDelegation@Ogre@@8 DD FLAT:??_R0?AVMemoryDelegation@Ogre@@@8 ; Ogre::MemoryDelegation::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BaseObject@Ogre@@8 DD FLAT:??_R0?AVBaseObject@Ogre@@@8 ; Ogre::BaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R2BaseObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8 ; Ogre::BaseObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3BaseObject@Ogre@@8
rdata$r	SEGMENT
??_R3BaseObject@Ogre@@8 DD 00H				; Ogre::BaseObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBaseObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVBaseObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::BaseObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBaseObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BaseObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4BaseObject@Ogre@@6B@ DD 00H			; Ogre::BaseObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBaseObject@Ogre@@@8
	DD	FLAT:??_R3BaseObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7BaseObject@Ogre@@6B@
CONST	SEGMENT
??_7BaseObject@Ogre@@6B@ DD FLAT:??_R4BaseObject@Ogre@@6B@ ; Ogre::BaseObject::`vftable'
	DD	FLAT:?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EBaseObject@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0BaseObject@Ogre@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BaseObject@Ogre@@IAE@XZ PROC				; Ogre::BaseObject::BaseObject, COMDAT
; _this$ = ecx

; 92   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseObject@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 1

; 93   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0BaseObject@Ogre@@IAE@XZ ENDP				; Ogre::BaseObject::BaseObject
_TEXT	ENDS
PUBLIC	??1BaseObject@Ogre@@MAE@XZ			; Ogre::BaseObject::~BaseObject
; Function compile flags: /Odtp
;	COMDAT ??1BaseObject@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BaseObject@Ogre@@MAE@XZ PROC				; Ogre::BaseObject::~BaseObject, COMDAT
; _this$ = ecx

; 96   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseObject@Ogre@@6B@

; 97   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1BaseObject@Ogre@@MAE@XZ ENDP				; Ogre::BaseObject::~BaseObject
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deleteThis@BaseObject@Ogre@@MAEXXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
$T69976 = -8						; size = 4
$T69975 = -4						; size = 4
?deleteThis@BaseObject@Ogre@@MAEXXZ PROC		; Ogre::BaseObject::deleteThis, COMDAT
; _this$ = ecx

; 100  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 			delete this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T69976[ebp], eax
	mov	ecx, DWORD PTR $T69976[ebp]
	mov	DWORD PTR $T69975[ebp], ecx
	cmp	DWORD PTR $T69975[ebp], 0
	je	SHORT $LN3@deleteThis
	push	1
	mov	edx, DWORD PTR $T69975[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T69975[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN1@deleteThis
$LN3@deleteThis:
	mov	DWORD PTR tv70[ebp], 0
$LN1@deleteThis:

; 102  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?deleteThis@BaseObject@Ogre@@MAEXXZ ENDP		; Ogre::BaseObject::deleteThis
_TEXT	ENDS
PUBLIC	??0BaseObject@Ogre@@QAE@ABV01@@Z		; Ogre::BaseObject::BaseObject
; Function compile flags: /Odtp
;	COMDAT ??0BaseObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0BaseObject@Ogre@@QAE@ABV01@@Z PROC			; Ogre::BaseObject::BaseObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR ___that$[ebp], 0
	je	SHORT $LN3@BaseObject
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@BaseObject
$LN3@BaseObject:
	mov	DWORD PTR tv68[ebp], 0
$LN4@BaseObject:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7BaseObject@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BaseObject@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::BaseObject::BaseObject
_TEXT	ENDS
PUBLIC	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::BaseObject::operator=
; Function compile flags: /Odtp
;	COMDAT ??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::BaseObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::BaseObject::operator=
_TEXT	ENDS
PUBLIC	??_GBaseObject@Ogre@@MAEPAXI@Z			; Ogre::BaseObject::`scalar deleting destructor'
EXTRN	??3MemoryDelegation@Ogre@@SAXPAXI@Z:PROC	; Ogre::MemoryDelegation::operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GBaseObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBaseObject@Ogre@@MAEPAXI@Z PROC			; Ogre::BaseObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBaseObject@Ogre@@MAEPAXI@Z ENDP			; Ogre::BaseObject::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_VMemoryDelegation@Ogre@@SAXPAXI@Z:PROC	; Ogre::MemoryDelegation::operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_EBaseObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EBaseObject@Ogre@@MAEPAXI@Z PROC			; Ogre::BaseObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1BaseObject@Ogre@@MAE@XZ	; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EBaseObject@Ogre@@MAEPAXI@Z ENDP			; Ogre::BaseObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z	; Ogre::FixedString::handle2Ptr
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrefixedstring.h
;	COMDAT ?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z
_TEXT	SEGMENT
_h$ = 8							; size = 4
?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z PROC		; Ogre::FixedString::handle2Ptr, COMDAT

; 22   : 		{

	push	ebp
	mov	ebp, esp

; 23   : 			return (const char *)h;

	mov	eax, DWORD PTR _h$[ebp]

; 24   : 		}

	pop	ebp
	ret	0
?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z ENDP		; Ogre::FixedString::handle2Ptr
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@XZ			; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FixedString@Ogre@@QAE@XZ PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 27   : 		FixedString() : m_StrHandle(NULL){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0FixedString@Ogre@@QAE@XZ ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PAX@Z			; Ogre::FixedString::FixedString
EXTRN	?addRef@FixedString@Ogre@@SAXPAX@Z:PROC		; Ogre::FixedString::addRef
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_h$ = 8							; size = 4
??0FixedString@Ogre@@QAE@PAX@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 29   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax], ecx

; 30   : 			addRef(h);

	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	call	?addRef@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::addRef
	add	esp, 4

; 31   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@PAX@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@ABV01@@Z		; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0FixedString@Ogre@@QAE@ABV01@@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 34   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 35   : 			addRef(m_StrHandle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?addRef@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::addRef
	add	esp, 4

; 36   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PBD@Z			; Ogre::FixedString::FixedString
EXTRN	?insert@FixedString@Ogre@@SAPAXPBDH@Z:PROC	; Ogre::FixedString::insert
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstr$ = 8						; size = 4
??0FixedString@Ogre@@QAE@PBD@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 38   : 		FixedString(const char *pstr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 		{
; 40   : 			m_StrHandle = insert(pstr); 

	push	-1
	mov	eax, DWORD PTR _pstr$[ebp]
	push	eax
	call	?insert@FixedString@Ogre@@SAPAXPBDH@Z	; Ogre::FixedString::insert
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 41   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0FixedString@Ogre@@QAE@PBD@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??0FixedString@Ogre@@QAE@PBDI@Z			; Ogre::FixedString::FixedString
; Function compile flags: /Odtp
;	COMDAT ??0FixedString@Ogre@@QAE@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstr$ = 8						; size = 4
_len$ = 12						; size = 4
??0FixedString@Ogre@@QAE@PBDI@Z PROC			; Ogre::FixedString::FixedString, COMDAT
; _this$ = ecx

; 43   : 		FixedString(const char *pstr, size_t len)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 		{
; 45   : 			m_StrHandle = insert(pstr, (int)len); 

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pstr$[ebp]
	push	ecx
	call	?insert@FixedString@Ogre@@SAPAXPBDH@Z	; Ogre::FixedString::insert
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 46   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0FixedString@Ogre@@QAE@PBDI@Z ENDP			; Ogre::FixedString::FixedString
_TEXT	ENDS
PUBLIC	??1FixedString@Ogre@@QAE@XZ			; Ogre::FixedString::~FixedString
EXTRN	?release@FixedString@Ogre@@SAXPAX@Z:PROC	; Ogre::FixedString::release
; Function compile flags: /Odtp
;	COMDAT ??1FixedString@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FixedString@Ogre@@QAE@XZ PROC			; Ogre::FixedString::~FixedString, COMDAT
; _this$ = ecx

; 49   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 			release(m_StrHandle); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?release@FixedString@Ogre@@SAXPAX@Z	; Ogre::FixedString::release
	add	esp, 4

; 51   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1FixedString@Ogre@@QAE@XZ ENDP			; Ogre::FixedString::~FixedString
_TEXT	ENDS
PUBLIC	??BFixedString@Ogre@@QBEPBDXZ			; Ogre::FixedString::operator char const *
; Function compile flags: /Odtp
;	COMDAT ??BFixedString@Ogre@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BFixedString@Ogre@@QBEPBDXZ PROC			; Ogre::FixedString::operator char const *, COMDAT
; _this$ = ecx

; 54   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 			return handle2Ptr(m_StrHandle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?handle2Ptr@FixedString@Ogre@@SAPBDPAX@Z ; Ogre::FixedString::handle2Ptr
	add	esp, 4

; 56   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BFixedString@Ogre@@QBEPBDXZ ENDP			; Ogre::FixedString::operator char const *
_TEXT	ENDS
PUBLIC	?getHandle@FixedString@Ogre@@QBEPAXXZ		; Ogre::FixedString::getHandle
; Function compile flags: /Odtp
;	COMDAT ?getHandle@FixedString@Ogre@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHandle@FixedString@Ogre@@QBEPAXXZ PROC		; Ogre::FixedString::getHandle, COMDAT
; _this$ = ecx

; 59   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 			return m_StrHandle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 61   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getHandle@FixedString@Ogre@@QBEPAXXZ ENDP		; Ogre::FixedString::getHandle
_TEXT	ENDS
PUBLIC	?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ	; Ogre::Resource::getRTTI
EXTRN	?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B:BYTE	; Ogre::Resource::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreresource.h
;	COMDAT ?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::Resource::getRTTI, COMDAT
; _this$ = ecx

; 39   : 		DECLARE_RTTI_VIRTUAL(Resource)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B ; Ogre::Resource::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::Resource::getRTTI
_TEXT	ENDS
PUBLIC	?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ ; Ogre::Resource::getResPath
; Function compile flags: /Odtp
;	COMDAT ?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ PROC	; Ogre::Resource::getResPath, COMDAT
; _this$ = ecx

; 44   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 			return m_ResPath;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8

; 46   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getResPath@Resource@Ogre@@QAEABVFixedString@2@XZ ENDP	; Ogre::Resource::getResPath
_TEXT	ENDS
PUBLIC	?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z ; Ogre::Resource::setResPath
EXTRN	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z:PROC	; Ogre::FixedString::operator=
; Function compile flags: /Odtp
;	COMDAT ?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_path$ = 8						; size = 4
?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z PROC	; Ogre::Resource::setResPath, COMDAT
; _this$ = ecx

; 48   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 			m_ResPath = path;

	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=

; 50   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setResPath@Resource@Ogre@@QAEXABVFixedString@2@@Z ENDP	; Ogre::Resource::setResPath
_TEXT	ENDS
PUBLIC	??_7Resource@Ogre@@6B@				; Ogre::Resource::`vftable'
PUBLIC	??0Resource@Ogre@@IAE@XZ			; Ogre::Resource::Resource
PUBLIC	??_R4Resource@Ogre@@6B@				; Ogre::Resource::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVResource@Ogre@@@8			; Ogre::Resource `RTTI Type Descriptor'
PUBLIC	??_R3Resource@Ogre@@8				; Ogre::Resource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Resource@Ogre@@8				; Ogre::Resource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Resource@Ogre@@8			; Ogre::Resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EResource@Ogre@@MAEPAXI@Z			; Ogre::Resource::`vector deleting destructor'
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	?release@Resource@Ogre@@UAEXXZ:PROC		; Ogre::Resource::release
EXTRN	?addRef@Resource@Ogre@@UAEXXZ:PROC		; Ogre::Resource::addRef
EXTRN	?getRefCount@Resource@Ogre@@UAEHXZ:PROC		; Ogre::Resource::getRefCount
;	COMDAT ??_R1A@?0A@EA@Resource@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Resource@Ogre@@8 DD FLAT:??_R0?AVResource@Ogre@@@8 ; Ogre::Resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Resource@Ogre@@8
rdata$r	SEGMENT
??_R2Resource@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Resource@Ogre@@8 ; Ogre::Resource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3Resource@Ogre@@8
rdata$r	SEGMENT
??_R3Resource@Ogre@@8 DD 00H				; Ogre::Resource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVResource@Ogre@@@8
_DATA	SEGMENT
??_R0?AVResource@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Resource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVResource@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Resource@Ogre@@6B@
rdata$r	SEGMENT
??_R4Resource@Ogre@@6B@ DD 00H				; Ogre::Resource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVResource@Ogre@@@8
	DD	FLAT:??_R3Resource@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Resource@Ogre@@6B@
CONST	SEGMENT
??_7Resource@Ogre@@6B@ DD FLAT:??_R4Resource@Ogre@@6B@	; Ogre::Resource::`vftable'
	DD	FLAT:?getRTTI@Resource@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EResource@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Resource@Ogre@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@IAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@IAE@XZ$1
__ehfuncinfo$??0Resource@Ogre@@IAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Resource@Ogre@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Resource@Ogre@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Resource@Ogre@@IAE@XZ PROC				; Ogre::Resource::Resource, COMDAT
; _this$ = ecx

; 72   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Resource@Ogre@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@IAE@XZ		; Ogre::BaseObject::BaseObject
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Resource@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 1

; 73   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Resource@Ogre@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0Resource@Ogre@@IAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0Resource@Ogre@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Resource@Ogre@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Resource@Ogre@@IAE@XZ ENDP				; Ogre::Resource::Resource
PUBLIC	??1Resource@Ogre@@MAE@XZ			; Ogre::Resource::~Resource
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Resource@Ogre@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Resource@Ogre@@MAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1Resource@Ogre@@MAE@XZ$1
__ehfuncinfo$??1Resource@Ogre@@MAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1Resource@Ogre@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1Resource@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Resource@Ogre@@MAE@XZ PROC				; Ogre::Resource::~Resource, COMDAT
; _this$ = ecx

; 76   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Resource@Ogre@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Resource@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 77   : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Resource@Ogre@@MAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??1Resource@Ogre@@MAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??1Resource@Ogre@@MAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Resource@Ogre@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Resource@Ogre@@MAE@XZ ENDP				; Ogre::Resource::~Resource
PUBLIC	??0Resource@Ogre@@QAE@ABV01@@Z			; Ogre::Resource::Resource
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Resource@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$1
__ehfuncinfo$??0Resource@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Resource@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Resource@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Resource@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Resource::Resource, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Resource@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7Resource@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0FixedString@Ogre@@QAE@ABV01@@Z	; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0Resource@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0Resource@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Resource@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Resource@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Resource::Resource
PUBLIC	??4Resource@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Resource::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Resource@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Resource@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::Resource::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4BaseObject@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Resource@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::Resource::operator=
_TEXT	ENDS
PUBLIC	??_GResource@Ogre@@MAEPAXI@Z			; Ogre::Resource::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GResource@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GResource@Ogre@@MAEPAXI@Z PROC			; Ogre::Resource::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GResource@Ogre@@MAEPAXI@Z ENDP			; Ogre::Resource::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EResource@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EResource@Ogre@@MAEPAXI@Z PROC			; Ogre::Resource::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@2
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EResource@Ogre@@MAEPAXI@Z ENDP			; Ogre::Resource::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7DataStream@Ogre@@6B@			; Ogre::DataStream::`vftable'
PUBLIC	??0DataStream@Ogre@@QAE@XZ			; Ogre::DataStream::DataStream
PUBLIC	??_R4DataStream@Ogre@@6B@			; Ogre::DataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDataStream@Ogre@@@8			; Ogre::DataStream `RTTI Type Descriptor'
PUBLIC	??_R3DataStream@Ogre@@8				; Ogre::DataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DataStream@Ogre@@8				; Ogre::DataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DataStream@Ogre@@8		; Ogre::DataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDataStream@Ogre@@UAEPAXI@Z			; Ogre::DataStream::`vector deleting destructor'
PUBLIC	?size@DataStream@Ogre@@UBEIXZ			; Ogre::DataStream::size
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__purecall:PROC
EXTRN	?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::DataStream::readLine
EXTRN	?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; Ogre::DataStream::getLine
EXTRN	?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:PROC ; Ogre::DataStream::getAsString
EXTRN	?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::DataStream::skipLine
;	COMDAT ??_R1A@?0A@EA@DataStream@Ogre@@8
; File i:\svnroot\client\ogremain\ogredatastream.h
rdata$r	SEGMENT
??_R1A@?0A@EA@DataStream@Ogre@@8 DD FLAT:??_R0?AVDataStream@Ogre@@@8 ; Ogre::DataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DataStream@Ogre@@8
rdata$r	SEGMENT
??_R2DataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8 ; Ogre::DataStream::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DataStream@Ogre@@8
rdata$r	SEGMENT
??_R3DataStream@Ogre@@8 DD 00H				; Ogre::DataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::DataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4DataStream@Ogre@@6B@ DD 00H			; Ogre::DataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDataStream@Ogre@@@8
	DD	FLAT:??_R3DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DataStream@Ogre@@6B@
CONST	SEGMENT
??_7DataStream@Ogre@@6B@ DD FLAT:??_R4DataStream@Ogre@@6B@ ; Ogre::DataStream::`vftable'
	DD	FLAT:??_EDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@XZ$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0DataStream@Ogre@@QAE@XZ PROC				; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx

; 68   : 		DataStream() : mSize(0) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@XZ ENDP				; Ogre::DataStream::DataStream
PUBLIC	??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Ogre::DataStream::DataStream
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx

; 70   : 		DataStream(const String& name) : mName(name), mSize(0) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Ogre::DataStream::DataStream
PUBLIC	?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Ogre::DataStream::getName
; Function compile flags: /Odtp
;	COMDAT ?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Ogre::DataStream::getName, COMDAT
; _this$ = ecx

; 72   : 		const String& getName(void) { return mName; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?getName@DataStream@Ogre@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Ogre::DataStream::getName
_TEXT	ENDS
PUBLIC	??1DataStream@Ogre@@UAE@XZ			; Ogre::DataStream::~DataStream
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1DataStream@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1DataStream@Ogre@@UAE@XZ$0
__ehfuncinfo$??1DataStream@Ogre@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1DataStream@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1DataStream@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1DataStream@Ogre@@UAE@XZ PROC				; Ogre::DataStream::~DataStream, COMDAT
; _this$ = ecx

; 73   : 		virtual ~DataStream() {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1DataStream@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1DataStream@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1DataStream@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1DataStream@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1DataStream@Ogre@@UAE@XZ ENDP				; Ogre::DataStream::~DataStream
; Function compile flags: /Odtp
;	COMDAT ?size@DataStream@Ogre@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@DataStream@Ogre@@UBEIXZ PROC			; Ogre::DataStream::size, COMDAT
; _this$ = ecx

; 157  : 		virtual size_t size(void) const { return mSize; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?size@DataStream@Ogre@@UBEIXZ ENDP			; Ogre::DataStream::size
_TEXT	ENDS
PUBLIC	??0DataStream@Ogre@@QAE@ABV01@@Z		; Ogre::DataStream::DataStream
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0DataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0DataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0DataStream@Ogre@@QAE@ABV01@@Z PROC			; Ogre::DataStream::DataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStream@Ogre@@6B@
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+32], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0DataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DataStream@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::DataStream::DataStream
PUBLIC	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::DataStream::operator=
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DataStream@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::DataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::DataStream::operator=
_TEXT	ENDS
PUBLIC	??_GDataStream@Ogre@@UAEPAXI@Z			; Ogre::DataStream::`scalar deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDataStream@Ogre@@UAEPAXI@Z PROC			; Ogre::DataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDataStream@Ogre@@UAEPAXI@Z ENDP			; Ogre::DataStream::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Odtp
;	COMDAT ??_EDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDataStream@Ogre@@UAEPAXI@Z PROC			; Ogre::DataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@3
	push	OFFSET ??1DataStream@Ogre@@UAE@XZ	; Ogre::DataStream::~DataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	36					; 00000024H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@3
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@3
$LN3@vector@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDataStream@Ogre@@UAEPAXI@Z ENDP			; Ogre::DataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ		; Ogre::MemoryDataStream::getPtr
; Function compile flags: /Odtp
;	COMDAT ?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ PROC		; Ogre::MemoryDataStream::getPtr, COMDAT
; _this$ = ecx

; 267  : 		uchar* getPtr(void) { return mData; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?getPtr@MemoryDataStream@Ogre@@QAEPAEXZ ENDP		; Ogre::MemoryDataStream::getPtr
_TEXT	ENDS
PUBLIC	?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ	; Ogre::MemoryDataStream::getCurrentPtr
; Function compile flags: /Odtp
;	COMDAT ?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ PROC	; Ogre::MemoryDataStream::getCurrentPtr, COMDAT
; _this$ = ecx

; 270  : 		uchar* getCurrentPtr(void) { return mPos; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?getCurrentPtr@MemoryDataStream@Ogre@@QAEPAEXZ ENDP	; Ogre::MemoryDataStream::getCurrentPtr
_TEXT	ENDS
PUBLIC	?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ	; Ogre::MemoryDataStream::getMemoryImage
; Function compile flags: /Odtp
;	COMDAT ?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ PROC	; Ogre::MemoryDataStream::getMemoryImage, COMDAT
; _this$ = ecx

; 307  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 			return mData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]

; 309  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ ENDP	; Ogre::MemoryDataStream::getMemoryImage
_TEXT	ENDS
PUBLIC	?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z ; Ogre::MemoryDataStream::setFreeOnClose
; Function compile flags: /Odtp
;	COMDAT ?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_freeOnClose$ = 8					; size = 4
?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z PROC ; Ogre::MemoryDataStream::setFreeOnClose, COMDAT
; _this$ = ecx

; 313  : 		void setFreeOnClose(void (*freeOnClose)(void *)) { mFreeOnClose = freeOnClose; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _freeOnClose$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?setFreeOnClose@MemoryDataStream@Ogre@@QAEXP6AXPAX@Z@Z ENDP ; Ogre::MemoryDataStream::setFreeOnClose
_TEXT	ENDS
PUBLIC	??_7MemoryDataStream@Ogre@@6B@			; Ogre::MemoryDataStream::`vftable'
PUBLIC	??0MemoryDataStream@Ogre@@QAE@ABV01@@Z		; Ogre::MemoryDataStream::MemoryDataStream
PUBLIC	??_R4MemoryDataStream@Ogre@@6B@			; Ogre::MemoryDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMemoryDataStream@Ogre@@@8		; Ogre::MemoryDataStream `RTTI Type Descriptor'
PUBLIC	??_R3MemoryDataStream@Ogre@@8			; Ogre::MemoryDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemoryDataStream@Ogre@@8			; Ogre::MemoryDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemoryDataStream@Ogre@@8		; Ogre::MemoryDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EMemoryDataStream@Ogre@@UAEPAXI@Z		; Ogre::MemoryDataStream::`vector deleting destructor'
EXTRN	?read@MemoryDataStream@Ogre@@UAEIPAXI@Z:PROC	; Ogre::MemoryDataStream::read
EXTRN	?write@MemoryDataStream@Ogre@@UAEIPBXI@Z:PROC	; Ogre::MemoryDataStream::write
EXTRN	?readLine@MemoryDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::MemoryDataStream::readLine
EXTRN	?skipLine@MemoryDataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::MemoryDataStream::skipLine
EXTRN	?skip@MemoryDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::MemoryDataStream::skip
EXTRN	?seek@MemoryDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::MemoryDataStream::seek
EXTRN	?tell@MemoryDataStream@Ogre@@UBEIXZ:PROC	; Ogre::MemoryDataStream::tell
EXTRN	?eof@MemoryDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::MemoryDataStream::eof
EXTRN	?close@MemoryDataStream@Ogre@@UAEXXZ:PROC	; Ogre::MemoryDataStream::close
;	COMDAT ??_R1A@?0A@EA@MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemoryDataStream@Ogre@@8 DD FLAT:??_R0?AVMemoryDataStream@Ogre@@@8 ; Ogre::MemoryDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2MemoryDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MemoryDataStream@Ogre@@8 ; Ogre::MemoryDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3MemoryDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3MemoryDataStream@Ogre@@8 DD 00H			; Ogre::MemoryDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemoryDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMemoryDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MemoryDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemoryDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MemoryDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4MemoryDataStream@Ogre@@6B@ DD 00H			; Ogre::MemoryDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMemoryDataStream@Ogre@@@8
	DD	FLAT:??_R3MemoryDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7MemoryDataStream@Ogre@@6B@
CONST	SEGMENT
??_7MemoryDataStream@Ogre@@6B@ DD FLAT:??_R4MemoryDataStream@Ogre@@6B@ ; Ogre::MemoryDataStream::`vftable'
	DD	FLAT:??_EMemoryDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@MemoryDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@MemoryDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@MemoryDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@MemoryDataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@MemoryDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@MemoryDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@MemoryDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@MemoryDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@MemoryDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@MemoryDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0MemoryDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::MemoryDataStream::MemoryDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7MemoryDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [edx+44], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [edx+48], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0MemoryDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MemoryDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::MemoryDataStream::MemoryDataStream
PUBLIC	??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MemoryDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MemoryDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+44], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR [ecx+48], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MemoryDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MemoryDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GMemoryDataStream@Ogre@@UAEPAXI@Z		; Ogre::MemoryDataStream::`scalar deleting destructor'
EXTRN	??1MemoryDataStream@Ogre@@UAE@XZ:PROC		; Ogre::MemoryDataStream::~MemoryDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GMemoryDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMemoryDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::MemoryDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMemoryDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::MemoryDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EMemoryDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EMemoryDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::MemoryDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@4
	push	OFFSET ??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@4
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@4
$LN3@vector@4:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryDataStream@Ogre@@UAE@XZ	; Ogre::MemoryDataStream::~MemoryDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@4:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EMemoryDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::MemoryDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7FileStreamDataStream@Ogre@@6B@		; Ogre::FileStreamDataStream::`vftable'
PUBLIC	??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z	; Ogre::FileStreamDataStream::FileStreamDataStream
PUBLIC	??_R4FileStreamDataStream@Ogre@@6B@		; Ogre::FileStreamDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileStreamDataStream@Ogre@@@8		; Ogre::FileStreamDataStream `RTTI Type Descriptor'
PUBLIC	??_R3FileStreamDataStream@Ogre@@8		; Ogre::FileStreamDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileStreamDataStream@Ogre@@8		; Ogre::FileStreamDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8	; Ogre::FileStreamDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EFileStreamDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileStreamDataStream::`vector deleting destructor'
EXTRN	?read@FileStreamDataStream@Ogre@@UAEIPAXI@Z:PROC ; Ogre::FileStreamDataStream::read
EXTRN	?write@FileStreamDataStream@Ogre@@UAEIPBXI@Z:PROC ; Ogre::FileStreamDataStream::write
EXTRN	?readLine@FileStreamDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Ogre::FileStreamDataStream::readLine
EXTRN	?skip@FileStreamDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::FileStreamDataStream::skip
EXTRN	?seek@FileStreamDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::FileStreamDataStream::seek
EXTRN	?tell@FileStreamDataStream@Ogre@@UBEIXZ:PROC	; Ogre::FileStreamDataStream::tell
EXTRN	?eof@FileStreamDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::FileStreamDataStream::eof
EXTRN	?close@FileStreamDataStream@Ogre@@UAEXXZ:PROC	; Ogre::FileStreamDataStream::close
EXTRN	?getMemoryImage@FileStreamDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::FileStreamDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8 DD FLAT:??_R0?AVFileStreamDataStream@Ogre@@@8 ; Ogre::FileStreamDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2FileStreamDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@FileStreamDataStream@Ogre@@8 ; Ogre::FileStreamDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3FileStreamDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3FileStreamDataStream@Ogre@@8 DD 00H		; Ogre::FileStreamDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileStreamDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVFileStreamDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::FileStreamDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileStreamDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileStreamDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4FileStreamDataStream@Ogre@@6B@ DD 00H		; Ogre::FileStreamDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileStreamDataStream@Ogre@@@8
	DD	FLAT:??_R3FileStreamDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7FileStreamDataStream@Ogre@@6B@
CONST	SEGMENT
??_7FileStreamDataStream@Ogre@@6B@ DD FLAT:??_R4FileStreamDataStream@Ogre@@6B@ ; Ogre::FileStreamDataStream::`vftable'
	DD	FLAT:??_EFileStreamDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@FileStreamDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@FileStreamDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@FileStreamDataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@FileStreamDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@FileStreamDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@FileStreamDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@FileStreamDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@FileStreamDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@FileStreamDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::FileStreamDataStream::FileStreamDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FileStreamDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+40]
	mov	BYTE PTR [edx+40], cl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FileStreamDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::FileStreamDataStream::FileStreamDataStream
PUBLIC	??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FileStreamDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::FileStreamDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+40]
	mov	BYTE PTR [ecx+40], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4FileStreamDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::FileStreamDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GFileStreamDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileStreamDataStream::`scalar deleting destructor'
EXTRN	??1FileStreamDataStream@Ogre@@UAE@XZ:PROC	; Ogre::FileStreamDataStream::~FileStreamDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GFileStreamDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileStreamDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileStreamDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStreamDataStream@Ogre@@UAE@XZ	; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileStreamDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileStreamDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EFileStreamDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFileStreamDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileStreamDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@5
	push	OFFSET ??1FileStreamDataStream@Ogre@@UAE@XZ ; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@5
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@5
$LN3@vector@5:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileStreamDataStream@Ogre@@UAE@XZ	; Ogre::FileStreamDataStream::~FileStreamDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@5:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFileStreamDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileStreamDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7FileHandleDataStream@Ogre@@6B@		; Ogre::FileHandleDataStream::`vftable'
PUBLIC	??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z	; Ogre::FileHandleDataStream::FileHandleDataStream
PUBLIC	??_R4FileHandleDataStream@Ogre@@6B@		; Ogre::FileHandleDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFileHandleDataStream@Ogre@@@8		; Ogre::FileHandleDataStream `RTTI Type Descriptor'
PUBLIC	??_R3FileHandleDataStream@Ogre@@8		; Ogre::FileHandleDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FileHandleDataStream@Ogre@@8		; Ogre::FileHandleDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8	; Ogre::FileHandleDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EFileHandleDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileHandleDataStream::`vector deleting destructor'
EXTRN	?read@FileHandleDataStream@Ogre@@UAEIPAXI@Z:PROC ; Ogre::FileHandleDataStream::read
EXTRN	?write@FileHandleDataStream@Ogre@@UAEIPBXI@Z:PROC ; Ogre::FileHandleDataStream::write
EXTRN	?skip@FileHandleDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::FileHandleDataStream::skip
EXTRN	?seek@FileHandleDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::FileHandleDataStream::seek
EXTRN	?tell@FileHandleDataStream@Ogre@@UBEIXZ:PROC	; Ogre::FileHandleDataStream::tell
EXTRN	?eof@FileHandleDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::FileHandleDataStream::eof
EXTRN	?close@FileHandleDataStream@Ogre@@UAEXXZ:PROC	; Ogre::FileHandleDataStream::close
EXTRN	?getMemoryImage@FileHandleDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::FileHandleDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8 DD FLAT:??_R0?AVFileHandleDataStream@Ogre@@@8 ; Ogre::FileHandleDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2FileHandleDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@FileHandleDataStream@Ogre@@8 ; Ogre::FileHandleDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3FileHandleDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3FileHandleDataStream@Ogre@@8 DD 00H		; Ogre::FileHandleDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFileHandleDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVFileHandleDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::FileHandleDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFileHandleDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FileHandleDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4FileHandleDataStream@Ogre@@6B@ DD 00H		; Ogre::FileHandleDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFileHandleDataStream@Ogre@@@8
	DD	FLAT:??_R3FileHandleDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7FileHandleDataStream@Ogre@@6B@
CONST	SEGMENT
??_7FileHandleDataStream@Ogre@@6B@ DD FLAT:??_R4FileHandleDataStream@Ogre@@6B@ ; Ogre::FileHandleDataStream::`vftable'
	DD	FLAT:??_EFileHandleDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@FileHandleDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@FileHandleDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@FileHandleDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@FileHandleDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@FileHandleDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@FileHandleDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@DataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@FileHandleDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@FileHandleDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::FileHandleDataStream::FileHandleDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FileHandleDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FileHandleDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::FileHandleDataStream::FileHandleDataStream
PUBLIC	??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FileHandleDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::FileHandleDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4FileHandleDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::FileHandleDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GFileHandleDataStream@Ogre@@UAEPAXI@Z	; Ogre::FileHandleDataStream::`scalar deleting destructor'
EXTRN	??1FileHandleDataStream@Ogre@@UAE@XZ:PROC	; Ogre::FileHandleDataStream::~FileHandleDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GFileHandleDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFileHandleDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileHandleDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileHandleDataStream@Ogre@@UAE@XZ	; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFileHandleDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileHandleDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EFileHandleDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFileHandleDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::FileHandleDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@6
	push	OFFSET ??1FileHandleDataStream@Ogre@@UAE@XZ ; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@6
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@6:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@6
$LN3@vector@6:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileHandleDataStream@Ogre@@UAE@XZ	; Ogre::FileHandleDataStream::~FileHandleDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@6:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@6:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFileHandleDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::FileHandleDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7DataStreamObject@Ogre@@6B@			; Ogre::DataStreamObject::`vftable'
PUBLIC	??1DataStreamObject@Ogre@@MAE@XZ		; Ogre::DataStreamObject::~DataStreamObject
PUBLIC	??_R4DataStreamObject@Ogre@@6B@			; Ogre::DataStreamObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDataStreamObject@Ogre@@@8		; Ogre::DataStreamObject `RTTI Type Descriptor'
PUBLIC	??_R3DataStreamObject@Ogre@@8			; Ogre::DataStreamObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DataStreamObject@Ogre@@8			; Ogre::DataStreamObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DataStreamObject@Ogre@@8		; Ogre::DataStreamObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EDataStreamObject@Ogre@@MAEPAXI@Z		; Ogre::DataStreamObject::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DataStreamObject@Ogre@@8 DD FLAT:??_R0?AVDataStreamObject@Ogre@@@8 ; Ogre::DataStreamObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R2DataStreamObject@Ogre@@8 DD FLAT:??_R1A@?0A@EA@DataStreamObject@Ogre@@8 ; Ogre::DataStreamObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DataStreamObject@Ogre@@8
rdata$r	SEGMENT
??_R3DataStreamObject@Ogre@@8 DD 00H			; Ogre::DataStreamObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDataStreamObject@Ogre@@@8
_DATA	SEGMENT
??_R0?AVDataStreamObject@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::DataStreamObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDataStreamObject@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DataStreamObject@Ogre@@6B@
rdata$r	SEGMENT
??_R4DataStreamObject@Ogre@@6B@ DD 00H			; Ogre::DataStreamObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDataStreamObject@Ogre@@@8
	DD	FLAT:??_R3DataStreamObject@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7DataStreamObject@Ogre@@6B@
CONST	SEGMENT
??_7DataStreamObject@Ogre@@6B@ DD FLAT:??_R4DataStreamObject@Ogre@@6B@ ; Ogre::DataStreamObject::`vftable'
	DD	FLAT:??_EDataStreamObject@Ogre@@MAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??1DataStreamObject@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DataStreamObject@Ogre@@MAE@XZ PROC			; Ogre::DataStreamObject::~DataStreamObject, COMDAT
; _this$ = ecx

; 445  : 		virtual ~DataStreamObject(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1DataStreamObject@Ogre@@MAE@XZ ENDP			; Ogre::DataStreamObject::~DataStreamObject
_TEXT	ENDS
PUBLIC	??0DataStreamObject@Ogre@@QAE@XZ		; Ogre::DataStreamObject::DataStreamObject
; Function compile flags: /Odtp
;	COMDAT ??0DataStreamObject@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DataStreamObject@Ogre@@QAE@XZ PROC			; Ogre::DataStreamObject::DataStreamObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0DataStreamObject@Ogre@@QAE@XZ ENDP			; Ogre::DataStreamObject::DataStreamObject
_TEXT	ENDS
PUBLIC	??0DataStreamObject@Ogre@@QAE@ABV01@@Z		; Ogre::DataStreamObject::DataStreamObject
; Function compile flags: /Odtp
;	COMDAT ??0DataStreamObject@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0DataStreamObject@Ogre@@QAE@ABV01@@Z PROC		; Ogre::DataStreamObject::DataStreamObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DataStreamObject@Ogre@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0DataStreamObject@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::DataStreamObject::DataStreamObject
_TEXT	ENDS
PUBLIC	??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::DataStreamObject::operator=
; Function compile flags: /Odtp
;	COMDAT ??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::DataStreamObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4DataStreamObject@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::DataStreamObject::operator=
_TEXT	ENDS
PUBLIC	??_GDataStreamObject@Ogre@@MAEPAXI@Z		; Ogre::DataStreamObject::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GDataStreamObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDataStreamObject@Ogre@@MAEPAXI@Z PROC		; Ogre::DataStreamObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDataStreamObject@Ogre@@MAEPAXI@Z ENDP		; Ogre::DataStreamObject::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EDataStreamObject@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EDataStreamObject@Ogre@@MAEPAXI@Z PROC		; Ogre::DataStreamObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@7
	push	OFFSET ??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@7
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@7:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@7
$LN3@vector@7:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DataStreamObject@Ogre@@MAE@XZ	; Ogre::DataStreamObject::~DataStreamObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@7:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@7:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EDataStreamObject@Ogre@@MAEPAXI@Z ENDP		; Ogre::DataStreamObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7ObjectDataStream@Ogre@@6B@			; Ogre::ObjectDataStream::`vftable'
PUBLIC	??0ObjectDataStream@Ogre@@QAE@ABV01@@Z		; Ogre::ObjectDataStream::ObjectDataStream
PUBLIC	??_R4ObjectDataStream@Ogre@@6B@			; Ogre::ObjectDataStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVObjectDataStream@Ogre@@@8		; Ogre::ObjectDataStream `RTTI Type Descriptor'
PUBLIC	??_R3ObjectDataStream@Ogre@@8			; Ogre::ObjectDataStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ObjectDataStream@Ogre@@8			; Ogre::ObjectDataStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ObjectDataStream@Ogre@@8		; Ogre::ObjectDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EObjectDataStream@Ogre@@UAEPAXI@Z		; Ogre::ObjectDataStream::`vector deleting destructor'
EXTRN	?read@ObjectDataStream@Ogre@@UAEIPAXI@Z:PROC	; Ogre::ObjectDataStream::read
EXTRN	?write@ObjectDataStream@Ogre@@UAEIPBXI@Z:PROC	; Ogre::ObjectDataStream::write
EXTRN	?skip@ObjectDataStream@Ogre@@UAEXJ@Z:PROC	; Ogre::ObjectDataStream::skip
EXTRN	?seek@ObjectDataStream@Ogre@@UAEXI@Z:PROC	; Ogre::ObjectDataStream::seek
EXTRN	?tell@ObjectDataStream@Ogre@@UBEIXZ:PROC	; Ogre::ObjectDataStream::tell
EXTRN	?eof@ObjectDataStream@Ogre@@UBE_NXZ:PROC	; Ogre::ObjectDataStream::eof
EXTRN	?size@ObjectDataStream@Ogre@@UBEIXZ:PROC	; Ogre::ObjectDataStream::size
EXTRN	?close@ObjectDataStream@Ogre@@UAEXXZ:PROC	; Ogre::ObjectDataStream::close
EXTRN	?getMemoryImage@ObjectDataStream@Ogre@@UAEPAXXZ:PROC ; Ogre::ObjectDataStream::getMemoryImage
;	COMDAT ??_R1A@?0A@EA@ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ObjectDataStream@Ogre@@8 DD FLAT:??_R0?AVObjectDataStream@Ogre@@@8 ; Ogre::ObjectDataStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R2ObjectDataStream@Ogre@@8 DD FLAT:??_R1A@?0A@EA@ObjectDataStream@Ogre@@8 ; Ogre::ObjectDataStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3ObjectDataStream@Ogre@@8
rdata$r	SEGMENT
??_R3ObjectDataStream@Ogre@@8 DD 00H			; Ogre::ObjectDataStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVObjectDataStream@Ogre@@@8
_DATA	SEGMENT
??_R0?AVObjectDataStream@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::ObjectDataStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVObjectDataStream@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ObjectDataStream@Ogre@@6B@
rdata$r	SEGMENT
??_R4ObjectDataStream@Ogre@@6B@ DD 00H			; Ogre::ObjectDataStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVObjectDataStream@Ogre@@@8
	DD	FLAT:??_R3ObjectDataStream@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7ObjectDataStream@Ogre@@6B@
CONST	SEGMENT
??_7ObjectDataStream@Ogre@@6B@ DD FLAT:??_R4ObjectDataStream@Ogre@@6B@ ; Ogre::ObjectDataStream::`vftable'
	DD	FLAT:??_EObjectDataStream@Ogre@@UAEPAXI@Z
	DD	FLAT:?read@ObjectDataStream@Ogre@@UAEIPAXI@Z
	DD	FLAT:?write@ObjectDataStream@Ogre@@UAEIPBXI@Z
	DD	FLAT:?readLine@DataStream@Ogre@@UAEIPADIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getLine@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?getAsString@DataStream@Ogre@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?skipLine@DataStream@Ogre@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?skip@ObjectDataStream@Ogre@@UAEXJ@Z
	DD	FLAT:?seek@ObjectDataStream@Ogre@@UAEXI@Z
	DD	FLAT:?tell@ObjectDataStream@Ogre@@UBEIXZ
	DD	FLAT:?eof@ObjectDataStream@Ogre@@UBE_NXZ
	DD	FLAT:?size@ObjectDataStream@Ogre@@UBEIXZ
	DD	FLAT:?close@ObjectDataStream@Ogre@@UAEXXZ
	DD	FLAT:?getMemoryImage@ObjectDataStream@Ogre@@UAEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0ObjectDataStream@Ogre@@QAE@ABV01@@Z PROC		; Ogre::ObjectDataStream::ObjectDataStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DataStream@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ObjectDataStream@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1DataStream@Ogre@@UAE@XZ		; Ogre::DataStream::~DataStream
__ehhandler$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0ObjectDataStream@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0ObjectDataStream@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::ObjectDataStream::ObjectDataStream
PUBLIC	??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::ObjectDataStream::operator=
; Function compile flags: /Odtp
;	COMDAT ??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::ObjectDataStream::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4DataStream@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4ObjectDataStream@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::ObjectDataStream::operator=
_TEXT	ENDS
PUBLIC	??_GObjectDataStream@Ogre@@UAEPAXI@Z		; Ogre::ObjectDataStream::`scalar deleting destructor'
EXTRN	??1ObjectDataStream@Ogre@@UAE@XZ:PROC		; Ogre::ObjectDataStream::~ObjectDataStream
; Function compile flags: /Odtp
;	COMDAT ??_GObjectDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GObjectDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::ObjectDataStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GObjectDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::ObjectDataStream::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EObjectDataStream@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EObjectDataStream@Ogre@@UAEPAXI@Z PROC		; Ogre::ObjectDataStream::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@8
	push	OFFSET ??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@8
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@8:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@8
$LN3@vector@8:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ObjectDataStream@Ogre@@UAE@XZ	; Ogre::ObjectDataStream::~ObjectDataStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@8:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@8:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EObjectDataStream@Ogre@@UAEPAXI@Z ENDP		; Ogre::ObjectDataStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7Archive@Ogre@@6B@				; Ogre::Archive::`vftable'
PUBLIC	??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z	; Ogre::Archive::Archive
PUBLIC	??_R4Archive@Ogre@@6B@				; Ogre::Archive::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVArchive@Ogre@@@8			; Ogre::Archive `RTTI Type Descriptor'
PUBLIC	??_R3Archive@Ogre@@8				; Ogre::Archive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Archive@Ogre@@8				; Ogre::Archive::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Archive@Ogre@@8			; Ogre::Archive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EArchive@Ogre@@UAEPAXI@Z			; Ogre::Archive::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@Archive@Ogre@@8
; File i:\svnroot\client\ogremain\ogrearchive.h
rdata$r	SEGMENT
??_R1A@?0A@EA@Archive@Ogre@@8 DD FLAT:??_R0?AVArchive@Ogre@@@8 ; Ogre::Archive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Archive@Ogre@@8
rdata$r	SEGMENT
??_R2Archive@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Archive@Ogre@@8 ; Ogre::Archive::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Archive@Ogre@@8
rdata$r	SEGMENT
??_R3Archive@Ogre@@8 DD 00H				; Ogre::Archive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVArchive@Ogre@@@8
_DATA	SEGMENT
??_R0?AVArchive@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Archive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArchive@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Archive@Ogre@@6B@
rdata$r	SEGMENT
??_R4Archive@Ogre@@6B@ DD 00H				; Ogre::Archive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArchive@Ogre@@@8
	DD	FLAT:??_R3Archive@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Archive@Ogre@@6B@
CONST	SEGMENT
??_7Archive@Ogre@@6B@ DD FLAT:??_R4Archive@Ogre@@6B@	; Ogre::Archive::`vftable'
	DD	FLAT:??_EArchive@Ogre@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstream$ = 8						; size = 4
_mode$ = 12						; size = 4
??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z PROC		; Ogre::Archive::Archive, COMDAT
; _this$ = ecx

; 22   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pstream$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 23   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0Archive@Ogre@@QAE@PAVDataStream@1@H@Z ENDP		; Ogre::Archive::Archive
_TEXT	ENDS
PUBLIC	??1Archive@Ogre@@UAE@XZ				; Ogre::Archive::~Archive
; Function compile flags: /Odtp
;	COMDAT ??1Archive@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Archive@Ogre@@UAE@XZ PROC				; Ogre::Archive::~Archive, COMDAT
; _this$ = ecx

; 26   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@

; 27   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1Archive@Ogre@@UAE@XZ ENDP				; Ogre::Archive::~Archive
_TEXT	ENDS
PUBLIC	?isLoading@Archive@Ogre@@QAE_NXZ		; Ogre::Archive::isLoading
; Function compile flags: /Odtp
;	COMDAT ?isLoading@Archive@Ogre@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isLoading@Archive@Ogre@@QAE_NXZ PROC			; Ogre::Archive::isLoading, COMDAT
; _this$ = ecx

; 30   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 			return m_Mode==MODE_LOAD;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+8], 1
	sete	cl
	mov	al, cl

; 32   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?isLoading@Archive@Ogre@@QAE_NXZ ENDP			; Ogre::Archive::isLoading
_TEXT	ENDS
PUBLIC	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z	; Ogre::Archive::serialize
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAD@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAD@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 108  : 		SERIALIZE_PRIMITIVE_FUNC(char)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAD@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAF@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAF@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 109  : 		SERIALIZE_PRIMITIVE_FUNC(short)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAF@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAH@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAH@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 110  : 		SERIALIZE_PRIMITIVE_FUNC(int)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAH@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_J@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_J@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 111  : 		SERIALIZE_PRIMITIVE_FUNC(int64)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	8
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_J@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAE@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAE@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 112  : 		SERIALIZE_PRIMITIVE_FUNC(uchar)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAE@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAG@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAG@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 113  : 		SERIALIZE_PRIMITIVE_FUNC(ushort)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAG@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAI@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAI@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 114  : 		SERIALIZE_PRIMITIVE_FUNC(uint)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAI@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_K@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_K@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 115  : 		SERIALIZE_PRIMITIVE_FUNC(uint64)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	8
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_K@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AA_N@Z		; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AA_N@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 116  : 		SERIALIZE_PRIMITIVE_FUNC(bool)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AA_N@Z ENDP			; Ogre::Archive::operator<<
_TEXT	ENDS
PUBLIC	??6Archive@Ogre@@QAEAAV01@AAM@Z			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
;	COMDAT ??6Archive@Ogre@@QAEAAV01@AAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??6Archive@Ogre@@QAEAAV01@AAM@Z PROC			; Ogre::Archive::operator<<, COMDAT
; _this$ = ecx

; 117  : 		SERIALIZE_PRIMITIVE_FUNC(float)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6Archive@Ogre@@QAEAAV01@AAM@Z ENDP			; Ogre::Archive::operator<<
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z PROC		; Ogre::Archive::serialize, COMDAT
; _this$ = ecx

; 155  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 			if(isLoading()) m_pStream->read(pbuf, len);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@serialize
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
	jmp	SHORT $LN1@serialize
$LN2@serialize:

; 157  : 			else m_pStream->write(pbuf, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN1@serialize:

; 158  : 
; 159  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 160  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ENDP		; Ogre::Archive::serialize
_TEXT	ENDS
PUBLIC	?read@Archive@Ogre@@QAEXPAXI@Z			; Ogre::Archive::read
; Function compile flags: /Odtp
;	COMDAT ?read@Archive@Ogre@@QAEXPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?read@Archive@Ogre@@QAEXPAXI@Z PROC			; Ogre::Archive::read, COMDAT
; _this$ = ecx

; 163  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 			m_pStream->read(pbuf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 165  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?read@Archive@Ogre@@QAEXPAXI@Z ENDP			; Ogre::Archive::read
_TEXT	ENDS
PUBLIC	?write@Archive@Ogre@@QAEXPBXI@Z			; Ogre::Archive::write
; Function compile flags: /Odtp
;	COMDAT ?write@Archive@Ogre@@QAEXPBXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
_len$ = 12						; size = 4
?write@Archive@Ogre@@QAEXPBXI@Z PROC			; Ogre::Archive::write, COMDAT
; _this$ = ecx

; 168  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 			m_pStream->write(pbuf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 170  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?write@Archive@Ogre@@QAEXPBXI@Z ENDP			; Ogre::Archive::write
_TEXT	ENDS
PUBLIC	??0Archive@Ogre@@QAE@ABV01@@Z			; Ogre::Archive::Archive
; Function compile flags: /Odtp
;	COMDAT ??0Archive@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Archive@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Archive::Archive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Archive@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Archive@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Archive::Archive
_TEXT	ENDS
PUBLIC	??4Archive@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Archive::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Archive@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Archive@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Archive::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Archive@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Archive::operator=
_TEXT	ENDS
PUBLIC	??_GArchive@Ogre@@UAEPAXI@Z			; Ogre::Archive::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GArchive@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArchive@Ogre@@UAEPAXI@Z PROC			; Ogre::Archive::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Archive@Ogre@@UAE@XZ			; Ogre::Archive::~Archive
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@9:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GArchive@Ogre@@UAEPAXI@Z ENDP			; Ogre::Archive::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EArchive@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EArchive@Ogre@@UAEPAXI@Z PROC			; Ogre::Archive::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@9
	push	OFFSET ??1Archive@Ogre@@UAE@XZ		; Ogre::Archive::~Archive
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@9
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@9:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@9
$LN3@vector@9:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Archive@Ogre@@UAE@XZ			; Ogre::Archive::~Archive
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@9:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@9:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EArchive@Ogre@@UAEPAXI@Z ENDP			; Ogre::Archive::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	__real@00000000
PUBLIC	??0Quaternion@Ogre@@QAE@XZ			; Ogre::Quaternion::Quaternion
EXTRN	__fltused:DWORD
;	COMDAT __real@3f800000
; File i:\svnroot\client\ogremain\ogrequaternion.h
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0Quaternion@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Quaternion@Ogre@@QAE@XZ PROC				; Ogre::Quaternion::Quaternion, COMDAT
; _this$ = ecx

; 54   : 		Quaternion():x(0), y(0), z(0), w(1.0f){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Quaternion@Ogre@@QAE@XZ ENDP				; Ogre::Quaternion::Quaternion
_TEXT	ENDS
PUBLIC	??0Quaternion@Ogre@@QAE@MMMM@Z			; Ogre::Quaternion::Quaternion
; Function compile flags: /Odtp
;	COMDAT ??0Quaternion@Ogre@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
_w1$ = 20						; size = 4
??0Quaternion@Ogre@@QAE@MMMM@Z PROC			; Ogre::Quaternion::Quaternion, COMDAT
; _this$ = ecx

; 55   : 		Quaternion( float x1, float y1, float z1, float w1 ) : x(x1), y(y1), z(z1), w(w1){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w1$[ebp]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Quaternion@Ogre@@QAE@MMMM@Z ENDP			; Ogre::Quaternion::Quaternion
_TEXT	ENDS
PUBLIC	??4Quaternion@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Quaternion::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Quaternion@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_quat$ = 8						; size = 4
??4Quaternion@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::Quaternion::operator=, COMDAT
; _this$ = ecx

; 59   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 			x = quat.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _quat$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 61   : 			y = quat.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _quat$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 62   : 			z = quat.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _quat$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 63   : 			w = quat.w;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _quat$[ebp]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+12]

; 64   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 65   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4Quaternion@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::Quaternion::operator=
_TEXT	ENDS
PUBLIC	??XQuaternion@Ogre@@QAEXM@Z			; Ogre::Quaternion::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XQuaternion@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??XQuaternion@Ogre@@QAEXM@Z PROC			; Ogre::Quaternion::operator*=, COMDAT
; _this$ = ecx

; 67   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 			x *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 69   : 			y *= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 70   : 			z *= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 71   : 			w *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 72   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XQuaternion@Ogre@@QAEXM@Z ENDP			; Ogre::Quaternion::operator*=
_TEXT	ENDS
PUBLIC	?norm@Quaternion@Ogre@@QAEMXZ			; Ogre::Quaternion::norm
; Function compile flags: /Odtp
;	COMDAT ?norm@Quaternion@Ogre@@QAEMXZ
_TEXT	SEGMENT
tv94 = -8						; size = 4
_this$ = -4						; size = 4
?norm@Quaternion@Ogre@@QAEMXZ PROC			; Ogre::Quaternion::norm, COMDAT
; _this$ = ecx

; 74   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 			return x*x+y*y+z*z+w*w;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+12]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv94[ebp]
	fld	DWORD PTR tv94[ebp]

; 76   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?norm@Quaternion@Ogre@@QAEMXZ ENDP			; Ogre::Quaternion::norm
_TEXT	ENDS
PUBLIC	?identity@Quaternion@Ogre@@QAEXXZ		; Ogre::Quaternion::identity
; Function compile flags: /Odtp
;	COMDAT ?identity@Quaternion@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?identity@Quaternion@Ogre@@QAEXXZ PROC			; Ogre::Quaternion::identity, COMDAT
; _this$ = ecx

; 78   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 79   : 			x = y = z = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx]

; 80   : 			w = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+12]

; 81   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?identity@Quaternion@Ogre@@QAEXXZ ENDP			; Ogre::Quaternion::identity
_TEXT	ENDS
PUBLIC	?inverse@Quaternion@Ogre@@QAEXXZ		; Ogre::Quaternion::inverse
; Function compile flags: /Odtp
;	COMDAT ?inverse@Quaternion@Ogre@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?inverse@Quaternion@Ogre@@QAEXXZ PROC			; Ogre::Quaternion::inverse, COMDAT
; _this$ = ecx

; 83   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 			x = -x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fchs
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 85   : 			y = -y;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fchs
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 86   : 			z = -z;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fchs
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 87   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?inverse@Quaternion@Ogre@@QAEXXZ ENDP			; Ogre::Quaternion::inverse
_TEXT	ENDS
PUBLIC	?inverse@Quaternion@Ogre@@QBEXAAV12@@Z		; Ogre::Quaternion::inverse
; Function compile flags: /Odtp
;	COMDAT ?inverse@Quaternion@Ogre@@QBEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_quat$ = 8						; size = 4
?inverse@Quaternion@Ogre@@QBEXAAV12@@Z PROC		; Ogre::Quaternion::inverse, COMDAT
; _this$ = ecx

; 89   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 			quat.x = -x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fchs
	mov	ecx, DWORD PTR _quat$[ebp]
	fstp	DWORD PTR [ecx]

; 91   : 			quat.y = -y;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fchs
	mov	eax, DWORD PTR _quat$[ebp]
	fstp	DWORD PTR [eax+4]

; 92   : 			quat.z = -z;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fchs
	mov	edx, DWORD PTR _quat$[ebp]
	fstp	DWORD PTR [edx+8]

; 93   : 			quat.w = w;

	mov	eax, DWORD PTR _quat$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+12]

; 94   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?inverse@Quaternion@Ogre@@QBEXAAV12@@Z ENDP		; Ogre::Quaternion::inverse
_TEXT	ENDS
PUBLIC	?setElement@Quaternion@Ogre@@QAEXMMMM@Z		; Ogre::Quaternion::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Quaternion@Ogre@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
_w1$ = 20						; size = 4
?setElement@Quaternion@Ogre@@QAEXMMMM@Z PROC		; Ogre::Quaternion::setElement, COMDAT
; _this$ = ecx

; 96   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 			x = x1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]

; 98   : 			y = y1;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]

; 99   : 			z = z1;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]

; 100  : 			w = w1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w1$[ebp]
	fstp	DWORD PTR [eax+12]

; 101  : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?setElement@Quaternion@Ogre@@QAEXMMMM@Z ENDP		; Ogre::Quaternion::setElement
_TEXT	ENDS
PUBLIC	??9Quaternion@Ogre@@QBE_NABV01@@Z		; Ogre::Quaternion::operator!=
EXTRN	??8Quaternion@Ogre@@QBE_NABV01@@Z:PROC		; Ogre::Quaternion::operator==
; Function compile flags: /Odtp
;	COMDAT ??9Quaternion@Ogre@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_quat$ = 8						; size = 4
??9Quaternion@Ogre@@QBE_NABV01@@Z PROC			; Ogre::Quaternion::operator!=, COMDAT
; _this$ = ecx

; 105  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 			return !operator==(quat);

	mov	eax, DWORD PTR _quat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8Quaternion@Ogre@@QBE_NABV01@@Z	; Ogre::Quaternion::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 107  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9Quaternion@Ogre@@QBE_NABV01@@Z ENDP			; Ogre::Quaternion::operator!=
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@XZ				; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
;	COMDAT ??0Vector3@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector3@Ogre@@QAE@XZ PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 49   : 		Vector3(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector3@Ogre@@QAE@XZ ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@ABV01@@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0Vector3@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 50   : 		Vector3(const Vector3 &rhs)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		{
; 52   : 			x = rhs.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 53   : 			y = rhs.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 54   : 			z = rhs.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 55   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@MMM@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
??0Vector3@Ogre@@QAE@MMM@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 56   : 		Vector3( float x1, float y1, float z1 ) : x(x1), y(y1), z(z1){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector3@Ogre@@QAE@MMM@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@M@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@Ogre@@QAE@M@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 57   : 		Vector3(float v) : x(v), y(v), z(v){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _v$[ebp]
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@M@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@Ogre@@QAE@PAM@Z			; Ogre::Vector3::Vector3
; Function compile flags: /Odtp
;	COMDAT ??0Vector3@Ogre@@QAE@PAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0Vector3@Ogre@@QAE@PAM@Z PROC				; Ogre::Vector3::Vector3, COMDAT
; _this$ = ecx

; 58   : 		Vector3(float* v) : x(v[0]), y(v[1]), z(v[2]){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector3@Ogre@@QAE@PAM@Z ENDP				; Ogre::Vector3::Vector3
_TEXT	ENDS
PUBLIC	??4Vector3@Ogre@@QAEABV01@ABV01@@Z		; Ogre::Vector3::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Vector3@Ogre@@QAEABV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??4Vector3@Ogre@@QAEABV01@ABV01@@Z PROC			; Ogre::Vector3::operator=, COMDAT
; _this$ = ecx

; 61   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 			x = vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 63   : 			y = vec.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 64   : 			z = vec.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 65   : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 66   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4Vector3@Ogre@@QAEABV01@ABV01@@Z ENDP			; Ogre::Vector3::operator=
_TEXT	ENDS
PUBLIC	??YVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator+=
; Function compile flags: /Odtp
;	COMDAT ??YVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??YVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator+=, COMDAT
; _this$ = ecx

; 68   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 			x += vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 70   : 			y += vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 71   : 			z += vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 72   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??YVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator+=
_TEXT	ENDS
PUBLIC	??ZVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator-=
; Function compile flags: /Odtp
;	COMDAT ??ZVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??ZVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator-=, COMDAT
; _this$ = ecx

; 74   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 			x -= vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 76   : 			y -= vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 77   : 			z -= vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 78   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator-=
_TEXT	ENDS
PUBLIC	??XVector3@Ogre@@QAEXM@Z			; Ogre::Vector3::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XVector3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??XVector3@Ogre@@QAEXM@Z PROC				; Ogre::Vector3::operator*=, COMDAT
; _this$ = ecx

; 81   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 			x *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 83   : 			y *= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 84   : 			z *= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 85   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@Ogre@@QAEXM@Z ENDP				; Ogre::Vector3::operator*=
_TEXT	ENDS
PUBLIC	??XVector3@Ogre@@QAEXABV01@@Z			; Ogre::Vector3::operator*=
; Function compile flags: /Odtp
;	COMDAT ??XVector3@Ogre@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??XVector3@Ogre@@QAEXABV01@@Z PROC			; Ogre::Vector3::operator*=, COMDAT
; _this$ = ecx

; 88   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 			x *= vec.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 90   : 			y *= vec.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 91   : 			z *= vec.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 92   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??XVector3@Ogre@@QAEXABV01@@Z ENDP			; Ogre::Vector3::operator*=
_TEXT	ENDS
PUBLIC	??_0Vector3@Ogre@@QAEXM@Z			; Ogre::Vector3::operator/=
; Function compile flags: /Odtp
;	COMDAT ??_0Vector3@Ogre@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??_0Vector3@Ogre@@QAEXM@Z PROC				; Ogre::Vector3::operator/=, COMDAT
; _this$ = ecx

; 95   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 			x /= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 97   : 			y /= s;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fdiv	DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 98   : 			z /= s;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fdiv	DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 99   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??_0Vector3@Ogre@@QAEXM@Z ENDP				; Ogre::Vector3::operator/=
_TEXT	ENDS
PUBLIC	??BVector3@Ogre@@QAEPAMXZ			; Ogre::Vector3::operator float *
; Function compile flags: /Odtp
;	COMDAT ??BVector3@Ogre@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector3@Ogre@@QAEPAMXZ PROC				; Ogre::Vector3::operator float *, COMDAT
; _this$ = ecx

; 101  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 			return &x;

	mov	eax, DWORD PTR _this$[ebp]

; 103  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVector3@Ogre@@QAEPAMXZ ENDP				; Ogre::Vector3::operator float *
_TEXT	ENDS
PUBLIC	??BVector3@Ogre@@QBEPBMXZ			; Ogre::Vector3::operator float const *
; Function compile flags: /Odtp
;	COMDAT ??BVector3@Ogre@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVector3@Ogre@@QBEPBMXZ PROC				; Ogre::Vector3::operator float const *, COMDAT
; _this$ = ecx

; 105  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 			return &x;

	mov	eax, DWORD PTR _this$[ebp]

; 107  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVector3@Ogre@@QBEPBMXZ ENDP				; Ogre::Vector3::operator float const *
_TEXT	ENDS
PUBLIC	??HVector3@Ogre@@QBE?AV01@XZ			; Ogre::Vector3::operator+
; Function compile flags: /Odtp
;	COMDAT ??HVector3@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??HVector3@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector3::operator+, COMDAT
; _this$ = ecx

; 109  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 111  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??HVector3@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector3::operator+
_TEXT	ENDS
PUBLIC	??GVector3@Ogre@@QBE?AV01@XZ			; Ogre::Vector3::operator-
; Function compile flags: /Odtp
;	COMDAT ??GVector3@Ogre@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??GVector3@Ogre@@QBE?AV01@XZ PROC			; Ogre::Vector3::operator-, COMDAT
; _this$ = ecx

; 113  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 			return Vector3(-x, -y, -z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 115  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??GVector3@Ogre@@QBE?AV01@XZ ENDP			; Ogre::Vector3::operator-
_TEXT	ENDS
PUBLIC	??8Vector3@Ogre@@QBE_NABV01@@Z			; Ogre::Vector3::operator==
; Function compile flags: /Odtp
;	COMDAT ??8Vector3@Ogre@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
_vec$ = 8						; size = 4
??8Vector3@Ogre@@QBE_NABV01@@Z PROC			; Ogre::Vector3::operator==, COMDAT
; _this$ = ecx

; 117  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 			return (x==vec.x && y==vec.y && z==vec.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [eax+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _vec$[ebp]
	fld	DWORD PTR [edx+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv77[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv77[ebp]

; 119  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8Vector3@Ogre@@QBE_NABV01@@Z ENDP			; Ogre::Vector3::operator==
_TEXT	ENDS
PUBLIC	?setElement@Vector3@Ogre@@QAEXMMM@Z		; Ogre::Vector3::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Vector3@Ogre@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
?setElement@Vector3@Ogre@@QAEXMMM@Z PROC		; Ogre::Vector3::setElement, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			x = x1;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR [eax]

; 123  : 			y = y1;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR [ecx+4]

; 124  : 			z = z1;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR [edx+8]

; 125  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setElement@Vector3@Ogre@@QAEXMMM@Z ENDP		; Ogre::Vector3::setElement
_TEXT	ENDS
PUBLIC	?setElement@Vector3@Ogre@@QAEXPAM@Z		; Ogre::Vector3::setElement
; Function compile flags: /Odtp
;	COMDAT ?setElement@Vector3@Ogre@@QAEXPAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?setElement@Vector3@Ogre@@QAEXPAM@Z PROC		; Ogre::Vector3::setElement, COMDAT
; _this$ = ecx

; 127  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 			x = p[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 129  : 			y = p[1];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+4]

; 130  : 			z = p[2];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [ecx+8]

; 131  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?setElement@Vector3@Ogre@@QAEXPAM@Z ENDP		; Ogre::Vector3::setElement
_TEXT	ENDS
PUBLIC	?Sqrt@Ogre@@YAMM@Z				; Ogre::Sqrt
PUBLIC	?length@Vector3@Ogre@@QBEMXZ			; Ogre::Vector3::length
; Function compile flags: /Odtp
;	COMDAT ?length@Vector3@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?length@Vector3@Ogre@@QBEMXZ PROC			; Ogre::Vector3::length, COMDAT
; _this$ = ecx

; 133  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 			return (float)Sqrt(x*x+y*y+z*z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Sqrt@Ogre@@YAMM@Z			; Ogre::Sqrt
	add	esp, 4

; 135  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@Vector3@Ogre@@QBEMXZ ENDP			; Ogre::Vector3::length
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
;	COMDAT ?Sqrt@Ogre@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Sqrt@Ogre@@YAMM@Z PROC					; Ogre::Sqrt, COMDAT

; 59   : 	{

	push	ebp
	mov	ebp, esp

; 60   : 		return (float)sqrt(x);

	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 61   : 	}

	pop	ebp
	ret	0
?Sqrt@Ogre@@YAMM@Z ENDP					; Ogre::Sqrt
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 534  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 423  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?lengthSqr@Vector3@Ogre@@QBEMXZ			; Ogre::Vector3::lengthSqr
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
;	COMDAT ?lengthSqr@Vector3@Ogre@@QBEMXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?lengthSqr@Vector3@Ogre@@QBEMXZ PROC			; Ogre::Vector3::lengthSqr, COMDAT
; _this$ = ecx

; 137  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 			return (x*x+y*y+z*z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]

; 139  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?lengthSqr@Vector3@Ogre@@QBEMXZ ENDP			; Ogre::Vector3::lengthSqr
_TEXT	ENDS
PUBLIC	?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::VertexBuffer::getRTTI
EXTRN	?m_RTTI@VertexBuffer@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::VertexBuffer::m_RTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrerendertypes.h
;	COMDAT ?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::VertexBuffer::getRTTI, COMDAT
; _this$ = ecx

; 223  : 		DECLARE_RTTI_VIRTUAL(VertexBuffer)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@VertexBuffer@Ogre@@2VRuntimeClass@2@B ; Ogre::VertexBuffer::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::VertexBuffer::getRTTI
_TEXT	ENDS
PUBLIC	??_7VertexBuffer@Ogre@@6B@			; Ogre::VertexBuffer::`vftable'
PUBLIC	??0VertexBuffer@Ogre@@QAE@XZ			; Ogre::VertexBuffer::VertexBuffer
PUBLIC	??_R4VertexBuffer@Ogre@@6B@			; Ogre::VertexBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVVertexBuffer@Ogre@@@8			; Ogre::VertexBuffer `RTTI Type Descriptor'
PUBLIC	??_R3VertexBuffer@Ogre@@8			; Ogre::VertexBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VertexBuffer@Ogre@@8			; Ogre::VertexBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VertexBuffer@Ogre@@8		; Ogre::VertexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EVertexBuffer@Ogre@@UAEPAXI@Z		; Ogre::VertexBuffer::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@VertexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VertexBuffer@Ogre@@8 DD FLAT:??_R0?AVVertexBuffer@Ogre@@@8 ; Ogre::VertexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VertexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2VertexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R2VertexBuffer@Ogre@@8 DD FLAT:??_R1A@?0A@EA@VertexBuffer@Ogre@@8 ; Ogre::VertexBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3VertexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R3VertexBuffer@Ogre@@8 DD 00H			; Ogre::VertexBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2VertexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVertexBuffer@Ogre@@@8
_DATA	SEGMENT
??_R0?AVVertexBuffer@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::VertexBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVertexBuffer@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4VertexBuffer@Ogre@@6B@
rdata$r	SEGMENT
??_R4VertexBuffer@Ogre@@6B@ DD 00H			; Ogre::VertexBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVVertexBuffer@Ogre@@@8
	DD	FLAT:??_R3VertexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7VertexBuffer@Ogre@@6B@
CONST	SEGMENT
??_7VertexBuffer@Ogre@@6B@ DD FLAT:??_R4VertexBuffer@Ogre@@6B@ ; Ogre::VertexBuffer::`vftable'
	DD	FLAT:?getRTTI@VertexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EVertexBuffer@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0VertexBuffer@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0VertexBuffer@Ogre@@QAE@XZ$0
__ehfuncinfo$??0VertexBuffer@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0VertexBuffer@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0VertexBuffer@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0VertexBuffer@Ogre@@QAE@XZ PROC			; Ogre::VertexBuffer::VertexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0VertexBuffer@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7VertexBuffer@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0VertexBuffer@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0VertexBuffer@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0VertexBuffer@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0VertexBuffer@Ogre@@QAE@XZ ENDP			; Ogre::VertexBuffer::VertexBuffer
PUBLIC	??1VertexBuffer@Ogre@@UAE@XZ			; Ogre::VertexBuffer::~VertexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1VertexBuffer@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1VertexBuffer@Ogre@@UAE@XZ$0
__ehfuncinfo$??1VertexBuffer@Ogre@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1VertexBuffer@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1VertexBuffer@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1VertexBuffer@Ogre@@UAE@XZ PROC			; Ogre::VertexBuffer::~VertexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1VertexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1VertexBuffer@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??1VertexBuffer@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1VertexBuffer@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1VertexBuffer@Ogre@@UAE@XZ ENDP			; Ogre::VertexBuffer::~VertexBuffer
PUBLIC	??0VertexBuffer@Ogre@@QAE@ABV01@@Z		; Ogre::VertexBuffer::VertexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0VertexBuffer@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0VertexBuffer@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0VertexBuffer@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0VertexBuffer@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0VertexBuffer@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0VertexBuffer@Ogre@@QAE@ABV01@@Z PROC			; Ogre::VertexBuffer::VertexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0VertexBuffer@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7VertexBuffer@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0VertexBuffer@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0VertexBuffer@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0VertexBuffer@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0VertexBuffer@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::VertexBuffer::VertexBuffer
PUBLIC	??4VertexBuffer@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::VertexBuffer::operator=
; Function compile flags: /Odtp
;	COMDAT ??4VertexBuffer@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4VertexBuffer@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::VertexBuffer::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4VertexBuffer@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::VertexBuffer::operator=
_TEXT	ENDS
PUBLIC	??_GVertexBuffer@Ogre@@UAEPAXI@Z		; Ogre::VertexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GVertexBuffer@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GVertexBuffer@Ogre@@UAEPAXI@Z PROC			; Ogre::VertexBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VertexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@10
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@10:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GVertexBuffer@Ogre@@UAEPAXI@Z ENDP			; Ogre::VertexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EVertexBuffer@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EVertexBuffer@Ogre@@UAEPAXI@Z PROC			; Ogre::VertexBuffer::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@10
	push	OFFSET ??1VertexBuffer@Ogre@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@10
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@10:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@10
$LN3@vector@10:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VertexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@10
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@10:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@10:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EVertexBuffer@Ogre@@UAEPAXI@Z ENDP			; Ogre::VertexBuffer::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::IndexBuffer::getRTTI
EXTRN	?m_RTTI@IndexBuffer@Ogre@@2VRuntimeClass@2@B:BYTE ; Ogre::IndexBuffer::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::IndexBuffer::getRTTI, COMDAT
; _this$ = ecx

; 230  : 		DECLARE_RTTI_VIRTUAL(IndexBuffer)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@IndexBuffer@Ogre@@2VRuntimeClass@2@B ; Ogre::IndexBuffer::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::IndexBuffer::getRTTI
_TEXT	ENDS
PUBLIC	?setVertexRange@IndexBuffer@Ogre@@QAEXII@Z	; Ogre::IndexBuffer::setVertexRange
; Function compile flags: /Odtp
;	COMDAT ?setVertexRange@IndexBuffer@Ogre@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_num$ = 12						; size = 4
?setVertexRange@IndexBuffer@Ogre@@QAEXII@Z PROC		; Ogre::IndexBuffer::setVertexRange, COMDAT
; _this$ = ecx

; 235  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 236  : 			m_RefVertStart = start;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 237  : 			m_RefVertNum = num;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _num$[ebp]
	mov	DWORD PTR [edx+20], eax

; 238  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?setVertexRange@IndexBuffer@Ogre@@QAEXII@Z ENDP		; Ogre::IndexBuffer::setVertexRange
_TEXT	ENDS
PUBLIC	??_7IndexBuffer@Ogre@@6B@			; Ogre::IndexBuffer::`vftable'
PUBLIC	??0IndexBuffer@Ogre@@QAE@XZ			; Ogre::IndexBuffer::IndexBuffer
PUBLIC	??_R4IndexBuffer@Ogre@@6B@			; Ogre::IndexBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVIndexBuffer@Ogre@@@8			; Ogre::IndexBuffer `RTTI Type Descriptor'
PUBLIC	??_R3IndexBuffer@Ogre@@8			; Ogre::IndexBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IndexBuffer@Ogre@@8			; Ogre::IndexBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IndexBuffer@Ogre@@8		; Ogre::IndexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EIndexBuffer@Ogre@@UAEPAXI@Z			; Ogre::IndexBuffer::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@IndexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IndexBuffer@Ogre@@8 DD FLAT:??_R0?AVIndexBuffer@Ogre@@@8 ; Ogre::IndexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IndexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2IndexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R2IndexBuffer@Ogre@@8 DD FLAT:??_R1A@?0A@EA@IndexBuffer@Ogre@@8 ; Ogre::IndexBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3IndexBuffer@Ogre@@8
rdata$r	SEGMENT
??_R3IndexBuffer@Ogre@@8 DD 00H				; Ogre::IndexBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2IndexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVIndexBuffer@Ogre@@@8
_DATA	SEGMENT
??_R0?AVIndexBuffer@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::IndexBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVIndexBuffer@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4IndexBuffer@Ogre@@6B@
rdata$r	SEGMENT
??_R4IndexBuffer@Ogre@@6B@ DD 00H			; Ogre::IndexBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVIndexBuffer@Ogre@@@8
	DD	FLAT:??_R3IndexBuffer@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7IndexBuffer@Ogre@@6B@
CONST	SEGMENT
??_7IndexBuffer@Ogre@@6B@ DD FLAT:??_R4IndexBuffer@Ogre@@6B@ ; Ogre::IndexBuffer::`vftable'
	DD	FLAT:?getRTTI@IndexBuffer@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EIndexBuffer@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0IndexBuffer@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0IndexBuffer@Ogre@@QAE@XZ$0
__ehfuncinfo$??0IndexBuffer@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0IndexBuffer@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0IndexBuffer@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0IndexBuffer@Ogre@@QAE@XZ PROC			; Ogre::IndexBuffer::IndexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0IndexBuffer@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IndexBuffer@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0IndexBuffer@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0IndexBuffer@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0IndexBuffer@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0IndexBuffer@Ogre@@QAE@XZ ENDP			; Ogre::IndexBuffer::IndexBuffer
PUBLIC	??1IndexBuffer@Ogre@@UAE@XZ			; Ogre::IndexBuffer::~IndexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1IndexBuffer@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1IndexBuffer@Ogre@@UAE@XZ$0
__ehfuncinfo$??1IndexBuffer@Ogre@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1IndexBuffer@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1IndexBuffer@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1IndexBuffer@Ogre@@UAE@XZ PROC			; Ogre::IndexBuffer::~IndexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1IndexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1IndexBuffer@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??1IndexBuffer@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1IndexBuffer@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1IndexBuffer@Ogre@@UAE@XZ ENDP			; Ogre::IndexBuffer::~IndexBuffer
PUBLIC	??0IndexBuffer@Ogre@@QAE@ABV01@@Z		; Ogre::IndexBuffer::IndexBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0IndexBuffer@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0IndexBuffer@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0IndexBuffer@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0IndexBuffer@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0IndexBuffer@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0IndexBuffer@Ogre@@QAE@ABV01@@Z PROC			; Ogre::IndexBuffer::IndexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0IndexBuffer@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7IndexBuffer@Ogre@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0IndexBuffer@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0IndexBuffer@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0IndexBuffer@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0IndexBuffer@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::IndexBuffer::IndexBuffer
PUBLIC	??4IndexBuffer@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::IndexBuffer::operator=
; Function compile flags: /Odtp
;	COMDAT ??4IndexBuffer@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4IndexBuffer@Ogre@@QAEAAV01@ABV01@@Z PROC		; Ogre::IndexBuffer::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4IndexBuffer@Ogre@@QAEAAV01@ABV01@@Z ENDP		; Ogre::IndexBuffer::operator=
_TEXT	ENDS
PUBLIC	??_GIndexBuffer@Ogre@@UAEPAXI@Z			; Ogre::IndexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GIndexBuffer@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GIndexBuffer@Ogre@@UAEPAXI@Z PROC			; Ogre::IndexBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1IndexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@11
	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@11:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GIndexBuffer@Ogre@@UAEPAXI@Z ENDP			; Ogre::IndexBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EIndexBuffer@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EIndexBuffer@Ogre@@UAEPAXI@Z PROC			; Ogre::IndexBuffer::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@11
	push	OFFSET ??1IndexBuffer@Ogre@@UAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@11
	push	24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@11:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@11
$LN3@vector@11:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1IndexBuffer@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@11
	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@11:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@11:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EIndexBuffer@Ogre@@UAEPAXI@Z ENDP			; Ogre::IndexBuffer::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ	; Ogre::Texture::getRTTI
EXTRN	?m_RTTI@Texture@Ogre@@2VRuntimeClass@2@B:BYTE	; Ogre::Texture::m_RTTI
; Function compile flags: /Odtp
;	COMDAT ?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ PROC	; Ogre::Texture::getRTTI, COMDAT
; _this$ = ecx

; 248  : 		DECLARE_RTTI_VIRTUAL(Texture)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@Texture@Ogre@@2VRuntimeClass@2@B ; Ogre::Texture::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP	; Ogre::Texture::getRTTI
_TEXT	ENDS
PUBLIC	??_7Texture@Ogre@@6B@				; Ogre::Texture::`vftable'
PUBLIC	??1Texture@Ogre@@MAE@XZ				; Ogre::Texture::~Texture
PUBLIC	??_R4Texture@Ogre@@6B@				; Ogre::Texture::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTexture@Ogre@@@8			; Ogre::Texture `RTTI Type Descriptor'
PUBLIC	??_R3Texture@Ogre@@8				; Ogre::Texture::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Texture@Ogre@@8				; Ogre::Texture::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Texture@Ogre@@8			; Ogre::Texture::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_ETexture@Ogre@@MAEPAXI@Z			; Ogre::Texture::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@Texture@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Texture@Ogre@@8 DD FLAT:??_R0?AVTexture@Ogre@@@8 ; Ogre::Texture::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Texture@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2Texture@Ogre@@8
rdata$r	SEGMENT
??_R2Texture@Ogre@@8 DD FLAT:??_R1A@?0A@EA@Texture@Ogre@@8 ; Ogre::Texture::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3Texture@Ogre@@8
rdata$r	SEGMENT
??_R3Texture@Ogre@@8 DD 00H				; Ogre::Texture::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2Texture@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTexture@Ogre@@@8
_DATA	SEGMENT
??_R0?AVTexture@Ogre@@@8 DD FLAT:??_7type_info@@6B@	; Ogre::Texture `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTexture@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Texture@Ogre@@6B@
rdata$r	SEGMENT
??_R4Texture@Ogre@@6B@ DD 00H				; Ogre::Texture::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTexture@Ogre@@@8
	DD	FLAT:??_R3Texture@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7Texture@Ogre@@6B@
CONST	SEGMENT
??_7Texture@Ogre@@6B@ DD FLAT:??_R4Texture@Ogre@@6B@	; Ogre::Texture::`vftable'
	DD	FLAT:?getRTTI@Texture@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseObject@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_ETexture@Ogre@@MAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Texture@Ogre@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Texture@Ogre@@MAE@XZ$0
__ehfuncinfo$??1Texture@Ogre@@MAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Texture@Ogre@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1Texture@Ogre@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Texture@Ogre@@MAE@XZ PROC				; Ogre::Texture::~Texture, COMDAT
; _this$ = ecx

; 257  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Texture@Ogre@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Texture@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 258  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Texture@Ogre@@MAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??1Texture@Ogre@@MAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Texture@Ogre@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Texture@Ogre@@MAE@XZ ENDP				; Ogre::Texture::~Texture
PUBLIC	??0Texture@Ogre@@QAE@XZ				; Ogre::Texture::Texture
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Texture@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Texture@Ogre@@QAE@XZ$0
__ehfuncinfo$??0Texture@Ogre@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Texture@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Texture@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Texture@Ogre@@QAE@XZ PROC				; Ogre::Texture::Texture, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Texture@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Texture@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Texture@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0Texture@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Texture@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Texture@Ogre@@QAE@XZ ENDP				; Ogre::Texture::Texture
PUBLIC	??0Texture@Ogre@@QAE@ABV01@@Z			; Ogre::Texture::Texture
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Texture@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Texture@Ogre@@QAE@ABV01@@Z$0
__ehfuncinfo$??0Texture@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Texture@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Texture@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Texture@Ogre@@QAE@ABV01@@Z PROC			; Ogre::Texture::Texture, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Texture@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7Texture@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Texture@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__ehhandler$??0Texture@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Texture@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Texture@Ogre@@QAE@ABV01@@Z ENDP			; Ogre::Texture::Texture
PUBLIC	??4Texture@Ogre@@QAEAAV01@ABV01@@Z		; Ogre::Texture::operator=
; Function compile flags: /Odtp
;	COMDAT ??4Texture@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Texture@Ogre@@QAEAAV01@ABV01@@Z PROC			; Ogre::Texture::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Texture@Ogre@@QAEAAV01@ABV01@@Z ENDP			; Ogre::Texture::operator=
_TEXT	ENDS
PUBLIC	??_GTexture@Ogre@@MAEPAXI@Z			; Ogre::Texture::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GTexture@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTexture@Ogre@@MAEPAXI@Z PROC			; Ogre::Texture::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Texture@Ogre@@MAE@XZ			; Ogre::Texture::~Texture
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@12
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@12:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTexture@Ogre@@MAEPAXI@Z ENDP			; Ogre::Texture::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_ETexture@Ogre@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ETexture@Ogre@@MAEPAXI@Z PROC			; Ogre::Texture::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@12
	push	OFFSET ??1Texture@Ogre@@MAE@XZ		; Ogre::Texture::~Texture
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@12
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@12:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@12
$LN3@vector@12:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Texture@Ogre@@MAE@XZ			; Ogre::Texture::~Texture
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@12
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@12:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@12:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ETexture@Ogre@@MAEPAXI@Z ENDP			; Ogre::Texture::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getRTTI@MaterialParamTrack@Ogre@@UBEPBVRuntimeClass@2@XZ ; Ogre::MaterialParamTrack::getRTTI
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreanimtrackmaterialparam.h
;	COMDAT ?getRTTI@MaterialParamTrack@Ogre@@UBEPBVRuntimeClass@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRTTI@MaterialParamTrack@Ogre@@UBEPBVRuntimeClass@2@XZ PROC ; Ogre::MaterialParamTrack::getRTTI, COMDAT
; _this$ = ecx

; 14   : 		DECLARE_RTTI(MaterialParamTrack)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?m_RTTI@MaterialParamTrack@Ogre@@2VRuntimeClass@2@B ; Ogre::MaterialParamTrack::m_RTTI
	mov	esp, ebp
	pop	ebp
	ret	0
?getRTTI@MaterialParamTrack@Ogre@@UBEPBVRuntimeClass@2@XZ ENDP ; Ogre::MaterialParamTrack::getRTTI
_TEXT	ENDS
PUBLIC	??0MaterialParamTrack@Ogre@@QAE@XZ		; Ogre::MaterialParamTrack::MaterialParamTrack
PUBLIC	?newObject@MaterialParamTrack@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::MaterialParamTrack::newObject
EXTRN	??2MemoryDelegation@Ogre@@SAPAXI@Z:PROC		; Ogre::MemoryDelegation::operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newObject@MaterialParamTrack@Ogre@@SAPAVBaseObject@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newObject@MaterialParamTrack@Ogre@@SAPAVBaseObject@2@XZ$0
__ehfuncinfo$?newObject@MaterialParamTrack@Ogre@@SAPAVBaseObject@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newObject@MaterialParamTrack@Ogre@@SAPAVBaseObject@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?newObject@MaterialParamTrack@Ogre@@SAPAVBaseObject@2@XZ
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T70405 = -20						; size = 4
$T70404 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?newObject@MaterialParamTrack@Ogre@@SAPAVBaseObject@2@XZ PROC ; Ogre::MaterialParamTrack::newObject, COMDAT

; 14   : 		DECLARE_RTTI(MaterialParamTrack)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newObject@MaterialParamTrack@Ogre@@SAPAVBaseObject@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	36					; 00000024H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T70405[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T70405[ebp], 0
	je	SHORT $LN3@newObject
	mov	ecx, DWORD PTR $T70405[ebp]
	call	??0MaterialParamTrack@Ogre@@QAE@XZ	; Ogre::MaterialParamTrack::MaterialParamTrack
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@newObject
$LN3@newObject:
	mov	DWORD PTR tv75[ebp], 0
$LN4@newObject:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T70404[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T70404[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newObject@MaterialParamTrack@Ogre@@SAPAVBaseObject@2@XZ$0:
	push	36					; 00000024H
	mov	eax, DWORD PTR $T70405[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?newObject@MaterialParamTrack@Ogre@@SAPAVBaseObject@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newObject@MaterialParamTrack@Ogre@@SAPAVBaseObject@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?newObject@MaterialParamTrack@Ogre@@SAPAVBaseObject@2@XZ ENDP ; Ogre::MaterialParamTrack::newObject
PUBLIC	??_7MaterialParamTrack@Ogre@@6B@		; Ogre::MaterialParamTrack::`vftable'
PUBLIC	??0MaterialParamTrack@Ogre@@QAE@ABV01@@Z	; Ogre::MaterialParamTrack::MaterialParamTrack
PUBLIC	??_R4MaterialParamTrack@Ogre@@6B@		; Ogre::MaterialParamTrack::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMaterialParamTrack@Ogre@@@8		; Ogre::MaterialParamTrack `RTTI Type Descriptor'
PUBLIC	??_R3MaterialParamTrack@Ogre@@8			; Ogre::MaterialParamTrack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MaterialParamTrack@Ogre@@8			; Ogre::MaterialParamTrack::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MaterialParamTrack@Ogre@@8	; Ogre::MaterialParamTrack::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?_serialize@MaterialParamTrack@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::MaterialParamTrack::_serialize
PUBLIC	??_EMaterialParamTrack@Ogre@@UAEPAXI@Z		; Ogre::MaterialParamTrack::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@MaterialParamTrack@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MaterialParamTrack@Ogre@@8 DD FLAT:??_R0?AVMaterialParamTrack@Ogre@@@8 ; Ogre::MaterialParamTrack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MaterialParamTrack@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2MaterialParamTrack@Ogre@@8
rdata$r	SEGMENT
??_R2MaterialParamTrack@Ogre@@8 DD FLAT:??_R1A@?0A@EA@MaterialParamTrack@Ogre@@8 ; Ogre::MaterialParamTrack::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3MaterialParamTrack@Ogre@@8
rdata$r	SEGMENT
??_R3MaterialParamTrack@Ogre@@8 DD 00H			; Ogre::MaterialParamTrack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2MaterialParamTrack@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMaterialParamTrack@Ogre@@@8
_DATA	SEGMENT
??_R0?AVMaterialParamTrack@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::MaterialParamTrack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMaterialParamTrack@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MaterialParamTrack@Ogre@@6B@
rdata$r	SEGMENT
??_R4MaterialParamTrack@Ogre@@6B@ DD 00H		; Ogre::MaterialParamTrack::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMaterialParamTrack@Ogre@@@8
	DD	FLAT:??_R3MaterialParamTrack@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7MaterialParamTrack@Ogre@@6B@
CONST	SEGMENT
??_7MaterialParamTrack@Ogre@@6B@ DD FLAT:??_R4MaterialParamTrack@Ogre@@6B@ ; Ogre::MaterialParamTrack::`vftable'
	DD	FLAT:?getRTTI@MaterialParamTrack@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@Resource@Ogre@@UAEXXZ
	DD	FLAT:?addRef@Resource@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@Resource@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@MaterialParamTrack@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EMaterialParamTrack@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0MaterialParamTrack@Ogre@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MaterialParamTrack@Ogre@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0MaterialParamTrack@Ogre@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0MaterialParamTrack@Ogre@@QAE@ABV01@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0MaterialParamTrack@Ogre@@QAE@ABV01@@Z$3
__ehfuncinfo$??0MaterialParamTrack@Ogre@@QAE@ABV01@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0MaterialParamTrack@Ogre@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0MaterialParamTrack@Ogre@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0MaterialParamTrack@Ogre@@QAE@ABV01@@Z PROC		; Ogre::MaterialParamTrack::MaterialParamTrack, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MaterialParamTrack@Ogre@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7MaterialParamTrack@Ogre@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0FixedString@Ogre@@QAE@ABV01@@Z	; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0FixedString@Ogre@@QAE@ABV01@@Z	; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0FixedString@Ogre@@QAE@ABV01@@Z	; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+28], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+32], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MaterialParamTrack@Ogre@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??0MaterialParamTrack@Ogre@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__unwindfunclet$??0MaterialParamTrack@Ogre@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__unwindfunclet$??0MaterialParamTrack@Ogre@@QAE@ABV01@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0MaterialParamTrack@Ogre@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0MaterialParamTrack@Ogre@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MaterialParamTrack@Ogre@@QAE@ABV01@@Z ENDP		; Ogre::MaterialParamTrack::MaterialParamTrack
PUBLIC	??4MaterialParamTrack@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::MaterialParamTrack::operator=
; Function compile flags: /Odtp
;	COMDAT ??4MaterialParamTrack@Ogre@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4MaterialParamTrack@Ogre@@QAEAAV01@ABV01@@Z PROC	; Ogre::MaterialParamTrack::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Resource@Ogre@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4FixedString@Ogre@@QAEAAV01@ABV01@@Z	; Ogre::FixedString::operator=
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4MaterialParamTrack@Ogre@@QAEAAV01@ABV01@@Z ENDP	; Ogre::MaterialParamTrack::operator=
_TEXT	ENDS
PUBLIC	??1MaterialParamTrack@Ogre@@UAE@XZ		; Ogre::MaterialParamTrack::~MaterialParamTrack
PUBLIC	??_GMaterialParamTrack@Ogre@@UAEPAXI@Z		; Ogre::MaterialParamTrack::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_GMaterialParamTrack@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMaterialParamTrack@Ogre@@UAEPAXI@Z PROC		; Ogre::MaterialParamTrack::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MaterialParamTrack@Ogre@@UAE@XZ	; Ogre::MaterialParamTrack::~MaterialParamTrack
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@13
	push	36					; 00000024H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@13:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMaterialParamTrack@Ogre@@UAEPAXI@Z ENDP		; Ogre::MaterialParamTrack::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_EMaterialParamTrack@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EMaterialParamTrack@Ogre@@UAEPAXI@Z PROC		; Ogre::MaterialParamTrack::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@13
	push	OFFSET ??1MaterialParamTrack@Ogre@@UAE@XZ ; Ogre::MaterialParamTrack::~MaterialParamTrack
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	36					; 00000024H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@13
	push	36					; 00000024H
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_VMemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete[]
	add	esp, 8
$LN2@vector@13:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@13
$LN3@vector@13:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MaterialParamTrack@Ogre@@UAE@XZ	; Ogre::MaterialParamTrack::~MaterialParamTrack
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@13
	push	36					; 00000024H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@vector@13:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@13:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EMaterialParamTrack@Ogre@@UAEPAXI@Z ENDP		; Ogre::MaterialParamTrack::`vector deleting destructor'
_TEXT	ENDS
xdata$x	SEGMENT
__unwindtable$??0MaterialParamTrack@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MaterialParamTrack@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0MaterialParamTrack@Ogre@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0MaterialParamTrack@Ogre@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0MaterialParamTrack@Ogre@@QAE@XZ$3
__ehfuncinfo$??0MaterialParamTrack@Ogre@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0MaterialParamTrack@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreanimtrackmaterialparam.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0MaterialParamTrack@Ogre@@QAE@XZ PROC			; Ogre::MaterialParamTrack::MaterialParamTrack
; _this$ = ecx

; 9    : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MaterialParamTrack@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@Ogre@@IAE@XZ		; Ogre::Resource::Resource
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MaterialParamTrack@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0

; 10   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0MaterialParamTrack@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??0MaterialParamTrack@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__unwindfunclet$??0MaterialParamTrack@Ogre@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__unwindfunclet$??0MaterialParamTrack@Ogre@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??0MaterialParamTrack@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0MaterialParamTrack@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MaterialParamTrack@Ogre@@QAE@XZ ENDP			; Ogre::MaterialParamTrack::MaterialParamTrack
xdata$x	SEGMENT
__unwindtable$??1MaterialParamTrack@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1MaterialParamTrack@Ogre@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1MaterialParamTrack@Ogre@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1MaterialParamTrack@Ogre@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1MaterialParamTrack@Ogre@@UAE@XZ$3
__ehfuncinfo$??1MaterialParamTrack@Ogre@@UAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1MaterialParamTrack@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv91 = -28						; size = 4
_this$ = -24						; size = 4
$T70445 = -20						; size = 4
$T70444 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1MaterialParamTrack@Ogre@@UAE@XZ PROC			; Ogre::MaterialParamTrack::~MaterialParamTrack
; _this$ = ecx

; 13   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1MaterialParamTrack@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MaterialParamTrack@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 3

; 14   : 		delete m_pKeyframes;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR $T70445[ebp], edx
	mov	eax, DWORD PTR $T70445[ebp]
	mov	DWORD PTR $T70444[ebp], eax
	cmp	DWORD PTR $T70444[ebp], 0
	je	SHORT $LN3@MaterialPa
	push	1
	mov	ecx, DWORD PTR $T70444[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T70444[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN1@MaterialPa
$LN3@MaterialPa:
	mov	DWORD PTR tv91[ebp], 0
$LN1@MaterialPa:

; 15   : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1MaterialParamTrack@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Resource@Ogre@@MAE@XZ		; Ogre::Resource::~Resource
__unwindfunclet$??1MaterialParamTrack@Ogre@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__unwindfunclet$??1MaterialParamTrack@Ogre@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__unwindfunclet$??1MaterialParamTrack@Ogre@@UAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1FixedString@Ogre@@QAE@XZ		; Ogre::FixedString::~FixedString
__ehhandler$??1MaterialParamTrack@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1MaterialParamTrack@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1MaterialParamTrack@Ogre@@UAE@XZ ENDP			; Ogre::MaterialParamTrack::~MaterialParamTrack
PUBLIC	??0?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ	; Ogre::KeyFrameArray<Ogre::Vector3>::KeyFrameArray<Ogre::Vector3>
PUBLIC	??0?$KeyFrameArray@M@Ogre@@QAE@XZ		; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
EXTRN	??6Archive@Ogre@@QAEAAV01@AAVFixedString@1@@Z:PROC ; Ogre::Archive::operator<<
xdata$x	SEGMENT
__unwindtable$?_serialize@MaterialParamTrack@Ogre@@UAEXAAVArchive@2@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_serialize@MaterialParamTrack@Ogre@@UAEXAAVArchive@2@H@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_serialize@MaterialParamTrack@Ogre@@UAEXAAVArchive@2@H@Z$1
__ehfuncinfo$?_serialize@MaterialParamTrack@Ogre@@UAEXAAVArchive@2@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_serialize@MaterialParamTrack@Ogre@@UAEXAAVArchive@2@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv141 = -40						; size = 4
tv94 = -36						; size = 4
_this$ = -32						; size = 4
$T70462 = -28						; size = 4
$T70461 = -24						; size = 4
$T70458 = -20						; size = 4
$T70457 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@MaterialParamTrack@Ogre@@UAEXAAVArchive@2@H@Z PROC ; Ogre::MaterialParamTrack::_serialize
; _this$ = ecx

; 18   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_serialize@MaterialParamTrack@Ogre@@UAEXAAVArchive@2@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 19   : 		ar << m_MeshName;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??6Archive@Ogre@@QAEAAV01@AAVFixedString@1@@Z ; Ogre::Archive::operator<<

; 20   : 		ar << m_MtlName;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??6Archive@Ogre@@QAEAAV01@AAVFixedString@1@@Z ; Ogre::Archive::operator<<

; 21   : 		ar << m_ParamName;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??6Archive@Ogre@@QAEAAV01@AAVFixedString@1@@Z ; Ogre::Archive::operator<<

; 22   : 		ar << m_KeyType;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??6Archive@Ogre@@QAEAAV01@AAH@Z		; Ogre::Archive::operator<<

; 23   : 
; 24   : 		if(ar.isLoading())

	mov	ecx, DWORD PTR _ar$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	ecx, al
	test	ecx, ecx
	je	$LN5@serialize@2

; 25   : 		{
; 26   : 			if(m_KeyType == SPT_FLOAT) m_pKeyframes = new KeyFrameArray<float>;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+28], 0
	jne	SHORT $LN4@serialize@2
	push	88					; 00000058H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T70458[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T70458[ebp], 0
	je	SHORT $LN8@serialize@2
	mov	ecx, DWORD PTR $T70458[ebp]
	call	??0?$KeyFrameArray@M@Ogre@@QAE@XZ	; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN9@serialize@2
$LN8@serialize@2:
	mov	DWORD PTR tv94[ebp], 0
$LN9@serialize@2:
	mov	eax, DWORD PTR tv94[ebp]
	mov	DWORD PTR $T70457[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T70457[ebp]
	mov	DWORD PTR [ecx+32], edx
	jmp	SHORT $LN5@serialize@2
$LN4@serialize@2:

; 27   : 			else if(m_KeyType == SPT_FLOAT3) m_pKeyframes = new KeyFrameArray<Vector3>;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 2
	jne	SHORT $LN5@serialize@2
	push	88					; 00000058H
	call	??2MemoryDelegation@Ogre@@SAPAXI@Z	; Ogre::MemoryDelegation::operator new
	add	esp, 4
	mov	DWORD PTR $T70462[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T70462[ebp], 0
	je	SHORT $LN10@serialize@2
	mov	ecx, DWORD PTR $T70462[ebp]
	call	??0?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ ; Ogre::KeyFrameArray<Ogre::Vector3>::KeyFrameArray<Ogre::Vector3>
	mov	DWORD PTR tv141[ebp], eax
	jmp	SHORT $LN11@serialize@2
$LN10@serialize@2:
	mov	DWORD PTR tv141[ebp], 0
$LN11@serialize@2:
	mov	ecx, DWORD PTR tv141[ebp]
	mov	DWORD PTR $T70461[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T70461[ebp]
	mov	DWORD PTR [edx+32], eax
$LN5@serialize@2:

; 28   : 			else
; 29   : 			{
; 30   : 				assert(0);
; 31   : 			}
; 32   : 		}
; 33   : 
; 34   : 		assert(m_pKeyframes);
; 35   : 		m_pKeyframes->_serialize(ar, version);

	mov	ecx, DWORD PTR _version$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ar$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+16]
	call	eax

; 36   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?_serialize@MaterialParamTrack@Ogre@@UAEXAAVArchive@2@H@Z$0:
	push	88					; 00000058H
	mov	eax, DWORD PTR $T70458[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?_serialize@MaterialParamTrack@Ogre@@UAEXAAVArchive@2@H@Z$1:
	push	88					; 00000058H
	mov	eax, DWORD PTR $T70462[ebp]
	push	eax
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
	ret	0
__ehhandler$?_serialize@MaterialParamTrack@Ogre@@UAEXAAVArchive@2@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_serialize@MaterialParamTrack@Ogre@@UAEXAAVArchive@2@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_serialize@MaterialParamTrack@Ogre@@UAEXAAVArchive@2@H@Z ENDP ; Ogre::MaterialParamTrack::_serialize
PUBLIC	??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
PUBLIC	??1BaseKeyFrameArray@Ogre@@UAE@XZ		; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
PUBLIC	??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
PUBLIC	??_7?$KeyFrameArray@M@Ogre@@6B@			; Ogre::KeyFrameArray<float>::`vftable'
PUBLIC	??0BaseKeyFrameArray@Ogre@@QAE@XZ		; Ogre::BaseKeyFrameArray::BaseKeyFrameArray
PUBLIC	??_R4?$KeyFrameArray@M@Ogre@@6B@		; Ogre::KeyFrameArray<float>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$KeyFrameArray@M@Ogre@@@8		; Ogre::KeyFrameArray<float> `RTTI Type Descriptor'
PUBLIC	??_R3?$KeyFrameArray@M@Ogre@@8			; Ogre::KeyFrameArray<float>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$KeyFrameArray@M@Ogre@@8			; Ogre::KeyFrameArray<float>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$KeyFrameArray@M@Ogre@@8		; Ogre::KeyFrameArray<float>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@BaseKeyFrameArray@Ogre@@8		; Ogre::BaseKeyFrameArray::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVBaseKeyFrameArray@Ogre@@@8		; Ogre::BaseKeyFrameArray `RTTI Type Descriptor'
PUBLIC	??_R3BaseKeyFrameArray@Ogre@@8			; Ogre::BaseKeyFrameArray::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BaseKeyFrameArray@Ogre@@8			; Ogre::BaseKeyFrameArray::`RTTI Base Class Array'
PUBLIC	?_serialize@?$KeyFrameArray@M@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::KeyFrameArray<float>::_serialize
PUBLIC	?getNumKey@?$KeyFrameArray@M@Ogre@@UAEIXZ	; Ogre::KeyFrameArray<float>::getNumKey
PUBLIC	?getValue@?$KeyFrameArray@M@Ogre@@UAEXHIPAX@Z	; Ogre::KeyFrameArray<float>::getValue
EXTRN	??_E?$KeyFrameArray@M@Ogre@@UAEPAXI@Z:PROC	; Ogre::KeyFrameArray<float>::`vector deleting destructor'
;	COMDAT ??_R2BaseKeyFrameArray@Ogre@@8
; File i:\svnroot\client\ogremain\ogrekeyframearray.h
rdata$r	SEGMENT
??_R2BaseKeyFrameArray@Ogre@@8 DD FLAT:??_R1A@?0A@EA@BaseKeyFrameArray@Ogre@@8 ; Ogre::BaseKeyFrameArray::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3BaseKeyFrameArray@Ogre@@8
rdata$r	SEGMENT
??_R3BaseKeyFrameArray@Ogre@@8 DD 00H			; Ogre::BaseKeyFrameArray::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2BaseKeyFrameArray@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBaseKeyFrameArray@Ogre@@@8
_DATA	SEGMENT
??_R0?AVBaseKeyFrameArray@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::BaseKeyFrameArray `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBaseKeyFrameArray@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@BaseKeyFrameArray@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BaseKeyFrameArray@Ogre@@8 DD FLAT:??_R0?AVBaseKeyFrameArray@Ogre@@@8 ; Ogre::BaseKeyFrameArray::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BaseKeyFrameArray@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$KeyFrameArray@M@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$KeyFrameArray@M@Ogre@@8 DD FLAT:??_R0?AV?$KeyFrameArray@M@Ogre@@@8 ; Ogre::KeyFrameArray<float>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$KeyFrameArray@M@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2?$KeyFrameArray@M@Ogre@@8
rdata$r	SEGMENT
??_R2?$KeyFrameArray@M@Ogre@@8 DD FLAT:??_R1A@?0A@EA@?$KeyFrameArray@M@Ogre@@8 ; Ogre::KeyFrameArray<float>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseKeyFrameArray@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3?$KeyFrameArray@M@Ogre@@8
rdata$r	SEGMENT
??_R3?$KeyFrameArray@M@Ogre@@8 DD 00H			; Ogre::KeyFrameArray<float>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$KeyFrameArray@M@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$KeyFrameArray@M@Ogre@@@8
_DATA	SEGMENT
??_R0?AV?$KeyFrameArray@M@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::KeyFrameArray<float> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$KeyFrameArray@M@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$KeyFrameArray@M@Ogre@@6B@
rdata$r	SEGMENT
??_R4?$KeyFrameArray@M@Ogre@@6B@ DD 00H			; Ogre::KeyFrameArray<float>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$KeyFrameArray@M@Ogre@@@8
	DD	FLAT:??_R3?$KeyFrameArray@M@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7?$KeyFrameArray@M@Ogre@@6B@
CONST	SEGMENT
??_7?$KeyFrameArray@M@Ogre@@6B@ DD FLAT:??_R4?$KeyFrameArray@M@Ogre@@6B@ ; Ogre::KeyFrameArray<float>::`vftable'
	DD	FLAT:?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@?$KeyFrameArray@M@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_E?$KeyFrameArray@M@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:?getNumKey@?$KeyFrameArray@M@Ogre@@UAEIXZ
	DD	FLAT:?getValue@?$KeyFrameArray@M@Ogre@@UAEXHIPAX@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$KeyFrameArray@M@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$KeyFrameArray@M@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$KeyFrameArray@M@Ogre@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$KeyFrameArray@M@Ogre@@QAE@XZ$2
__ehfuncinfo$??0?$KeyFrameArray@M@Ogre@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$KeyFrameArray@M@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$KeyFrameArray@M@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$KeyFrameArray@M@Ogre@@QAE@XZ PROC			; Ogre::KeyFrameArray<float>::KeyFrameArray<float>, COMDAT
; _this$ = ecx

; 90   : 		KeyFrameArray() : m_Type(INTERPOL_LINEAR){}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$KeyFrameArray@M@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseKeyFrameArray@Ogre@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$KeyFrameArray@M@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$KeyFrameArray@M@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseKeyFrameArray@Ogre@@UAE@XZ	; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
__unwindfunclet$??0?$KeyFrameArray@M@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
__unwindfunclet$??0?$KeyFrameArray@M@Ogre@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
__ehhandler$??0?$KeyFrameArray@M@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$KeyFrameArray@M@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$KeyFrameArray@M@Ogre@@QAE@XZ ENDP			; Ogre::KeyFrameArray<float>::KeyFrameArray<float>
PUBLIC	??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
PUBLIC	??_7BaseKeyFrameArray@Ogre@@6B@			; Ogre::BaseKeyFrameArray::`vftable'
PUBLIC	??_R4BaseKeyFrameArray@Ogre@@6B@		; Ogre::BaseKeyFrameArray::`RTTI Complete Object Locator'
PUBLIC	?_serialize@BaseKeyFrameArray@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::BaseKeyFrameArray::_serialize
EXTRN	??_EBaseKeyFrameArray@Ogre@@UAEPAXI@Z:PROC	; Ogre::BaseKeyFrameArray::`vector deleting destructor'
;	COMDAT ??_R4BaseKeyFrameArray@Ogre@@6B@
rdata$r	SEGMENT
??_R4BaseKeyFrameArray@Ogre@@6B@ DD 00H			; Ogre::BaseKeyFrameArray::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBaseKeyFrameArray@Ogre@@@8
	DD	FLAT:??_R3BaseKeyFrameArray@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7BaseKeyFrameArray@Ogre@@6B@
CONST	SEGMENT
??_7BaseKeyFrameArray@Ogre@@6B@ DD FLAT:??_R4BaseKeyFrameArray@Ogre@@6B@ ; Ogre::BaseKeyFrameArray::`vftable'
	DD	FLAT:?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@BaseKeyFrameArray@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_EBaseKeyFrameArray@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1BaseKeyFrameArray@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BaseKeyFrameArray@Ogre@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1BaseKeyFrameArray@Ogre@@UAE@XZ$1
__ehfuncinfo$??1BaseKeyFrameArray@Ogre@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1BaseKeyFrameArray@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1BaseKeyFrameArray@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BaseKeyFrameArray@Ogre@@UAE@XZ PROC			; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray, COMDAT
; _this$ = ecx

; 57   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1BaseKeyFrameArray@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseKeyFrameArray@Ogre@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 58   : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1BaseKeyFrameArray@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??1BaseKeyFrameArray@Ogre@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
__ehhandler$??1BaseKeyFrameArray@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1BaseKeyFrameArray@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1BaseKeyFrameArray@Ogre@@UAE@XZ ENDP			; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
PUBLIC	??$serializeRawArray@UAnimRange@BaseKeyFrameArray@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
;	COMDAT ?_serialize@BaseKeyFrameArray@Ogre@@UAEXAAVArchive@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@BaseKeyFrameArray@Ogre@@UAEXAAVArchive@2@H@Z PROC ; Ogre::BaseKeyFrameArray::_serialize, COMDAT
; _this$ = ecx

; 75   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 76   : 			ar.serializeRawArray(m_Ranges);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawArray@UAnimRange@BaseKeyFrameArray@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::BaseKeyFrameArray::AnimRange>

; 77   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@BaseKeyFrameArray@Ogre@@UAEXAAVArchive@2@H@Z ENDP ; Ogre::BaseKeyFrameArray::_serialize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_GBaseKeyFrameArray@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBaseKeyFrameArray@Ogre@@UAEPAXI@Z PROC		; Ogre::BaseKeyFrameArray::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseKeyFrameArray@Ogre@@UAE@XZ	; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@14
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@14:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBaseKeyFrameArray@Ogre@@UAEPAXI@Z ENDP		; Ogre::BaseKeyFrameArray::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
PUBLIC	?_Tidy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Tidy
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
PUBLIC	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrekeyframearray.h
;	COMDAT ?getNumKey@?$KeyFrameArray@M@Ogre@@UAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumKey@?$KeyFrameArray@M@Ogre@@UAEIXZ PROC		; Ogre::KeyFrameArray<float>::getNumKey, COMDAT
; _this$ = ecx

; 94   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 			return m_Array.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size

; 96   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumKey@?$KeyFrameArray@M@Ogre@@UAEIXZ ENDP		; Ogre::KeyFrameArray<float>::getNumKey
_TEXT	ENDS
PUBLIC	?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z	; Ogre::KeyFrameArray<float>::getValue
; Function compile flags: /Odtp
;	COMDAT ?getValue@?$KeyFrameArray@M@Ogre@@UAEXHIPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_seq$ = 8						; size = 4
_tick$ = 12						; size = 4
_pdata$ = 16						; size = 4
?getValue@?$KeyFrameArray@M@Ogre@@UAEXHIPAX@Z PROC	; Ogre::KeyFrameArray<float>::getValue, COMDAT
; _this$ = ecx

; 99   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 			return getValue(seq, tick, *(POSTYPE *)pdata);

	push	1
	mov	eax, DWORD PTR _pdata$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tick$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z ; Ogre::KeyFrameArray<float>::getValue

; 101  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getValue@?$KeyFrameArray@M@Ogre@@UAEXHIPAX@Z ENDP	; Ogre::KeyFrameArray<float>::getValue
_TEXT	ENDS
PUBLIC	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
PUBLIC	?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::empty
PUBLIC	??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
PUBLIC	??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<float>::KEYFRAME_T>
PUBLIC	??$serializeRawType@W4InterpolType@Ogre@@@Archive@Ogre@@QAEXAAW4InterpolType@1@@Z ; Ogre::Archive::serializeRawType<enum Ogre::InterpolType>
; Function compile flags: /Odtp
;	COMDAT ?_serialize@?$KeyFrameArray@M@Ogre@@UAEXAAVArchive@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@?$KeyFrameArray@M@Ogre@@UAEXAAVArchive@2@H@Z PROC ; Ogre::KeyFrameArray<float>::_serialize, COMDAT
; _this$ = ecx

; 231  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 232  : 			ar.serializeRawType(m_Type);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawType@W4InterpolType@Ogre@@@Archive@Ogre@@QAEXAAW4InterpolType@1@@Z ; Ogre::Archive::serializeRawType<enum Ogre::InterpolType>

; 233  : 			ar.serializeRawArray(m_Array);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<float>::KEYFRAME_T>

; 234  : 			ar.serializeRawArray(m_CtrlPt);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>

; 235  : 
; 236  : 			if(!m_Array.empty() && int(m_Array[0].tick)<0)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@serialize@3
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN1@serialize@3

; 237  : 			{
; 238  : 				m_Array[0].tick = 0;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	DWORD PTR [eax], 0
$LN1@serialize@3:

; 239  : 			}
; 240  : 
; 241  : 			BaseKeyFrameArray::_serialize(ar, version);

	mov	ecx, DWORD PTR _version$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ar$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_serialize@BaseKeyFrameArray@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::BaseKeyFrameArray::_serialize

; 242  : 			m_nPrindex	 = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], -1

; 243  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@?$KeyFrameArray@M@Ogre@@UAEXAAVArchive@2@H@Z ENDP ; Ogre::KeyFrameArray<float>::_serialize
_TEXT	ENDS
PUBLIC	??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
PUBLIC	??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
PUBLIC	??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
PUBLIC	??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
PUBLIC	??_7?$KeyFrameArray@VVector3@Ogre@@@Ogre@@6B@	; Ogre::KeyFrameArray<Ogre::Vector3>::`vftable'
PUBLIC	??_R4?$KeyFrameArray@VVector3@Ogre@@@Ogre@@6B@	; Ogre::KeyFrameArray<Ogre::Vector3>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@8 ; Ogre::KeyFrameArray<Ogre::Vector3> `RTTI Type Descriptor'
PUBLIC	??_R3?$KeyFrameArray@VVector3@Ogre@@@Ogre@@8	; Ogre::KeyFrameArray<Ogre::Vector3>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$KeyFrameArray@VVector3@Ogre@@@Ogre@@8	; Ogre::KeyFrameArray<Ogre::Vector3>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@8 ; Ogre::KeyFrameArray<Ogre::Vector3>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?_serialize@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::KeyFrameArray<Ogre::Vector3>::_serialize
PUBLIC	?getNumKey@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEIXZ ; Ogre::KeyFrameArray<Ogre::Vector3>::getNumKey
PUBLIC	?getValue@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEXHIPAX@Z ; Ogre::KeyFrameArray<Ogre::Vector3>::getValue
EXTRN	??_E?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEPAXI@Z:PROC ; Ogre::KeyFrameArray<Ogre::Vector3>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@8 DD FLAT:??_R0?AV?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@8 ; Ogre::KeyFrameArray<Ogre::Vector3>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$KeyFrameArray@VVector3@Ogre@@@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R2?$KeyFrameArray@VVector3@Ogre@@@Ogre@@8
rdata$r	SEGMENT
??_R2?$KeyFrameArray@VVector3@Ogre@@@Ogre@@8 DD FLAT:??_R1A@?0A@EA@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@8 ; Ogre::KeyFrameArray<Ogre::Vector3>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseKeyFrameArray@Ogre@@8
	DD	FLAT:??_R1A@?0A@EA@BaseObject@Ogre@@8
	DD	FLAT:??_R13?0A@EA@MemoryDelegation@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R3?$KeyFrameArray@VVector3@Ogre@@@Ogre@@8
rdata$r	SEGMENT
??_R3?$KeyFrameArray@VVector3@Ogre@@@Ogre@@8 DD 00H	; Ogre::KeyFrameArray<Ogre::Vector3>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$KeyFrameArray@VVector3@Ogre@@@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@8
_DATA	SEGMENT
??_R0?AV?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@8 DD FLAT:??_7type_info@@6B@ ; Ogre::KeyFrameArray<Ogre::Vector3> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$KeyFrameArray@VVector3@Ogre@@@Ogre@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$KeyFrameArray@VVector3@Ogre@@@Ogre@@6B@
rdata$r	SEGMENT
??_R4?$KeyFrameArray@VVector3@Ogre@@@Ogre@@6B@ DD 00H	; Ogre::KeyFrameArray<Ogre::Vector3>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@8
	DD	FLAT:??_R3?$KeyFrameArray@VVector3@Ogre@@@Ogre@@8
rdata$r	ENDS
;	COMDAT ??_7?$KeyFrameArray@VVector3@Ogre@@@Ogre@@6B@
CONST	SEGMENT
??_7?$KeyFrameArray@VVector3@Ogre@@@Ogre@@6B@ DD FLAT:??_R4?$KeyFrameArray@VVector3@Ogre@@@Ogre@@6B@ ; Ogre::KeyFrameArray<Ogre::Vector3>::`vftable'
	DD	FLAT:?getRTTI@BaseObject@Ogre@@UBEPBVRuntimeClass@2@XZ
	DD	FLAT:?release@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?addRef@BaseObject@Ogre@@UAEXXZ
	DD	FLAT:?getRefCount@BaseObject@Ogre@@UAEHXZ
	DD	FLAT:?_serialize@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEXAAVArchive@2@H@Z
	DD	FLAT:??_E?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEPAXI@Z
	DD	FLAT:?deleteThis@BaseObject@Ogre@@MAEXXZ
	DD	FLAT:?getNumKey@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEIXZ
	DD	FLAT:?getValue@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEXHIPAX@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ$2
__ehfuncinfo$??0?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ PROC	; Ogre::KeyFrameArray<Ogre::Vector3>::KeyFrameArray<Ogre::Vector3>, COMDAT
; _this$ = ecx

; 90   : 		KeyFrameArray() : m_Type(INTERPOL_LINEAR){}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseKeyFrameArray@Ogre@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$KeyFrameArray@VVector3@Ogre@@@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseKeyFrameArray@Ogre@@UAE@XZ	; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
__unwindfunclet$??0?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
__unwindfunclet$??0?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
__ehhandler$??0?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ ENDP	; Ogre::KeyFrameArray<Ogre::Vector3>::KeyFrameArray<Ogre::Vector3>
PUBLIC	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::size
; Function compile flags: /Odtp
;	COMDAT ?getNumKey@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumKey@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEIXZ PROC ; Ogre::KeyFrameArray<Ogre::Vector3>::getNumKey, COMDAT
; _this$ = ecx

; 94   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 			return m_Array.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::size

; 96   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumKey@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEIXZ ENDP ; Ogre::KeyFrameArray<Ogre::Vector3>::getNumKey
_TEXT	ENDS
PUBLIC	?getValue@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEXHIAAVVector3@2@_N@Z ; Ogre::KeyFrameArray<Ogre::Vector3>::getValue
; Function compile flags: /Odtp
;	COMDAT ?getValue@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEXHIPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_seq$ = 8						; size = 4
_tick$ = 12						; size = 4
_pdata$ = 16						; size = 4
?getValue@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEXHIPAX@Z PROC ; Ogre::KeyFrameArray<Ogre::Vector3>::getValue, COMDAT
; _this$ = ecx

; 99   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 			return getValue(seq, tick, *(POSTYPE *)pdata);

	push	1
	mov	eax, DWORD PTR _pdata$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tick$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getValue@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEXHIAAVVector3@2@_N@Z ; Ogre::KeyFrameArray<Ogre::Vector3>::getValue

; 101  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getValue@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEXHIPAX@Z ENDP ; Ogre::KeyFrameArray<Ogre::Vector3>::getValue
_TEXT	ENDS
PUBLIC	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
PUBLIC	?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::empty
PUBLIC	??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
PUBLIC	??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
; Function compile flags: /Odtp
;	COMDAT ?_serialize@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEXAAVArchive@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
_version$ = 12						; size = 4
?_serialize@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEXAAVArchive@2@H@Z PROC ; Ogre::KeyFrameArray<Ogre::Vector3>::_serialize, COMDAT
; _this$ = ecx

; 231  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 232  : 			ar.serializeRawType(m_Type);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawType@W4InterpolType@Ogre@@@Archive@Ogre@@QAEXAAW4InterpolType@1@@Z ; Ogre::Archive::serializeRawType<enum Ogre::InterpolType>

; 233  : 			ar.serializeRawArray(m_Array);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>

; 234  : 			ar.serializeRawArray(m_CtrlPt);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	mov	ecx, DWORD PTR _ar$[ebp]
	call	??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@@Z ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>

; 235  : 
; 236  : 			if(!m_Array.empty() && int(m_Array[0].tick)<0)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@serialize@4
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN1@serialize@4

; 237  : 			{
; 238  : 				m_Array[0].tick = 0;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	mov	DWORD PTR [eax], 0
$LN1@serialize@4:

; 239  : 			}
; 240  : 
; 241  : 			BaseKeyFrameArray::_serialize(ar, version);

	mov	ecx, DWORD PTR _version$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ar$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_serialize@BaseKeyFrameArray@Ogre@@UAEXAAVArchive@2@H@Z ; Ogre::BaseKeyFrameArray::_serialize

; 242  : 			m_nPrindex	 = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], -1

; 243  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_serialize@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEXAAVArchive@2@H@Z ENDP ; Ogre::KeyFrameArray<Ogre::Vector3>::_serialize
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
__ehhandler$??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
PUBLIC	??1?$KeyFrameArray@M@Ogre@@UAE@XZ		; Ogre::KeyFrameArray<float>::~KeyFrameArray<float>
; Function compile flags: /Odtp
;	COMDAT ??_G?$KeyFrameArray@M@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$KeyFrameArray@M@Ogre@@UAEPAXI@Z PROC		; Ogre::KeyFrameArray<float>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@15
	push	88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@15:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$KeyFrameArray@M@Ogre@@UAEPAXI@Z ENDP		; Ogre::KeyFrameArray<float>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0BaseKeyFrameArray@Ogre@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BaseKeyFrameArray@Ogre@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0BaseKeyFrameArray@Ogre@@QAE@XZ$1
__ehfuncinfo$??0BaseKeyFrameArray@Ogre@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0BaseKeyFrameArray@Ogre@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0BaseKeyFrameArray@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0BaseKeyFrameArray@Ogre@@QAE@XZ PROC			; Ogre::BaseKeyFrameArray::BaseKeyFrameArray, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BaseKeyFrameArray@Ogre@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BaseObject@Ogre@@IAE@XZ		; Ogre::BaseObject::BaseObject
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BaseKeyFrameArray@Ogre@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0BaseKeyFrameArray@Ogre@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseObject@Ogre@@MAE@XZ		; Ogre::BaseObject::~BaseObject
__unwindfunclet$??0BaseKeyFrameArray@Ogre@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
__ehhandler$??0BaseKeyFrameArray@Ogre@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BaseKeyFrameArray@Ogre@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BaseKeyFrameArray@Ogre@@QAE@XZ ENDP			; Ogre::BaseKeyFrameArray::BaseKeyFrameArray
PUBLIC	??1?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAE@XZ	; Ogre::KeyFrameArray<Ogre::Vector3>::~KeyFrameArray<Ogre::Vector3>
; Function compile flags: /Odtp
;	COMDAT ??_G?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEPAXI@Z PROC ; Ogre::KeyFrameArray<Ogre::Vector3>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@16
	push	88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3MemoryDelegation@Ogre@@SAXPAXI@Z	; Ogre::MemoryDelegation::operator delete
	add	esp, 8
$LN1@scalar@16:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAEPAXI@Z ENDP ; Ogre::KeyFrameArray<Ogre::Vector3>::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$KeyFrameArray@M@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$KeyFrameArray@M@Ogre@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$KeyFrameArray@M@Ogre@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1?$KeyFrameArray@M@Ogre@@UAE@XZ$2
__ehfuncinfo$??1?$KeyFrameArray@M@Ogre@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$KeyFrameArray@M@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$KeyFrameArray@M@Ogre@@UAE@XZ PROC			; Ogre::KeyFrameArray<float>::~KeyFrameArray<float>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseKeyFrameArray@Ogre@@UAE@XZ	; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$KeyFrameArray@M@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseKeyFrameArray@Ogre@@UAE@XZ	; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
__unwindfunclet$??1?$KeyFrameArray@M@Ogre@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
__unwindfunclet$??1?$KeyFrameArray@M@Ogre@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
__ehhandler$??1?$KeyFrameArray@M@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$KeyFrameArray@M@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$KeyFrameArray@M@Ogre@@UAE@XZ ENDP			; Ogre::KeyFrameArray<float>::~KeyFrameArray<float>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAE@XZ$2
__ehfuncinfo$??1?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAE@XZ PROC	; Ogre::KeyFrameArray<Ogre::Vector3>::~KeyFrameArray<Ogre::Vector3>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BaseKeyFrameArray@Ogre@@UAE@XZ	; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BaseKeyFrameArray@Ogre@@UAE@XZ	; Ogre::BaseKeyFrameArray::~BaseKeyFrameArray
__unwindfunclet$??1?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
__unwindfunclet$??1?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
__ehhandler$??1?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$KeyFrameArray@VVector3@Ogre@@@Ogre@@UAE@XZ ENDP	; Ogre::KeyFrameArray<Ogre::Vector3>::~KeyFrameArray<Ogre::Vector3>
PUBLIC	?_Buy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Buy
PUBLIC	??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ; std::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
PUBLIC	??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T70574 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T70574[ebp], esp
	call	??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ; std::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
PUBLIC	?deallocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::deallocate
PUBLIC	?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::deallocate
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Tidy
_TEXT	ENDS
PUBLIC	??1_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::~_Container_base_aux
PUBLIC	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
;	COMDAT ??1_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::~_Container_base_aux, COMDAT
; _this$ = ecx

; 402  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 403  : 		// Do nothing: ~_Container_base_aux_alloc_real() previously destroyed the aux object.
; 404  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::~_Container_base_aux
_TEXT	ENDS
PUBLIC	??$KEYFRAME_HERMITE@M@Ogre@@YAXAAMMABM111@Z	; Ogre::KEYFRAME_HERMITE<float>
PUBLIC	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator[]
PUBLIC	??$KEYFRAME_LERP@M@Ogre@@YAXAAMMABM1@Z		; Ogre::KEYFRAME_LERP<float>
PUBLIC	??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator[]
PUBLIC	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
EXTRN	__imp__rand:PROC
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrekeyframearray.h
;	COMDAT ?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z
_TEXT	SEGMENT
tv531 = -84						; size = 8
tv529 = -76						; size = 4
tv468 = -72						; size = 8
tv466 = -64						; size = 4
_this$ = -60						; size = 4
_tick1$62412 = -56					; size = 4
_t$62416 = -52						; size = 4
_tick2$62413 = -48					; size = 4
_middle$62407 = -44					; size = 4
_tick1$62372 = -40					; size = 4
_t$62376 = -36						; size = 4
_tick2$62373 = -32					; size = 4
_i$62358 = -28						; size = 4
_start$ = -24						; size = 4
_end$ = -20						; size = 4
_dtick$ = -16						; size = 4
_size$ = -12						; size = 4
_ntotalkeys$ = -8					; size = 4
_nseq$ = -4						; size = 4
_seq$ = 8						; size = 4
_tick$ = 12						; size = 4
_data$ = 16						; size = 4
_loop$ = 20						; size = 1
?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z PROC	; Ogre::KeyFrameArray<float>::getValue, COMDAT
; _this$ = ecx

; 104  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 			int size = (int)m_Array.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	mov	DWORD PTR _size$[ebp], eax

; 106  : 
; 107  : 			//assert(size > 0);
; 108  : 
; 109  : 			if (size == 0)

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN29@getValue

; 110  : 				return;

	jmp	$LN30@getValue
$LN29@getValue:

; 111  : 			
; 112  : 			data = m_Array[0].data;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _data$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx]

; 113  : 
; 114  : 			int start, end;
; 115  : 			int ntotalkeys = (int)m_Array.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	mov	DWORD PTR _ntotalkeys$[ebp], eax

; 116  : 			int nseq = (int)m_Ranges.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	mov	DWORD PTR _nseq$[ebp], eax

; 117  : 
; 118  : 			if(nseq == 0)

	cmp	DWORD PTR _nseq$[ebp], 0
	jne	SHORT $LN28@getValue

; 119  : 			{
; 120  : 				start = 0;

	mov	DWORD PTR _start$[ebp], 0

; 121  : 				end = ntotalkeys-1;

	mov	edx, DWORD PTR _ntotalkeys$[ebp]
	sub	edx, 1
	mov	DWORD PTR _end$[ebp], edx

; 122  : 			}
; 123  : 			else

	jmp	SHORT $LN27@getValue
$LN28@getValue:

; 124  : 			{
; 125  : 				assert(seq>=0 && seq<nseq);
; 126  : 				start = m_Ranges[seq].begin;

	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _start$[ebp], ecx

; 127  : 				end = m_Ranges[seq].end;

	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator[]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _end$[ebp], eax
$LN27@getValue:

; 128  : 				assert(start <= end);
; 129  : 			}
; 130  : 			
; 131  : 
; 132  : 			if(m_Type == INTERPOL_RANDOM)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32], 3
	jne	SHORT $LN26@getValue

; 133  : 			{
; 134  : 				int i = start;

	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$62358[ebp], edx

; 135  : 				if(end > start) i += rand()%(end-start);

	mov	eax, DWORD PTR _end$[ebp]
	cmp	eax, DWORD PTR _start$[ebp]
	jle	SHORT $LN25@getValue
	call	DWORD PTR __imp__rand
	mov	ecx, DWORD PTR _end$[ebp]
	sub	ecx, DWORD PTR _start$[ebp]
	cdq
	idiv	ecx
	add	edx, DWORD PTR _i$62358[ebp]
	mov	DWORD PTR _i$62358[ebp], edx
$LN25@getValue:

; 136  : 
; 137  : 				data = m_Array[i].data;

	mov	edx, DWORD PTR _i$62358[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _data$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx]

; 138  : 				return;

	jmp	$LN30@getValue
$LN26@getValue:

; 139  : 			}
; 140  : 			if(start >= size)

	mov	edx, DWORD PTR _start$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jl	SHORT $LN24@getValue

; 141  : 			{
; 142  : 				start = size -1;

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _start$[ebp], eax
$LN24@getValue:

; 143  : 			}
; 144  : 			if(end >= size)

	mov	ecx, DWORD PTR _end$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jl	SHORT $LN23@getValue

; 145  : 			{
; 146  : 				end = size -1;

	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, 1
	mov	DWORD PTR _end$[ebp], edx
$LN23@getValue:

; 147  : 			}
; 148  : 			tick -= m_Array[start].tick;

	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tick$[ebp], ecx

; 149  : 			uint dtick = (m_Array[end].tick - m_Array[start].tick + 1);

	mov	edx, DWORD PTR _end$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	DWORD PTR _dtick$[ebp], ecx

; 150  : 			if(dtick == 0) tick = m_Array[start].tick;

	jne	SHORT $LN22@getValue
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _tick$[ebp], eax

; 151  : 			else

	jmp	SHORT $LN17@getValue
$LN22@getValue:

; 152  : 			{	
; 153  : 				if(loop) tick = m_Array[start].tick + (tick%dtick);

	movzx	ecx, BYTE PTR _loop$[ebp]
	test	ecx, ecx
	je	SHORT $LN20@getValue
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, eax
	mov	eax, DWORD PTR _tick$[ebp]
	xor	edx, edx
	div	DWORD PTR _dtick$[ebp]
	add	edx, DWORD PTR [ecx]
	mov	DWORD PTR _tick$[ebp], edx
	jmp	SHORT $LN17@getValue
$LN20@getValue:

; 154  : 				else if(dtick < tick) tick = m_Array[end].tick;

	mov	edx, DWORD PTR _dtick$[ebp]
	cmp	edx, DWORD PTR _tick$[ebp]
	jae	SHORT $LN18@getValue
	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tick$[ebp], ecx
	jmp	SHORT $LN17@getValue
$LN18@getValue:

; 155  : 				else tick = m_Array[start].tick + tick;

	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _tick$[ebp]
	mov	DWORD PTR _tick$[ebp], eax
$LN17@getValue:

; 156  : 			}
; 157  : 
; 158  : 			if ( m_nPrindex >= start && m_nPrindex  < end )  

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	cmp	edx, DWORD PTR _start$[ebp]
	jl	$LN14@getValue
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	cmp	ecx, DWORD PTR _end$[ebp]
	jge	$LN14@getValue

; 159  : 			{
; 160  : 				if ( tick > m_Array[m_nPrindex + 1].tick && m_nPrindex + 2 <= end)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jbe	SHORT $LN15@getValue
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 2
	cmp	eax, DWORD PTR _end$[ebp]
	jg	SHORT $LN15@getValue

; 161  : 				{
; 162  : 					m_nPrindex++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], edx
$LN15@getValue:

; 163  : 				}
; 164  : 				if ( tick >= m_Array[m_nPrindex].tick && tick <= m_Array[m_nPrindex + 1].tick )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jb	$LN14@getValue
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	cmp	ecx, DWORD PTR [eax]
	ja	$LN14@getValue

; 165  : 				{
; 166  : 					uint tick1 = m_Array[m_nPrindex].tick;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tick1$62372[ebp], ecx

; 167  : 					uint tick2 = m_Array[m_nPrindex+1].tick;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tick2$62373[ebp], ecx

; 168  : 					if( tick1 == tick2 )

	mov	edx, DWORD PTR _tick1$62372[ebp]
	cmp	edx, DWORD PTR _tick2$62373[ebp]
	jne	SHORT $LN13@getValue

; 169  : 					{
; 170  : 						return;

	jmp	$LN30@getValue
$LN13@getValue:

; 171  : 					}
; 172  : 					assert( tick1 < tick2);
; 173  : 
; 174  : 					float t = float( int(tick-tick1) / double(tick2-tick1) );

	mov	eax, DWORD PTR _tick$[ebp]
	sub	eax, DWORD PTR _tick1$62372[ebp]
	mov	DWORD PTR tv466[ebp], eax
	fild	DWORD PTR tv466[ebp]
	mov	ecx, DWORD PTR _tick2$62373[ebp]
	sub	ecx, DWORD PTR _tick1$62372[ebp]
	mov	DWORD PTR tv468[ebp], ecx
	mov	DWORD PTR tv468[ebp+4], 0
	fild	QWORD PTR tv468[ebp]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _t$62376[ebp]

; 175  : 					if(m_Type == INTERPOL_LINEAR) KEYFRAME_LERP( data, t, m_Array[m_nPrindex].data, m_Array[m_nPrindex + 1].data);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+32], 1
	jne	SHORT $LN12@getValue
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	push	ecx
	fld	DWORD PTR _t$62376[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	??$KEYFRAME_LERP@M@Ogre@@YAXAAMMABM1@Z	; Ogre::KEYFRAME_LERP<float>
	add	esp, 16					; 00000010H
	jmp	SHORT $LN11@getValue
$LN12@getValue:

; 176  : 					else KEYFRAME_HERMITE(data, t, m_Array[m_nPrindex].data, m_Array[m_nPrindex + 1].data, m_CtrlPt[m_nPrindex].out, m_CtrlPt[m_nPrindex + 1].in);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator[]
	add	eax, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	push	ecx
	fld	DWORD PTR _t$62376[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	??$KEYFRAME_HERMITE@M@Ogre@@YAXAAMMABM111@Z ; Ogre::KEYFRAME_HERMITE<float>
	add	esp, 24					; 00000018H
$LN11@getValue:

; 177  : 					return;

	jmp	$LN30@getValue
$LN14@getValue:

; 178  : 				}
; 179  : 				//while ( m_nPrindex < end)
; 180  : 				//{
; 181  : 				//	if ( tick >= m_Array[m_nPrindex].tick && tick <= m_Array[m_nPrindex + 1].tick )
; 182  : 				//	{
; 183  : 				//		uint tick1 = m_Array[m_nPrindex].tick;
; 184  : 				//		uint tick2 = m_Array[m_nPrindex+1].tick;
; 185  : 				//		if( tick1 == tick2 )
; 186  : 				//		{
; 187  : 				//			return;
; 188  : 				//		}
; 189  : 				//		assert( tick1 < tick2);
; 190  : 
; 191  : 				//		float t = float( int(tick-tick1) / double(tick2-tick1) );
; 192  : 				//		if(m_Type == INTERPOL_LINEAR) KEYFRAME_LERP( data, t, m_Array[m_nPrindex].data, m_Array[m_nPrindex + 1].data);
; 193  : 				//		else KEYFRAME_HERMITE(data, t, m_Array[m_nPrindex].data, m_Array[m_nPrindex + 1].data, m_CtrlPt[m_nPrindex].out, m_CtrlPt[m_nPrindex + 1].in);
; 194  : 				//		return;
; 195  : 				//	}
; 196  : 				//	m_nPrindex++;
; 197  : 				//}
; 198  : 			}
; 199  : 			//char po[100];
; 200  : 			//sprintf(po,"start %d end %d\n",start,end);
; 201  : 			//OutputDebugString(po);
; 202  : 
; 203  : 			for(;;)
; 204  : 			{
; 205  : 				if( start >= end-1 ) break;

	mov	edx, DWORD PTR _end$[ebp]
	sub	edx, 1
	cmp	DWORD PTR _start$[ebp], edx
	jl	SHORT $LN8@getValue
	jmp	SHORT $LN9@getValue
$LN8@getValue:

; 206  : 
; 207  : 				int middle = (start+end)/2;

	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _end$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _middle$62407[ebp], eax

; 208  : 				if( tick < m_Array[middle].tick ) end = middle;

	mov	eax, DWORD PTR _middle$62407[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN7@getValue
	mov	edx, DWORD PTR _middle$62407[ebp]
	mov	DWORD PTR _end$[ebp], edx
	jmp	SHORT $LN6@getValue
$LN7@getValue:

; 209  : 				else start = middle;

	mov	eax, DWORD PTR _middle$62407[ebp]
	mov	DWORD PTR _start$[ebp], eax
$LN6@getValue:

; 210  : 			}

	jmp	SHORT $LN14@getValue
$LN9@getValue:

; 211  : 
; 212  : 			if( start == end ) data = m_Array[start].data;

	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	jne	SHORT $LN5@getValue
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _data$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx]

; 213  : 			else

	jmp	$LN4@getValue
$LN5@getValue:

; 214  : 			{
; 215  : 				uint tick1 = m_Array[start].tick;

	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _tick1$62412[ebp], eax

; 216  : 				uint tick2 = m_Array[end].tick;

	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _tick2$62413[ebp], edx

; 217  : 				if( tick1 == tick2 )

	mov	eax, DWORD PTR _tick1$62412[ebp]
	cmp	eax, DWORD PTR _tick2$62413[ebp]
	jne	SHORT $LN3@getValue

; 218  : 				{
; 219  : 					return;

	jmp	$LN30@getValue
$LN3@getValue:

; 220  : 				}
; 221  : 				assert( tick1 < tick2);
; 222  : 
; 223  : 				float t = float( int(tick-tick1) / double(tick2-tick1) );

	mov	ecx, DWORD PTR _tick$[ebp]
	sub	ecx, DWORD PTR _tick1$62412[ebp]
	mov	DWORD PTR tv529[ebp], ecx
	fild	DWORD PTR tv529[ebp]
	mov	edx, DWORD PTR _tick2$62413[ebp]
	sub	edx, DWORD PTR _tick1$62412[ebp]
	mov	DWORD PTR tv531[ebp], edx
	mov	DWORD PTR tv531[ebp+4], 0
	fild	QWORD PTR tv531[ebp]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _t$62416[ebp]

; 224  : 				if(m_Type == INTERPOL_LINEAR) KEYFRAME_LERP( data, t, m_Array[start].data, m_Array[end].data);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 1
	jne	SHORT $LN2@getValue
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	push	ecx
	fld	DWORD PTR _t$62416[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	??$KEYFRAME_LERP@M@Ogre@@YAXAAMMABM1@Z	; Ogre::KEYFRAME_LERP<float>
	add	esp, 16					; 00000010H
	jmp	SHORT $LN1@getValue
$LN2@getValue:

; 225  : 				else KEYFRAME_HERMITE(data, t, m_Array[start].data, m_Array[end].data, m_CtrlPt[start].out, m_CtrlPt[end].in);

	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator[]
	push	eax
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator[]
	add	eax, 4
	push	eax
	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	push	ecx
	fld	DWORD PTR _t$62416[ebp]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	??$KEYFRAME_HERMITE@M@Ogre@@YAXAAMMABM111@Z ; Ogre::KEYFRAME_HERMITE<float>
	add	esp, 24					; 00000018H
$LN1@getValue:

; 226  : 				m_nPrindex = start;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax+84], ecx
$LN4@getValue:
$LN30@getValue:

; 227  : 			}
; 228  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?getValue@?$KeyFrameArray@M@Ogre@@QAEXHIAAM_N@Z ENDP	; Ogre::KeyFrameArray<float>::getValue
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 3

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
_TEXT	ENDS
EXTRN	__imp___invalid_parameter_noinfo:PROC
; Function compile flags: /Odtp
;	COMDAT ??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@2
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@2:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]

; 786  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator[]
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
PUBLIC	?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Buy
PUBLIC	??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
PUBLIC	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T70603 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T70603[ebp], esp
	call	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
PUBLIC	?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 3

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::empty, COMDAT
; _this$ = ecx

; 735  : 		{	// test if sequence is empty

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 736  : 		return (size() == 0);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 737  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::empty
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@3
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@3:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]

; 786  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Buy
PUBLIC	??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T70628 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T70628[ebp], esp
	call	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	??$KEYFRAME_HERMITE@VVector3@Ogre@@@Ogre@@YAXAAVVector3@0@MABV10@111@Z ; Ogre::KEYFRAME_HERMITE<Ogre::Vector3>
PUBLIC	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator[]
PUBLIC	??$KEYFRAME_LERP@VVector3@Ogre@@@Ogre@@YAXAAVVector3@0@MABV10@1@Z ; Ogre::KEYFRAME_LERP<Ogre::Vector3>
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrekeyframearray.h
;	COMDAT ?getValue@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEXHIAAVVector3@2@_N@Z
_TEXT	SEGMENT
tv531 = -84						; size = 8
tv529 = -76						; size = 4
tv470 = -72						; size = 8
tv468 = -64						; size = 4
_this$ = -60						; size = 4
_tick1$62521 = -56					; size = 4
_t$62525 = -52						; size = 4
_tick2$62522 = -48					; size = 4
_middle$62516 = -44					; size = 4
_tick1$62481 = -40					; size = 4
_t$62485 = -36						; size = 4
_tick2$62482 = -32					; size = 4
_i$62467 = -28						; size = 4
_start$ = -24						; size = 4
_end$ = -20						; size = 4
_dtick$ = -16						; size = 4
_size$ = -12						; size = 4
_ntotalkeys$ = -8					; size = 4
_nseq$ = -4						; size = 4
_seq$ = 8						; size = 4
_tick$ = 12						; size = 4
_data$ = 16						; size = 4
_loop$ = 20						; size = 1
?getValue@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEXHIAAVVector3@2@_N@Z PROC ; Ogre::KeyFrameArray<Ogre::Vector3>::getValue, COMDAT
; _this$ = ecx

; 104  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 			int size = (int)m_Array.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::size
	mov	DWORD PTR _size$[ebp], eax

; 106  : 
; 107  : 			//assert(size > 0);
; 108  : 
; 109  : 			if (size == 0)

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN29@getValue@2

; 110  : 				return;

	jmp	$LN30@getValue@2
$LN29@getValue@2:

; 111  : 			
; 112  : 			data = m_Array[0].data;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 113  : 
; 114  : 			int start, end;
; 115  : 			int ntotalkeys = (int)m_Array.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::size
	mov	DWORD PTR _ntotalkeys$[ebp], eax

; 116  : 			int nseq = (int)m_Ranges.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	mov	DWORD PTR _nseq$[ebp], eax

; 117  : 
; 118  : 			if(nseq == 0)

	cmp	DWORD PTR _nseq$[ebp], 0
	jne	SHORT $LN28@getValue@2

; 119  : 			{
; 120  : 				start = 0;

	mov	DWORD PTR _start$[ebp], 0

; 121  : 				end = ntotalkeys-1;

	mov	eax, DWORD PTR _ntotalkeys$[ebp]
	sub	eax, 1
	mov	DWORD PTR _end$[ebp], eax

; 122  : 			}
; 123  : 			else

	jmp	SHORT $LN27@getValue@2
$LN28@getValue@2:

; 124  : 			{
; 125  : 				assert(seq>=0 && seq<nseq);
; 126  : 				start = m_Ranges[seq].begin;

	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _start$[ebp], edx

; 127  : 				end = m_Ranges[seq].end;

	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator[]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _end$[ebp], ecx
$LN27@getValue@2:

; 128  : 				assert(start <= end);
; 129  : 			}
; 130  : 			
; 131  : 
; 132  : 			if(m_Type == INTERPOL_RANDOM)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+32], 3
	jne	SHORT $LN26@getValue@2

; 133  : 			{
; 134  : 				int i = start;

	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$62467[ebp], eax

; 135  : 				if(end > start) i += rand()%(end-start);

	mov	ecx, DWORD PTR _end$[ebp]
	cmp	ecx, DWORD PTR _start$[ebp]
	jle	SHORT $LN25@getValue@2
	call	DWORD PTR __imp__rand
	mov	ecx, DWORD PTR _end$[ebp]
	sub	ecx, DWORD PTR _start$[ebp]
	cdq
	idiv	ecx
	add	edx, DWORD PTR _i$62467[ebp]
	mov	DWORD PTR _i$62467[ebp], edx
$LN25@getValue@2:

; 136  : 
; 137  : 				data = m_Array[i].data;

	mov	edx, DWORD PTR _i$62467[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 138  : 				return;

	jmp	$LN30@getValue@2
$LN26@getValue@2:

; 139  : 			}
; 140  : 			if(start >= size)

	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jl	SHORT $LN24@getValue@2

; 141  : 			{
; 142  : 				start = size -1;

	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _start$[ebp], ecx
$LN24@getValue@2:

; 143  : 			}
; 144  : 			if(end >= size)

	mov	edx, DWORD PTR _end$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jl	SHORT $LN23@getValue@2

; 145  : 			{
; 146  : 				end = size -1;

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _end$[ebp], eax
$LN23@getValue@2:

; 147  : 			}
; 148  : 			tick -= m_Array[start].tick;

	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	mov	edx, DWORD PTR _tick$[ebp]
	sub	edx, DWORD PTR [eax]
	mov	DWORD PTR _tick$[ebp], edx

; 149  : 			uint dtick = (m_Array[end].tick - m_Array[start].tick + 1);

	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	mov	edx, DWORD PTR [esi]
	sub	edx, DWORD PTR [eax]
	add	edx, 1
	mov	DWORD PTR _dtick$[ebp], edx

; 150  : 			if(dtick == 0) tick = m_Array[start].tick;

	jne	SHORT $LN22@getValue@2
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tick$[ebp], ecx

; 151  : 			else

	jmp	SHORT $LN17@getValue@2
$LN22@getValue@2:

; 152  : 			{	
; 153  : 				if(loop) tick = m_Array[start].tick + (tick%dtick);

	movzx	edx, BYTE PTR _loop$[ebp]
	test	edx, edx
	je	SHORT $LN20@getValue@2
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	mov	ecx, eax
	mov	eax, DWORD PTR _tick$[ebp]
	xor	edx, edx
	div	DWORD PTR _dtick$[ebp]
	add	edx, DWORD PTR [ecx]
	mov	DWORD PTR _tick$[ebp], edx
	jmp	SHORT $LN17@getValue@2
$LN20@getValue@2:

; 154  : 				else if(dtick < tick) tick = m_Array[end].tick;

	mov	edx, DWORD PTR _dtick$[ebp]
	cmp	edx, DWORD PTR _tick$[ebp]
	jae	SHORT $LN18@getValue@2
	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tick$[ebp], ecx
	jmp	SHORT $LN17@getValue@2
$LN18@getValue@2:

; 155  : 				else tick = m_Array[start].tick + tick;

	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _tick$[ebp]
	mov	DWORD PTR _tick$[ebp], eax
$LN17@getValue@2:

; 156  : 			}
; 157  : 
; 158  : 			if ( m_nPrindex >= start && m_nPrindex  < end )  

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	cmp	edx, DWORD PTR _start$[ebp]
	jl	$LN14@getValue@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	cmp	ecx, DWORD PTR _end$[ebp]
	jge	$LN14@getValue@2

; 159  : 			{
; 160  : 				if ( tick > m_Array[m_nPrindex + 1].tick && m_nPrindex + 2 <= end)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jbe	SHORT $LN15@getValue@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 2
	cmp	eax, DWORD PTR _end$[ebp]
	jg	SHORT $LN15@getValue@2

; 161  : 				{
; 162  : 					m_nPrindex++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], edx
$LN15@getValue@2:

; 163  : 				}
; 164  : 				if ( tick >= m_Array[m_nPrindex].tick && tick <= m_Array[m_nPrindex + 1].tick )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jb	$LN14@getValue@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	cmp	ecx, DWORD PTR [eax]
	ja	$LN14@getValue@2

; 165  : 				{
; 166  : 					uint tick1 = m_Array[m_nPrindex].tick;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tick1$62481[ebp], ecx

; 167  : 					uint tick2 = m_Array[m_nPrindex+1].tick;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tick2$62482[ebp], ecx

; 168  : 					if( tick1 == tick2 )

	mov	edx, DWORD PTR _tick1$62481[ebp]
	cmp	edx, DWORD PTR _tick2$62482[ebp]
	jne	SHORT $LN13@getValue@2

; 169  : 					{
; 170  : 						return;

	jmp	$LN30@getValue@2
$LN13@getValue@2:

; 171  : 					}
; 172  : 					assert( tick1 < tick2);
; 173  : 
; 174  : 					float t = float( int(tick-tick1) / double(tick2-tick1) );

	mov	eax, DWORD PTR _tick$[ebp]
	sub	eax, DWORD PTR _tick1$62481[ebp]
	mov	DWORD PTR tv468[ebp], eax
	fild	DWORD PTR tv468[ebp]
	mov	ecx, DWORD PTR _tick2$62482[ebp]
	sub	ecx, DWORD PTR _tick1$62481[ebp]
	mov	DWORD PTR tv470[ebp], ecx
	mov	DWORD PTR tv470[ebp+4], 0
	fild	QWORD PTR tv470[ebp]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _t$62485[ebp]

; 175  : 					if(m_Type == INTERPOL_LINEAR) KEYFRAME_LERP( data, t, m_Array[m_nPrindex].data, m_Array[m_nPrindex + 1].data);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+32], 1
	jne	SHORT $LN12@getValue@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	push	ecx
	fld	DWORD PTR _t$62485[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	??$KEYFRAME_LERP@VVector3@Ogre@@@Ogre@@YAXAAVVector3@0@MABV10@1@Z ; Ogre::KEYFRAME_LERP<Ogre::Vector3>
	add	esp, 16					; 00000010H
	jmp	SHORT $LN11@getValue@2
$LN12@getValue@2:

; 176  : 					else KEYFRAME_HERMITE(data, t, m_Array[m_nPrindex].data, m_Array[m_nPrindex + 1].data, m_CtrlPt[m_nPrindex].out, m_CtrlPt[m_nPrindex + 1].in);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator[]
	add	eax, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	push	ecx
	fld	DWORD PTR _t$62485[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	??$KEYFRAME_HERMITE@VVector3@Ogre@@@Ogre@@YAXAAVVector3@0@MABV10@111@Z ; Ogre::KEYFRAME_HERMITE<Ogre::Vector3>
	add	esp, 24					; 00000018H
$LN11@getValue@2:

; 177  : 					return;

	jmp	$LN30@getValue@2
$LN14@getValue@2:

; 178  : 				}
; 179  : 				//while ( m_nPrindex < end)
; 180  : 				//{
; 181  : 				//	if ( tick >= m_Array[m_nPrindex].tick && tick <= m_Array[m_nPrindex + 1].tick )
; 182  : 				//	{
; 183  : 				//		uint tick1 = m_Array[m_nPrindex].tick;
; 184  : 				//		uint tick2 = m_Array[m_nPrindex+1].tick;
; 185  : 				//		if( tick1 == tick2 )
; 186  : 				//		{
; 187  : 				//			return;
; 188  : 				//		}
; 189  : 				//		assert( tick1 < tick2);
; 190  : 
; 191  : 				//		float t = float( int(tick-tick1) / double(tick2-tick1) );
; 192  : 				//		if(m_Type == INTERPOL_LINEAR) KEYFRAME_LERP( data, t, m_Array[m_nPrindex].data, m_Array[m_nPrindex + 1].data);
; 193  : 				//		else KEYFRAME_HERMITE(data, t, m_Array[m_nPrindex].data, m_Array[m_nPrindex + 1].data, m_CtrlPt[m_nPrindex].out, m_CtrlPt[m_nPrindex + 1].in);
; 194  : 				//		return;
; 195  : 				//	}
; 196  : 				//	m_nPrindex++;
; 197  : 				//}
; 198  : 			}
; 199  : 			//char po[100];
; 200  : 			//sprintf(po,"start %d end %d\n",start,end);
; 201  : 			//OutputDebugString(po);
; 202  : 
; 203  : 			for(;;)
; 204  : 			{
; 205  : 				if( start >= end-1 ) break;

	mov	edx, DWORD PTR _end$[ebp]
	sub	edx, 1
	cmp	DWORD PTR _start$[ebp], edx
	jl	SHORT $LN8@getValue@2
	jmp	SHORT $LN9@getValue@2
$LN8@getValue@2:

; 206  : 
; 207  : 				int middle = (start+end)/2;

	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _end$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _middle$62516[ebp], eax

; 208  : 				if( tick < m_Array[middle].tick ) end = middle;

	mov	eax, DWORD PTR _middle$62516[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR _tick$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN7@getValue@2
	mov	edx, DWORD PTR _middle$62516[ebp]
	mov	DWORD PTR _end$[ebp], edx
	jmp	SHORT $LN6@getValue@2
$LN7@getValue@2:

; 209  : 				else start = middle;

	mov	eax, DWORD PTR _middle$62516[ebp]
	mov	DWORD PTR _start$[ebp], eax
$LN6@getValue@2:

; 210  : 			}

	jmp	SHORT $LN14@getValue@2
$LN9@getValue@2:

; 211  : 
; 212  : 			if( start == end ) data = m_Array[start].data;

	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	jne	SHORT $LN5@getValue@2
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 213  : 			else

	jmp	$LN4@getValue@2
$LN5@getValue@2:

; 214  : 			{
; 215  : 				uint tick1 = m_Array[start].tick;

	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tick1$62521[ebp], ecx

; 216  : 				uint tick2 = m_Array[end].tick;

	mov	edx, DWORD PTR _end$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _tick2$62522[ebp], eax

; 217  : 				if( tick1 == tick2 )

	mov	ecx, DWORD PTR _tick1$62521[ebp]
	cmp	ecx, DWORD PTR _tick2$62522[ebp]
	jne	SHORT $LN3@getValue@2

; 218  : 				{
; 219  : 					return;

	jmp	$LN30@getValue@2
$LN3@getValue@2:

; 220  : 				}
; 221  : 				assert( tick1 < tick2);
; 222  : 
; 223  : 				float t = float( int(tick-tick1) / double(tick2-tick1) );

	mov	edx, DWORD PTR _tick$[ebp]
	sub	edx, DWORD PTR _tick1$62521[ebp]
	mov	DWORD PTR tv529[ebp], edx
	fild	DWORD PTR tv529[ebp]
	mov	eax, DWORD PTR _tick2$62522[ebp]
	sub	eax, DWORD PTR _tick1$62521[ebp]
	mov	DWORD PTR tv531[ebp], eax
	mov	DWORD PTR tv531[ebp+4], 0
	fild	QWORD PTR tv531[ebp]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _t$62525[ebp]

; 224  : 				if(m_Type == INTERPOL_LINEAR) KEYFRAME_LERP( data, t, m_Array[start].data, m_Array[end].data);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32], 1
	jne	SHORT $LN2@getValue@2
	mov	edx, DWORD PTR _end$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	push	ecx
	fld	DWORD PTR _t$62525[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	??$KEYFRAME_LERP@VVector3@Ogre@@@Ogre@@YAXAAVVector3@0@MABV10@1@Z ; Ogre::KEYFRAME_LERP<Ogre::Vector3>
	add	esp, 16					; 00000010H
	jmp	SHORT $LN1@getValue@2
$LN2@getValue@2:

; 225  : 				else KEYFRAME_HERMITE(data, t, m_Array[start].data, m_Array[end].data, m_CtrlPt[start].out, m_CtrlPt[end].in);

	mov	edx, DWORD PTR _end$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator[]
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator[]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	add	eax, 4
	push	eax
	push	ecx
	fld	DWORD PTR _t$62525[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	??$KEYFRAME_HERMITE@VVector3@Ogre@@@Ogre@@YAXAAVVector3@0@MABV10@111@Z ; Ogre::KEYFRAME_HERMITE<Ogre::Vector3>
	add	esp, 24					; 00000018H
$LN1@getValue@2:

; 226  : 				m_nPrindex = start;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [ecx+84], edx
$LN4@getValue@2:
$LN30@getValue@2:

; 227  : 			}
; 228  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?getValue@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEXHIAAVVector3@2@_N@Z ENDP ; Ogre::KeyFrameArray<Ogre::Vector3>::getValue
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::~_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
PUBLIC	?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Buy
PUBLIC	??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
PUBLIC	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T70649 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T70649[ebp], esp
	call	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
PUBLIC	?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::~vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 4

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::empty, COMDAT
; _this$ = ecx

; 735  : 		{	// test if sequence is empty

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 736  : 		return (size() == 0);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::size
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 737  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::empty
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@4
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@4:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR __Pos$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]

; 786  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::~_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
PUBLIC	?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Buy
PUBLIC	??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
PUBLIC	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T70674 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T70674[ebp], esp
	call	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@XZ ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
PUBLIC	?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::~vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
__ehhandler$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
__ehhandler$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::~_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
__ehhandler$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::~_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::~_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
__ehhandler$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::~_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
PUBLIC	?allocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocate
PUBLIC	?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Xlen
PUBLIC	?max_size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy
$LN2@Buy:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
PUBLIC	??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T70733 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T70733[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
__ehhandler$??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_val<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@XZ PROC ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@XZ ENDP ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z PROC ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ENDP ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::deallocate
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::deallocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocate
PUBLIC	?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Xlen
PUBLIC	?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@2

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@2
	jmp	SHORT $LN3@Buy@2
$LN4@Buy@2:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@2

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@2
$LN2@Buy@2:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@2:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@2:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Buy
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::deallocate
PUBLIC	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@2

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::deallocate
$LN1@Tidy@2:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
PUBLIC	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T70753 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T70753[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
__ehhandler$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_val<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ PROC ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ ENDP ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>
_TEXT	ENDS
PUBLIC	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@5
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@5:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]

; 786  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator[]
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocate
PUBLIC	?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Xlen
PUBLIC	?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@3

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@3
	jmp	SHORT $LN3@Buy@3
$LN4@Buy@3:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@3

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@3
$LN2@Buy@3:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN3@Buy@3:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@3:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Buy
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::deallocate
PUBLIC	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@3

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::deallocate
$LN1@Tidy@3:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T70780 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T70780[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
__ehhandler$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_val<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ PROC ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@XZ ENDP ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::allocate
PUBLIC	?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Xlen
PUBLIC	?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@4

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@4
	jmp	SHORT $LN3@Buy@4
$LN4@Buy@4:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@4

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@4
$LN2@Buy@4:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN3@Buy@4:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@4:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Buy
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::deallocate
PUBLIC	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Destroy
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@4

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::deallocate
$LN1@Tidy@4:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
PUBLIC	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T70805 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T70805[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
__ehhandler$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@XZ PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@XZ ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
_TEXT	ENDS
PUBLIC	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@6
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN1@operator@6:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR __Pos$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]

; 786  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator[]
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::allocate
PUBLIC	?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Xlen
PUBLIC	?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@5

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@5
	jmp	SHORT $LN3@Buy@5
$LN4@Buy@5:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@5

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@5
$LN2@Buy@5:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN3@Buy@5:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@5:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Buy
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::deallocate
PUBLIC	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Destroy
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Tidy@5

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	mov	eax, ecx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::deallocate
$LN1@Tidy@5:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
PUBLIC	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T70832 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z PROC ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T70832[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>

; 426  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
__ehhandler$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z ENDP ; std::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Vector_val<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::~_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@XZ PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@XZ ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::max_size
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T70856 = -80						; size = 28
$T70855 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T70856[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T70856[ebp]
	push	eax
	lea	ecx, DWORD PTR $T70855[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T70855[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T70856[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T70856[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Xlen
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR __Message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 27   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1logic_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1logic_error@std@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1logic_error@std@@UAE@XZ$1
__ehfuncinfo$??1logic_error@std@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1logic_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 31   : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1logic_error@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??1logic_error@std@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1logic_error@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1logic_error@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Odtp
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@17
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@17:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1length_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1length_error@std@@UAE@XZ$0
__ehfuncinfo$??1length_error@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1length_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1length_error@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 110  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1length_error@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??1length_error@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1length_error@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1length_error@std@@UAE@XZ		; std::length_error::~length_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@18
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@18:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
PUBLIC	??$?0UAnimRange@BaseKeyFrameArray@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BaseKeyFrameArray::AnimRange>
PUBLIC	??0_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::_Container_base_aux
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T70923 = -24						; size = 4
$T70922 = -20						; size = 4
$T70921 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0UAnimRange@BaseKeyFrameArray@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BaseKeyFrameArray::AnimRange>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T70923[ebp], eax
	mov	ecx, DWORD PTR $T70923[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T70922[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T70922[ebp], 0
	je	SHORT $LN3@Container_
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T70922[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_
$LN3@Container_:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T70921[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T70921[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T70923[ebp]
	push	eax
	mov	ecx, DWORD PTR $T70922[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAE@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Container_base_aux_alloc_real<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 58   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 60   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 63   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 64   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pcont$ = 8						; size = 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z PROC	; std::_Aux_cont::_Aux_cont, COMDAT
; _this$ = ecx

; 364  : 	explicit _Aux_cont(const _Container_base_aux * const _Pcont)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pcont$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ENDP	; std::_Aux_cont::_Aux_cont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::_Container_base_aux, COMDAT
; _this$ = ecx

; 379  : 	_Container_base_aux()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  : 		{
; 381  : 		// Do nothing: _Container_base_aux_alloc_real() will construct the aux object.
; 382  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::_Container_base_aux
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocator<Ogre::BaseKeyFrameArray::AnimRange>
_TEXT	ENDS
PUBLIC	??$_Allocate@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z PROC ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::BaseKeyFrameArray::AnimRange>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ENDP ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T70953 = -80						; size = 28
$T70952 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T70953[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T70953[ebp]
	push	eax
	lea	ecx, DWORD PTR $T70952[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T70952[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T70953[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@2:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T70953[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Xlen
PUBLIC	??$?0UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<float>::KEYFRAME_T>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T70965 = -24						; size = 4
$T70964 = -20						; size = 4
$T70963 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<float>::KEYFRAME_T>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T70965[ebp], eax
	mov	ecx, DWORD PTR $T70965[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T70964[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T70964[ebp], 0
	je	SHORT $LN3@Container_@2
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T70964[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@2
$LN3@Container_@2:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@2:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T70963[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T70963[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T70965[ebp]
	push	eax
	mov	ecx, DWORD PTR $T70964[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::KeyFrameArray<float>::KEYFRAME_T>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 3

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T70991 = -80						; size = 28
$T70990 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T70991[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T70991[ebp]
	push	eax
	lea	ecx, DWORD PTR $T70990[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T70990[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T70991[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@3:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T70991[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Xlen
PUBLIC	??$?0UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T71003 = -24						; size = 4
$T71002 = -20						; size = 4
$T71001 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<float>::CONTROL_POINT_T>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T71003[ebp], eax
	mov	ecx, DWORD PTR $T71003[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T71002[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T71002[ebp], 0
	je	SHORT $LN3@Container_@3
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T71002[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@3
$LN3@Container_@3:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@3:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T71001[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T71001[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T71003[ebp]
	push	eax
	mov	ecx, DWORD PTR $T71002[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::max_size
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Destroy
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T71027 = -80						; size = 28
$T71026 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T71027[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T71027[ebp]
	push	eax
	lea	ecx, DWORD PTR $T71026[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T71026[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T71027[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@4:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T71027[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Xlen
PUBLIC	??$?0UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T71039 = -24						; size = 4
$T71038 = -20						; size = 4
$T71037 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T71039[ebp], eax
	mov	ecx, DWORD PTR $T71039[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T71038[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T71038[ebp], 0
	je	SHORT $LN3@Container_@4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T71038[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@4
$LN3@Container_@4:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@4:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T71037[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T71037[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T71039[ebp]
	push	eax
	mov	ecx, DWORD PTR $T71038[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::allocate
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx

; 727  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QBEIXZ ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::max_size

; 732  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Destroy
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T71065 = -80						; size = 28
$T71064 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T71065[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T71065[ebp]
	push	eax
	lea	ecx, DWORD PTR $T71064[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T71064[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T71065[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@5:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T71065[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Xlen
PUBLIC	??$?0UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T71077 = -24						; size = 4
$T71076 = -20						; size = 4
$T71075 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T71077[ebp], eax
	mov	ecx, DWORD PTR $T71077[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T71076[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T71076[ebp], 0
	je	SHORT $LN3@Container_@5
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T71076[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@5
$LN3@Container_@5:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@5:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T71075[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T71075[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z$1:
	mov	eax, DWORD PTR $T71077[ebp]
	push	eax
	mov	ecx, DWORD PTR $T71076[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAE@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Container_base_aux_alloc_real<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IPAU123@@Z ; std::_Allocate<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::allocate
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::allocate
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@2
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@2
$LN3@max_size@2:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::max_size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@3
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@3
$LN3@max_size@3:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@3:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::max_size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 268435455	; 0fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@4
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@4
$LN3@max_size@4:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@4:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::max_size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QBEIXZ PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 178956970	; 0aaaaaaaH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@5
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@5
$LN3@max_size@5:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@5:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QBEIXZ ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::max_size
_TEXT	ENDS
PUBLIC	?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::resize
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrearchive.h
;	COMDAT ??$serializeRawArray@UAnimRange@BaseKeyFrameArray@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = -4						; size = 4
_array$ = 8						; size = 4
??$serializeRawArray@UAnimRange@BaseKeyFrameArray@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@Z PROC ; Ogre::Archive::serializeRawArray<Ogre::BaseKeyFrameArray::AnimRange>, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			uint num;
; 123  : 			if(isLoading())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@serializeR

; 124  : 			{
; 125  : 				read(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read

; 126  : 				array.resize(num);

	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::resize

; 127  : 				if(num > 0) read(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN3@serializeR
	mov	eax, DWORD PTR _num$[ebp]
	shl	eax, 3
	push	eax
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read
$LN3@serializeR:

; 128  : 			}
; 129  : 			else

	jmp	SHORT $LN2@serializeR
$LN4@serializeR:

; 130  : 			{
; 131  : 				num = (uint)array.size();

	mov	ecx, DWORD PTR _array$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	mov	DWORD PTR _num$[ebp], eax

; 132  : 				write(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write

; 133  : 				if(num > 0) write(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN2@serializeR
	mov	edx, DWORD PTR _num$[ebp]
	shl	edx, 3
	push	edx
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write
$LN2@serializeR:

; 134  : 			}
; 135  : 
; 136  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 137  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawArray@UAnimRange@BaseKeyFrameArray@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@@Z ENDP ; Ogre::Archive::serializeRawArray<Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$serializeRawType@W4InterpolType@Ogre@@@Archive@Ogre@@QAEXAAW4InterpolType@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??$serializeRawType@W4InterpolType@Ogre@@@Archive@Ogre@@QAEXAAW4InterpolType@1@@Z PROC ; Ogre::Archive::serializeRawType<enum Ogre::InterpolType>, COMDAT
; _this$ = ecx

; 97   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 			serialize(&value, sizeof(T));

	push	4
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@Archive@Ogre@@QAEAAV12@PAXI@Z ; Ogre::Archive::serialize

; 99   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawType@W4InterpolType@Ogre@@@Archive@Ogre@@QAEXAAW4InterpolType@1@@Z ENDP ; Ogre::Archive::serializeRawType<enum Ogre::InterpolType>
_TEXT	ENDS
PUBLIC	?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::resize
; Function compile flags: /Odtp
;	COMDAT ??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = -4						; size = 4
_array$ = 8						; size = 4
??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z PROC ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<float>::KEYFRAME_T>, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			uint num;
; 123  : 			if(isLoading())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@serializeR@2

; 124  : 			{
; 125  : 				read(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read

; 126  : 				array.resize(num);

	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::resize

; 127  : 				if(num > 0) read(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN3@serializeR@2
	mov	eax, DWORD PTR _num$[ebp]
	shl	eax, 3
	push	eax
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read
$LN3@serializeR@2:

; 128  : 			}
; 129  : 			else

	jmp	SHORT $LN2@serializeR@2
$LN4@serializeR@2:

; 130  : 			{
; 131  : 				num = (uint)array.size();

	mov	ecx, DWORD PTR _array$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	mov	DWORD PTR _num$[ebp], eax

; 132  : 				write(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write

; 133  : 				if(num > 0) write(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN2@serializeR@2
	mov	edx, DWORD PTR _num$[ebp]
	shl	edx, 3
	push	edx
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write
$LN2@serializeR@2:

; 134  : 			}
; 135  : 
; 136  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 137  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z ENDP ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<float>::KEYFRAME_T>
_TEXT	ENDS
PUBLIC	?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::resize
; Function compile flags: /Odtp
;	COMDAT ??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = -4						; size = 4
_array$ = 8						; size = 4
??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z PROC ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			uint num;
; 123  : 			if(isLoading())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@serializeR@3

; 124  : 			{
; 125  : 				read(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read

; 126  : 				array.resize(num);

	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::resize

; 127  : 				if(num > 0) read(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN3@serializeR@3
	mov	eax, DWORD PTR _num$[ebp]
	shl	eax, 3
	push	eax
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read
$LN3@serializeR@3:

; 128  : 			}
; 129  : 			else

	jmp	SHORT $LN2@serializeR@3
$LN4@serializeR@3:

; 130  : 			{
; 131  : 				num = (uint)array.size();

	mov	ecx, DWORD PTR _array$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	mov	DWORD PTR _num$[ebp], eax

; 132  : 				write(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write

; 133  : 				if(num > 0) write(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN2@serializeR@3
	mov	edx, DWORD PTR _num$[ebp]
	shl	edx, 3
	push	edx
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write
$LN2@serializeR@3:

; 134  : 			}
; 135  : 
; 136  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 137  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@@Z ENDP ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
_TEXT	ENDS
PUBLIC	?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::resize
; Function compile flags: /Odtp
;	COMDAT ??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = -4						; size = 4
_array$ = 8						; size = 4
??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@@Z PROC ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			uint num;
; 123  : 			if(isLoading())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@serializeR@4

; 124  : 			{
; 125  : 				read(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read

; 126  : 				array.resize(num);

	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::resize

; 127  : 				if(num > 0) read(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN3@serializeR@4
	mov	eax, DWORD PTR _num$[ebp]
	shl	eax, 4
	push	eax
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read
$LN3@serializeR@4:

; 128  : 			}
; 129  : 			else

	jmp	SHORT $LN2@serializeR@4
$LN4@serializeR@4:

; 130  : 			{
; 131  : 				num = (uint)array.size();

	mov	ecx, DWORD PTR _array$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::size
	mov	DWORD PTR _num$[ebp], eax

; 132  : 				write(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write

; 133  : 				if(num > 0) write(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN2@serializeR@4
	mov	edx, DWORD PTR _num$[ebp]
	shl	edx, 4
	push	edx
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write
$LN2@serializeR@4:

; 134  : 			}
; 135  : 
; 136  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 137  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawArray@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@@Z ENDP ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
_TEXT	ENDS
PUBLIC	?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::resize
; Function compile flags: /Odtp
;	COMDAT ??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = -4						; size = 4
_array$ = 8						; size = 4
??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@@Z PROC ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>, COMDAT
; _this$ = ecx

; 121  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 			uint num;
; 123  : 			if(isLoading())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isLoading@Archive@Ogre@@QAE_NXZ	; Ogre::Archive::isLoading
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@serializeR@5

; 124  : 			{
; 125  : 				read(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read

; 126  : 				array.resize(num);

	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::resize

; 127  : 				if(num > 0) read(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN3@serializeR@5
	mov	eax, DWORD PTR _num$[ebp]
	imul	eax, 24					; 00000018H
	push	eax
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@Archive@Ogre@@QAEXPAXI@Z		; Ogre::Archive::read
$LN3@serializeR@5:

; 128  : 			}
; 129  : 			else

	jmp	SHORT $LN2@serializeR@5
$LN4@serializeR@5:

; 130  : 			{
; 131  : 				num = (uint)array.size();

	mov	ecx, DWORD PTR _array$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::size
	mov	DWORD PTR _num$[ebp], eax

; 132  : 				write(&num, sizeof(num));

	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write

; 133  : 				if(num > 0) write(&array[0], num*sizeof(T));

	cmp	DWORD PTR _num$[ebp], 0
	jbe	SHORT $LN2@serializeR@5
	mov	edx, DWORD PTR _num$[ebp]
	imul	edx, 24					; 00000018H
	push	edx
	push	0
	mov	ecx, DWORD PTR _array$[ebp]
	call	??A?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@Archive@Ogre@@QAEXPBXI@Z		; Ogre::Archive::write
$LN2@serializeR@5:

; 134  : 			}
; 135  : 
; 136  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 137  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$serializeRawArray@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Archive@Ogre@@QAEAAV01@AAV?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@@Z ENDP ; Ogre::Archive::serializeRawArray<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
_TEXT	ENDS
PUBLIC	?Lerp@Ogre@@YAMMMM@Z				; Ogre::Lerp
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrekeyframearray.h
;	COMDAT ??$KEYFRAME_LERP@M@Ogre@@YAXAAMMABM1@Z
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_t$ = 12						; size = 4
_src1$ = 16						; size = 4
_src2$ = 20						; size = 4
??$KEYFRAME_LERP@M@Ogre@@YAXAAMMABM1@Z PROC		; Ogre::KEYFRAME_LERP<float>, COMDAT

; 24   : 	{

	push	ebp
	mov	ebp, esp

; 25   : 		dest = Lerp(src1, src2, t);

	push	ecx
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _src2$[ebp]
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _src1$[ebp]
	push	ecx
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [esp]
	call	?Lerp@Ogre@@YAMMMM@Z			; Ogre::Lerp
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _dest$[ebp]
	fstp	DWORD PTR [edx]

; 26   : 	}

	pop	ebp
	ret	0
??$KEYFRAME_LERP@M@Ogre@@YAXAAMMABM1@Z ENDP		; Ogre::KEYFRAME_LERP<float>
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
_TEXT	ENDS
;	COMDAT ?Lerp@Ogre@@YAMMMM@Z
_TEXT	SEGMENT
tv74 = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_t$ = 16						; size = 4
?Lerp@Ogre@@YAMMMM@Z PROC				; Ogre::Lerp, COMDAT

; 135  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 136  : 		return v1+(v2-v1)*t;

	fld	DWORD PTR _v2$[ebp]
	fsub	DWORD PTR _v1$[ebp]
	fmul	DWORD PTR _t$[ebp]
	fadd	DWORD PTR _v1$[ebp]
	fstp	DWORD PTR tv74[ebp]
	fld	DWORD PTR tv74[ebp]

; 137  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@Ogre@@YAMMMM@Z ENDP				; Ogre::Lerp
_TEXT	ENDS
PUBLIC	__real@c000000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@4000000000000000
;	COMDAT __real@c000000000000000
; File i:\svnroot\client\ogremain\ogrekeyframearray.h
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??$KEYFRAME_HERMITE@M@Ogre@@YAXAAMMABM111@Z
_TEXT	SEGMENT
_h3$ = -16						; size = 4
_h4$ = -12						; size = 4
_h1$ = -8						; size = 4
_h2$ = -4						; size = 4
_dest$ = 8						; size = 4
_r$ = 12						; size = 4
_v1$ = 16						; size = 4
_v2$ = 20						; size = 4
_in$ = 24						; size = 4
_out$ = 28						; size = 4
??$KEYFRAME_HERMITE@M@Ogre@@YAXAAMMABM111@Z PROC	; Ogre::KEYFRAME_HERMITE<float>, COMDAT

; 35   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 36   : 		// basis functions
; 37   : 		float h1 = 2.0f*r*r*r - 3.0f*r*r + 1.0f;

	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fmul	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fmul	DWORD PTR _r$[ebp]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR _h1$[ebp]

; 38   : 		float h2 = -2.0f*r*r*r + 3.0f*r*r;

	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@c000000000000000
	fmul	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fmul	DWORD PTR _r$[ebp]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _h2$[ebp]

; 39   : 		float h3 = r*r*r - 2.0f*r*r + r;

	fld	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fmul	DWORD PTR _r$[ebp]
	fsubp	ST(1), ST(0)
	fadd	DWORD PTR _r$[ebp]
	fstp	DWORD PTR _h3$[ebp]

; 40   : 		float h4 = r*r*r - r*r;

	fld	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fld	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _h4$[ebp]

; 41   : 
; 42   : 		// interpolation
; 43   : 		dest = v1*h1 + v2*h2 + in*h3 + out*h4;

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR _h2$[ebp]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _in$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR _h3$[ebp]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _out$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _h4$[ebp]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _dest$[ebp]
	fstp	DWORD PTR [ecx]

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$KEYFRAME_HERMITE@M@Ogre@@YAXAAMMABM111@Z ENDP	; Ogre::KEYFRAME_HERMITE<float>
_TEXT	ENDS
PUBLIC	?Lerp@Ogre@@YA?AVVector3@1@ABV21@0M@Z		; Ogre::Lerp
; Function compile flags: /Odtp
;	COMDAT ??$KEYFRAME_LERP@VVector3@Ogre@@@Ogre@@YAXAAVVector3@0@MABV10@1@Z
_TEXT	SEGMENT
$T71153 = -12						; size = 12
_dest$ = 8						; size = 4
_t$ = 12						; size = 4
_src1$ = 16						; size = 4
_src2$ = 20						; size = 4
??$KEYFRAME_LERP@VVector3@Ogre@@@Ogre@@YAXAAVVector3@0@MABV10@1@Z PROC ; Ogre::KEYFRAME_LERP<Ogre::Vector3>, COMDAT

; 24   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 25   : 		dest = Lerp(src1, src2, t);

	push	ecx
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _src2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src1$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T71153[ebp]
	push	edx
	call	?Lerp@Ogre@@YA?AVVector3@1@ABV21@0M@Z	; Ogre::Lerp
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 26   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$KEYFRAME_LERP@VVector3@Ogre@@@Ogre@@YAXAAVVector3@0@MABV10@1@Z ENDP ; Ogre::KEYFRAME_LERP<Ogre::Vector3>
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
_TEXT	ENDS
;	COMDAT ?Lerp@Ogre@@YA?AVVector3@1@ABV21@0M@Z
_TEXT	SEGMENT
tv147 = -12						; size = 4
tv142 = -8						; size = 4
tv137 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_t$ = 20						; size = 4
?Lerp@Ogre@@YA?AVVector3@1@ABV21@0M@Z PROC		; Ogre::Lerp, COMDAT

; 258  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 259  : 		return Vector3(v1.x+(v2.x-v1.x)*t, v1.y+(v2.y-v1.y)*t,v1.z+(v2.z-v1.z)*t );

	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v1$[ebp]
	fsub	DWORD PTR [ecx+8]
	fmul	DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	fadd	DWORD PTR [edx+8]
	fstp	DWORD PTR tv137[ebp]
	fld	DWORD PTR tv137[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _v1$[ebp]
	fsub	DWORD PTR [ecx+4]
	fmul	DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	fadd	DWORD PTR [edx+4]
	fstp	DWORD PTR tv142[ebp]
	fld	DWORD PTR tv142[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v1$[ebp]
	fsub	DWORD PTR [ecx]
	fmul	DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR tv147[ebp]
	fld	DWORD PTR tv147[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 260  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?Lerp@Ogre@@YA?AVVector3@1@ABV21@0M@Z ENDP		; Ogre::Lerp
_TEXT	ENDS
PUBLIC	??HOgre@@YA?AVVector3@0@ABV10@0@Z		; Ogre::operator+
PUBLIC	??DOgre@@YA?AVVector3@0@ABV10@M@Z		; Ogre::operator*
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrekeyframearray.h
;	COMDAT ??$KEYFRAME_HERMITE@VVector3@Ogre@@@Ogre@@YAXAAVVector3@0@MABV10@111@Z
_TEXT	SEGMENT
$T71164 = -100						; size = 12
$T71163 = -88						; size = 12
$T71162 = -76						; size = 12
$T71161 = -64						; size = 12
$T71160 = -52						; size = 12
$T71159 = -40						; size = 12
$T71158 = -28						; size = 12
_h3$ = -16						; size = 4
_h4$ = -12						; size = 4
_h1$ = -8						; size = 4
_h2$ = -4						; size = 4
_dest$ = 8						; size = 4
_r$ = 12						; size = 4
_v1$ = 16						; size = 4
_v2$ = 20						; size = 4
_in$ = 24						; size = 4
_out$ = 28						; size = 4
??$KEYFRAME_HERMITE@VVector3@Ogre@@@Ogre@@YAXAAVVector3@0@MABV10@111@Z PROC ; Ogre::KEYFRAME_HERMITE<Ogre::Vector3>, COMDAT

; 35   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H

; 36   : 		// basis functions
; 37   : 		float h1 = 2.0f*r*r*r - 3.0f*r*r + 1.0f;

	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fmul	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fmul	DWORD PTR _r$[ebp]
	fsubp	ST(1), ST(0)
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR _h1$[ebp]

; 38   : 		float h2 = -2.0f*r*r*r + 3.0f*r*r;

	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@c000000000000000
	fmul	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fmul	DWORD PTR _r$[ebp]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _h2$[ebp]

; 39   : 		float h3 = r*r*r - 2.0f*r*r + r;

	fld	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fld	DWORD PTR _r$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fmul	DWORD PTR _r$[ebp]
	fsubp	ST(1), ST(0)
	fadd	DWORD PTR _r$[ebp]
	fstp	DWORD PTR _h3$[ebp]

; 40   : 		float h4 = r*r*r - r*r;

	fld	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fld	DWORD PTR _r$[ebp]
	fmul	DWORD PTR _r$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _h4$[ebp]

; 41   : 
; 42   : 		// interpolation
; 43   : 		dest = v1*h1 + v2*h2 + in*h3 + out*h4;

	push	ecx
	fld	DWORD PTR _h4$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T71158[ebp]
	push	ecx
	call	??DOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	ecx
	fld	DWORD PTR _h3$[ebp]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	lea	eax, DWORD PTR $T71159[ebp]
	push	eax
	call	??DOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	ecx
	fld	DWORD PTR _h2$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T71160[ebp]
	push	edx
	call	??DOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	ecx
	fld	DWORD PTR _h1$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T71161[ebp]
	push	ecx
	call	??DOgre@@YA?AVVector3@0@ABV10@M@Z	; Ogre::operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T71162[ebp]
	push	edx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T71163[ebp]
	push	eax
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T71164[ebp]
	push	ecx
	call	??HOgre@@YA?AVVector3@0@ABV10@0@Z	; Ogre::operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$KEYFRAME_HERMITE@VVector3@Ogre@@@Ogre@@YAXAAVVector3@0@MABV10@111@Z ENDP ; Ogre::KEYFRAME_HERMITE<Ogre::Vector3>
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogrevector3.h
_TEXT	ENDS
;	COMDAT ??HOgre@@YA?AVVector3@0@ABV10@0@Z
_TEXT	SEGMENT
tv92 = -12						; size = 4
tv89 = -8						; size = 4
tv86 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??HOgre@@YA?AVVector3@0@ABV10@0@Z PROC			; Ogre::operator+, COMDAT

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 165  : 		return Vector3(v1.x+v2.x, v1.y+v2.y, v1.z+v2.z);

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v2$[ebp]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v2$[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _v2$[ebp]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 166  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??HOgre@@YA?AVVector3@0@ABV10@0@Z ENDP			; Ogre::operator+
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??DOgre@@YA?AVVector3@0@ABV10@M@Z
_TEXT	SEGMENT
tv87 = -12						; size = 4
tv85 = -8						; size = 4
tv83 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_s$ = 16						; size = 4
??DOgre@@YA?AVVector3@0@ABV10@M@Z PROC			; Ogre::operator*, COMDAT

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 190  : 		return Vector3(v1.x*s, v1.y*s, v1.z*s);

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv85[ebp]
	fld	DWORD PTR tv85[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR tv87[ebp]
	fld	DWORD PTR tv87[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector3@Ogre@@QAE@MMM@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 191  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??DOgre@@YA?AVVector3@0@ABV10@M@Z ENDP			; Ogre::operator*
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
PUBLIC	??$_Ptr_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@@Z
_TEXT	SEGMENT
$T71171 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 8
	mov	BYTE PTR $T71171[ebp], al
	movzx	edx, BYTE PTR $T71171[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0UAnimRange@BaseKeyFrameArray@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0UAnimRange@BaseKeyFrameArray@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BaseKeyFrameArray::AnimRange>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0UAnimRange@BaseKeyFrameArray@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::BaseKeyFrameArray::AnimRange>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Allocate@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@IPAU123@@Z
_TEXT	SEGMENT
$T71176 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@IPAU123@@Z PROC ; std::_Allocate<Ogre::BaseKeyFrameArray::AnimRange>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 8
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T71176[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T71176[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@IPAU123@@Z ENDP ; std::_Allocate<Ogre::BaseKeyFrameArray::AnimRange>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@PBD@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0bad_alloc@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0bad_alloc@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_alloc@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0
__ehfuncinfo$??1bad_alloc@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_alloc@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1bad_alloc@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 381  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??1bad_alloc@std@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1bad_alloc@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ		; std::bad_alloc::~bad_alloc
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@19
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@19:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
PUBLIC	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@@Z
_TEXT	SEGMENT
$T71199 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T71199[ebp], al
	movzx	edx, BYTE PTR $T71199[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<float>::KEYFRAME_T>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z
_TEXT	SEGMENT
$T71204 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z PROC ; std::_Allocate<Ogre::KeyFrameArray<float>::KEYFRAME_T>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 8
	jae	SHORT $LN2@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T71204[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T71204[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z ENDP ; std::_Allocate<Ogre::KeyFrameArray<float>::KEYFRAME_T>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@@Z
_TEXT	SEGMENT
$T71207 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T71207[ebp], al
	movzx	edx, BYTE PTR $T71207[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<float>::CONTROL_POINT_T>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z
_TEXT	SEGMENT
$T71212 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z PROC ; std::_Allocate<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@3
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 8
	jae	SHORT $LN2@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T71212[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T71212[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@3:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IPAU123@@Z ENDP ; std::_Allocate<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
PUBLIC	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@@Z
_TEXT	SEGMENT
$T71215 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T71215[ebp], al
	movzx	edx, BYTE PTR $T71215[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IPAU123@@Z
_TEXT	SEGMENT
$T71220 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IPAU123@@Z PROC ; std::_Allocate<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@4
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 16					; 00000010H
	jae	SHORT $LN2@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T71220[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T71220[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 4
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@4:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IPAU123@@Z ENDP ; std::_Allocate<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
PUBLIC	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@@Z
_TEXT	SEGMENT
$T71223 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T71223[ebp], al
	movzx	edx, BYTE PTR $T71223[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IPAU123@@Z
_TEXT	SEGMENT
$T71228 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IPAU123@@Z PROC ; std::_Allocate<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@5

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@5
$LN3@Allocate@5:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 24					; 00000018H
	jae	SHORT $LN2@Allocate@5

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T71228[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T71228[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@5:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 24					; 00000018H
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@5:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IPAU123@@Z ENDP ; std::_Allocate<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z
_TEXT	SEGMENT
$T71231 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z PROC ; std::_Allocate<std::_Aux_cont>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@6

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@6
$LN3@Allocate@6:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@6

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T71231[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T71231[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@6:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@6:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ENDP ; std::_Allocate<std::_Aux_cont>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
PUBLIC	?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXIUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::resize
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T71243 = -8						; size = 8
__Newsize$ = 8						; size = 4
?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXI@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::resize, COMDAT
; _this$ = ecx

; 712  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		resize(_Newsize, _Ty());

	xor	eax, eax
	mov	DWORD PTR $T71243[ebp], eax
	mov	DWORD PTR $T71243[ebp+4], eax
	mov	ecx, DWORD PTR $T71243[ebp+4]
	push	ecx
	mov	edx, DWORD PTR $T71243[ebp]
	push	edx
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXIUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::resize

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::resize
_TEXT	ENDS
PUBLIC	?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::resize
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T71246 = -8						; size = 8
__Newsize$ = 8						; size = 4
?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::resize, COMDAT
; _this$ = ecx

; 712  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		resize(_Newsize, _Ty());

	xor	eax, eax
	mov	DWORD PTR $T71246[ebp], eax
	mov	DWORD PTR $T71246[ebp+4], eax
	mov	ecx, DWORD PTR $T71246[ebp+4]
	push	ecx
	mov	edx, DWORD PTR $T71246[ebp]
	push	edx
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::resize

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::resize
_TEXT	ENDS
PUBLIC	?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::resize
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T71249 = -8						; size = 8
__Newsize$ = 8						; size = 4
?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::resize, COMDAT
; _this$ = ecx

; 712  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		resize(_Newsize, _Ty());

	xor	eax, eax
	mov	DWORD PTR $T71249[ebp], eax
	mov	DWORD PTR $T71249[ebp+4], eax
	mov	ecx, DWORD PTR $T71249[ebp+4]
	push	ecx
	mov	edx, DWORD PTR $T71249[ebp]
	push	edx
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::resize

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::resize
_TEXT	ENDS
PUBLIC	?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::resize
PUBLIC	??0KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ ; Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T::KEYFRAME_T
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::resize, COMDAT
; _this$ = ecx

; 712  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		resize(_Newsize, _Ty());

	sub	esp, 16					; 00000010H
	mov	ecx, esp
	call	??0KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::resize

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::resize
_TEXT	ENDS
PUBLIC	?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::resize
PUBLIC	??0CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ ; Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T::CONTROL_POINT_T
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::resize, COMDAT
; _this$ = ecx

; 712  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		resize(_Newsize, _Ty());

	sub	esp, 24					; 00000018H
	mov	ecx, esp
	call	??0CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::resize

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::resize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ PROC ; Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T::KEYFRAME_T, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ ENDP ; Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T::KEYFRAME_T
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ PROC ; Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T::CONTROL_POINT_T, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@XZ			; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@XZ ENDP ; Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T::CONTROL_POINT_T
_TEXT	ENDS
PUBLIC	?erase@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::erase
PUBLIC	??H?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+
PUBLIC	?begin@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::begin
PUBLIC	?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Insert_n
PUBLIC	?end@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::end
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXIUAnimRange@BaseKeyFrameArray@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T71269 = -64						; size = 8
$T71268 = -56						; size = 8
$T71267 = -48						; size = 8
$T71266 = -40						; size = 8
$T71265 = -32						; size = 8
$T71264 = -24						; size = 8
$T71263 = -16						; size = 8
$T71262 = -8						; size = 8
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 8
?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXIUAnimRange@BaseKeyFrameArray@Ogre@@@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 		if (size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	lea	eax, DWORD PTR $T71263[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T71262[ebp], ecx
	mov	DWORD PTR $T71262[ebp+4], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR $T71262[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T71262[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Insert_n
	jmp	SHORT $LN4@resize
$LN3@resize:

; 720  : 		else if (_Newsize < size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN4@resize

; 721  : 			erase(begin() + _Newsize, end());

	lea	ecx, DWORD PTR $T71265[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::end
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T71264[ebp], edx
	mov	DWORD PTR $T71264[ebp+4], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T71268[ebp]
	push	edx
	lea	eax, DWORD PTR $T71267[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::begin
	mov	ecx, eax
	call	??H?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T71266[ebp], ecx
	mov	DWORD PTR $T71266[ebp+4], edx
	mov	eax, DWORD PTR $T71264[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T71264[ebp]
	push	ecx
	mov	edx, DWORD PTR $T71266[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T71266[ebp]
	push	eax
	lea	ecx, DWORD PTR $T71269[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::erase
$LN4@resize:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?resize@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEXIUAnimRange@BaseKeyFrameArray@Ogre@@@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::resize
_TEXT	ENDS
PUBLIC	?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::erase
PUBLIC	??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+
PUBLIC	?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::begin
PUBLIC	?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Insert_n
PUBLIC	?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::end
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T71279 = -64						; size = 8
$T71278 = -56						; size = 8
$T71277 = -48						; size = 8
$T71276 = -40						; size = 8
$T71275 = -32						; size = 8
$T71274 = -24						; size = 8
$T71273 = -16						; size = 8
$T71272 = -8						; size = 8
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 8
?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 		if (size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize@2

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	lea	eax, DWORD PTR $T71273[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T71272[ebp], ecx
	mov	DWORD PTR $T71272[ebp+4], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR $T71272[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T71272[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Insert_n
	jmp	SHORT $LN4@resize@2
$LN3@resize@2:

; 720  : 		else if (_Newsize < size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN4@resize@2

; 721  : 			erase(begin() + _Newsize, end());

	lea	ecx, DWORD PTR $T71275[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::end
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T71274[ebp], edx
	mov	DWORD PTR $T71274[ebp+4], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T71278[ebp]
	push	edx
	lea	eax, DWORD PTR $T71277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::begin
	mov	ecx, eax
	call	??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T71276[ebp], ecx
	mov	DWORD PTR $T71276[ebp+4], edx
	mov	eax, DWORD PTR $T71274[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T71274[ebp]
	push	ecx
	mov	edx, DWORD PTR $T71276[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T71276[ebp]
	push	eax
	lea	ecx, DWORD PTR $T71279[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::erase
$LN4@resize@2:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::resize
_TEXT	ENDS
PUBLIC	?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::erase
PUBLIC	??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+
PUBLIC	?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::begin
PUBLIC	?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Insert_n
PUBLIC	?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::end
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T71289 = -64						; size = 8
$T71288 = -56						; size = 8
$T71287 = -48						; size = 8
$T71286 = -40						; size = 8
$T71285 = -32						; size = 8
$T71284 = -24						; size = 8
$T71283 = -16						; size = 8
$T71282 = -8						; size = 8
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 8
?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 		if (size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize@3

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	lea	eax, DWORD PTR $T71283[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T71282[ebp], ecx
	mov	DWORD PTR $T71282[ebp+4], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR $T71282[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T71282[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Insert_n
	jmp	SHORT $LN4@resize@3
$LN3@resize@3:

; 720  : 		else if (_Newsize < size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN4@resize@3

; 721  : 			erase(begin() + _Newsize, end());

	lea	ecx, DWORD PTR $T71285[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::end
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T71284[ebp], edx
	mov	DWORD PTR $T71284[ebp+4], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T71288[ebp]
	push	edx
	lea	eax, DWORD PTR $T71287[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::begin
	mov	ecx, eax
	call	??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T71286[ebp], ecx
	mov	DWORD PTR $T71286[ebp+4], edx
	mov	eax, DWORD PTR $T71284[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T71284[ebp]
	push	ecx
	mov	edx, DWORD PTR $T71286[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T71286[ebp]
	push	eax
	lea	ecx, DWORD PTR $T71289[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::erase
$LN4@resize@3:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::resize
_TEXT	ENDS
PUBLIC	?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::erase
PUBLIC	??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator+
PUBLIC	?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::begin
PUBLIC	?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Insert_n
PUBLIC	?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::end
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T71299 = -64						; size = 8
$T71298 = -56						; size = 8
$T71297 = -48						; size = 8
$T71296 = -40						; size = 8
$T71295 = -32						; size = 8
$T71294 = -24						; size = 8
$T71293 = -16						; size = 8
$T71292 = -8						; size = 8
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 16
?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 		if (size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize@4

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	lea	eax, DWORD PTR $T71293[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T71292[ebp], ecx
	mov	DWORD PTR $T71292[ebp+4], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR $T71292[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T71292[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Insert_n
	jmp	SHORT $LN4@resize@4
$LN3@resize@4:

; 720  : 		else if (_Newsize < size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN4@resize@4

; 721  : 			erase(begin() + _Newsize, end());

	lea	ecx, DWORD PTR $T71295[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::end
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T71294[ebp], edx
	mov	DWORD PTR $T71294[ebp+4], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T71298[ebp]
	push	edx
	lea	eax, DWORD PTR $T71297[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::begin
	mov	ecx, eax
	call	??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator+
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T71296[ebp], ecx
	mov	DWORD PTR $T71296[ebp+4], edx
	mov	eax, DWORD PTR $T71294[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T71294[ebp]
	push	ecx
	mov	edx, DWORD PTR $T71296[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T71296[ebp]
	push	eax
	lea	ecx, DWORD PTR $T71299[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::erase
$LN4@resize@4:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?resize@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXIUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::resize
_TEXT	ENDS
PUBLIC	?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::erase
PUBLIC	??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator+
PUBLIC	?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::begin
PUBLIC	?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Insert_n
PUBLIC	?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::end
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T71309 = -64						; size = 8
$T71308 = -56						; size = 8
$T71307 = -48						; size = 8
$T71306 = -40						; size = 8
$T71305 = -32						; size = 8
$T71304 = -24						; size = 8
$T71303 = -16						; size = 8
$T71302 = -8						; size = 8
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 24
?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 		if (size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize@5

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	lea	eax, DWORD PTR $T71303[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T71302[ebp], ecx
	mov	DWORD PTR $T71302[ebp+4], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR $T71302[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T71302[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Insert_n
	jmp	SHORT $LN4@resize@5
$LN3@resize@5:

; 720  : 		else if (_Newsize < size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN4@resize@5

; 721  : 			erase(begin() + _Newsize, end());

	lea	ecx, DWORD PTR $T71305[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::end
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T71304[ebp], edx
	mov	DWORD PTR $T71304[ebp+4], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T71308[ebp]
	push	edx
	lea	eax, DWORD PTR $T71307[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::begin
	mov	ecx, eax
	call	??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator+
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T71306[ebp], ecx
	mov	DWORD PTR $T71306[ebp+4], edx
	mov	eax, DWORD PTR $T71304[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T71304[ebp]
	push	ecx
	mov	edx, DWORD PTR $T71306[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T71306[ebp]
	push	eax
	lea	ecx, DWORD PTR $T71309[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::erase
$LN4@resize@5:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?resize@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEXIUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::resize
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::end
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
PUBLIC	??9?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator!=
PUBLIC	?_Make_iter@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$65231 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$65231[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$65231[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$65231[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::erase
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
PUBLIC	??$fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z ; std::fill<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange>
PUBLIC	??$_Umove@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Umove<Ogre::BaseKeyFrameArray::AnimRange *>
PUBLIC	?_Ufill@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ufill
PUBLIC	?capacity@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::capacity
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$2
__catchsym$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$0
__unwindtable$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z
_TEXT	SEGMENT
tv84 = -60						; size = 4
_this$ = -56						; size = 4
__Tmp$65273 = -52					; size = 8
__Oldend$65274 = -44					; size = 4
__Tmp$65263 = -40					; size = 8
__Ncopied$65250 = -32					; size = 4
__Newvec$65248 = -28					; size = 4
__Whereoff$65249 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 44					; 0000002cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n
	jmp	$LN16@Insert_n
$LN14@Insert_n:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Xlen
	jmp	$LN16@Insert_n
$LN12@Insert_n:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n
$LN17@Insert_n:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	ecx, DWORD PTR __Capacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::allocate
	mov	DWORD PTR __Newvec$65248[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	mov	DWORD PTR __Whereoff$65249[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$65250[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereoff$65249[ebp]
	mov	ecx, DWORD PTR __Newvec$65248[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$65250[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$65250[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR __Newvec$65248[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Umove<Ogre::BaseKeyFrameArray::AnimRange *>

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$65250[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$65250[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR __Whereoff$65249[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$65248[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Umove<Ogre::BaseKeyFrameArray::AnimRange *>
	jmp	SHORT $LN19@Insert_n
__catch$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$65250[ebp], 1
	jle	SHORT $LN7@Insert_n

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$65249[ebp]
	mov	ecx, DWORD PTR __Newvec$65248[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR __Newvec$65248[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$65250[ebp], 0
	jle	SHORT $LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$65249[ebp]
	mov	edx, DWORD PTR __Newvec$65248[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	push	edx
	mov	eax, DWORD PTR __Whereoff$65249[ebp]
	mov	ecx, DWORD PTR __Newvec$65248[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$65248[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$1
	ret	0
$LN19@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$1:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN5@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@I@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::deallocate
$LN5@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$65248[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$65248[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$65248[ebp]
	mov	DWORD PTR [edx+12], eax
	jmp	$LN16@Insert_n
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 3
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$65263[ebp], ecx
	mov	DWORD PTR __Tmp$65263[ebp+4], edx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+4]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Umove<Ogre::BaseKeyFrameArray::AnimRange *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$65263[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 3
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ufill
	jmp	SHORT $LN21@Insert_n
__catch$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$3
	ret	0
$LN21@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	eax, DWORD PTR __Tmp$65263[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, ecx
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z ; std::fill<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	SHORT $LN16@Insert_n
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$65273[ebp], eax
	mov	DWORD PTR __Tmp$65273[ebp+4], ecx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR __Oldend$65274[ebp], eax

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Oldend$65274[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Oldend$65274[ebp]
	sub	edx, ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Umove<Ogre::BaseKeyFrameArray::AnimRange *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$65274[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Oldend$65274[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$_Unchecked_move_backward@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$65273[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z ; std::fill<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange>
	add	esp, 12					; 0000000cH
$LN16@Insert_n:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@IABUAnimRange@BaseKeyFrameArray@Ogre@@@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Insert_n
PUBLIC	??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::end
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
PUBLIC	??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator!=
PUBLIC	?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$65298 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@2

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$65298[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$65298[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$65298[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@2:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::erase
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
PUBLIC	??$fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T>
PUBLIC	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
PUBLIC	?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ufill
PUBLIC	?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::capacity
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$2
__catchsym$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$0
__unwindtable$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
tv84 = -60						; size = 4
_this$ = -56						; size = 4
__Tmp$65340 = -52					; size = 8
__Oldend$65341 = -44					; size = 4
__Tmp$65330 = -40					; size = 8
__Ncopied$65317 = -32					; size = 4
__Newvec$65315 = -28					; size = 4
__Whereoff$65316 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 44					; 0000002cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@2
	jmp	$LN16@Insert_n@2
$LN14@Insert_n@2:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n@2

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Xlen
	jmp	$LN16@Insert_n@2
$LN12@Insert_n@2:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@2

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@2
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@2
$LN17@Insert_n@2:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n@2:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n@2

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n@2:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	ecx, DWORD PTR __Capacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::allocate
	mov	DWORD PTR __Newvec$65315[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	mov	DWORD PTR __Whereoff$65316[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$65317[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereoff$65316[ebp]
	mov	ecx, DWORD PTR __Newvec$65315[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$65317[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$65317[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR __Newvec$65315[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<float>::KEYFRAME_T *>

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$65317[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$65317[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR __Whereoff$65316[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$65315[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	jmp	SHORT $LN19@Insert_n@2
__catch$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$65317[ebp], 1
	jle	SHORT $LN7@Insert_n@2

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$65316[ebp]
	mov	ecx, DWORD PTR __Newvec$65315[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR __Newvec$65315[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy
$LN7@Insert_n@2:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$65317[ebp], 0
	jle	SHORT $LN6@Insert_n@2

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$65316[ebp]
	mov	edx, DWORD PTR __Newvec$65315[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	push	edx
	mov	eax, DWORD PTR __Whereoff$65316[ebp]
	mov	ecx, DWORD PTR __Newvec$65315[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy
$LN6@Insert_n@2:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$65315[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$1
	ret	0
$LN19@Insert_n@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$1:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN5@Insert_n@2

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::deallocate
$LN5@Insert_n@2:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$65315[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$65315[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$65315[ebp]
	mov	DWORD PTR [edx+12], eax
	jmp	$LN16@Insert_n@2
$LN10@Insert_n@2:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 3
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@2

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$65330[ebp], ecx
	mov	DWORD PTR __Tmp$65330[ebp+4], edx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+4]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<float>::KEYFRAME_T *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$65330[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 3
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ufill
	jmp	SHORT $LN21@Insert_n@2
__catch$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$3
	ret	0
$LN21@Insert_n@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	eax, DWORD PTR __Tmp$65330[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, ecx
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	SHORT $LN16@Insert_n@2
$LN3@Insert_n@2:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$65340[ebp], eax
	mov	DWORD PTR __Tmp$65340[ebp+4], ecx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR __Oldend$65341[ebp], eax

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Oldend$65341[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Oldend$65341[ebp]
	sub	edx, ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$65341[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Oldend$65341[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$65340[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T>
	add	esp, 12					; 0000000cH
$LN16@Insert_n@2:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Insert_n
PUBLIC	??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::end
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
PUBLIC	??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator!=
PUBLIC	?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$65365 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@3

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$65365[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$65365[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$65365[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@3:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::erase
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
PUBLIC	??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
PUBLIC	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
PUBLIC	?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ufill
PUBLIC	?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::capacity
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$2
__catchsym$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$0
__unwindtable$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
tv84 = -60						; size = 4
_this$ = -56						; size = 4
__Tmp$65407 = -52					; size = 8
__Oldend$65408 = -44					; size = 4
__Tmp$65397 = -40					; size = 8
__Ncopied$65384 = -32					; size = 4
__Newvec$65382 = -28					; size = 4
__Whereoff$65383 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 44					; 0000002cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@3
	jmp	$LN16@Insert_n@3
$LN14@Insert_n@3:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n@3

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Xlen
	jmp	$LN16@Insert_n@3
$LN12@Insert_n@3:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@3

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@3
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@3
$LN17@Insert_n@3:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n@3:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n@3

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n@3:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	ecx, DWORD PTR __Capacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::allocate
	mov	DWORD PTR __Newvec$65382[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	mov	DWORD PTR __Whereoff$65383[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$65384[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereoff$65383[ebp]
	mov	ecx, DWORD PTR __Newvec$65382[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$65384[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$65384[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR __Newvec$65382[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$65384[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$65384[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR __Whereoff$65383[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$65382[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	jmp	SHORT $LN19@Insert_n@3
__catch$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$65384[ebp], 1
	jle	SHORT $LN7@Insert_n@3

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$65383[ebp]
	mov	ecx, DWORD PTR __Newvec$65382[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR __Newvec$65382[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy
$LN7@Insert_n@3:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$65384[ebp], 0
	jle	SHORT $LN6@Insert_n@3

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$65383[ebp]
	mov	edx, DWORD PTR __Newvec$65382[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	push	edx
	mov	eax, DWORD PTR __Whereoff$65383[ebp]
	mov	ecx, DWORD PTR __Newvec$65382[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy
$LN6@Insert_n@3:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$65382[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$1
	ret	0
$LN19@Insert_n@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$1:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN5@Insert_n@3

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::deallocate
$LN5@Insert_n@3:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$65382[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$65382[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$65382[ebp]
	mov	DWORD PTR [edx+12], eax
	jmp	$LN16@Insert_n@3
$LN10@Insert_n@3:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 3
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@3

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$65397[ebp], ecx
	mov	DWORD PTR __Tmp$65397[ebp+4], edx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+4]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$65397[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 3
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ufill
	jmp	SHORT $LN21@Insert_n@3
__catch$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$3
	ret	0
$LN21@Insert_n@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	eax, DWORD PTR __Tmp$65397[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, ecx
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	SHORT $LN16@Insert_n@3
$LN3@Insert_n@3:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$65407[ebp], eax
	mov	DWORD PTR __Tmp$65407[ebp+4], ecx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR __Oldend$65408[ebp], eax

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Oldend$65408[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Oldend$65408[ebp]
	sub	edx, ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$65408[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Oldend$65408[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$65407[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+4]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	call	??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
	add	esp, 12					; 0000000cH
$LN16@Insert_n@3:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Insert_n
PUBLIC	??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::end
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
PUBLIC	??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator!=
PUBLIC	?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$65432 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@4

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$65432[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$65432[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$65432[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@4:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::erase
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
PUBLIC	??$fill@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
PUBLIC	??0KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@ABU012@@Z ; Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T::KEYFRAME_T
PUBLIC	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
PUBLIC	?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Ufill
PUBLIC	?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::capacity
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$2
__catchsym$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$0
__unwindtable$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
tv84 = -76						; size = 4
_this$ = -72						; size = 4
__Tmp$65474 = -68					; size = 16
__Oldend$65475 = -52					; size = 4
__Tmp$65464 = -48					; size = 16
__Ncopied$65451 = -32					; size = 4
__Newvec$65449 = -28					; size = 4
__Whereoff$65450 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 60					; 0000003cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@4
	jmp	$LN16@Insert_n@4
$LN14@Insert_n@4:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n@4

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Xlen
	jmp	$LN16@Insert_n@4
$LN12@Insert_n@4:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@4

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@4
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@4
$LN17@Insert_n@4:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n@4:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n@4

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n@4:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	ecx, DWORD PTR __Capacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::allocate
	mov	DWORD PTR __Newvec$65449[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 4
	mov	DWORD PTR __Whereoff$65450[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$65451[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereoff$65450[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __Newvec$65449[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	ecx, DWORD PTR __Ncopied$65451[ebp]
	add	ecx, 1
	mov	DWORD PTR __Ncopied$65451[ebp], ecx

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	edx, DWORD PTR __Newvec$65449[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$65451[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$65451[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR __Whereoff$65450[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __Newvec$65449[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	jmp	SHORT $LN19@Insert_n@4
__catch$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$65451[ebp], 1
	jle	SHORT $LN7@Insert_n@4

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	edx, DWORD PTR __Whereoff$65450[ebp]
	shl	edx, 4
	add	edx, DWORD PTR __Newvec$65449[ebp]
	push	edx
	mov	eax, DWORD PTR __Newvec$65449[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Destroy
$LN7@Insert_n@4:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$65451[ebp], 0
	jle	SHORT $LN6@Insert_n@4

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$65450[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __Newvec$65449[ebp]
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 4
	add	ecx, edx
	push	ecx
	mov	eax, DWORD PTR __Whereoff$65450[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __Newvec$65449[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Destroy
$LN6@Insert_n@4:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	ecx, DWORD PTR __Capacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$65449[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$1
	ret	0
$LN19@Insert_n@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$1:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN5@Insert_n@4

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::deallocate
$LN5@Insert_n@4:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	ecx, DWORD PTR __Capacity$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __Newvec$65449[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __Newvec$65449[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$65449[ebp]
	mov	DWORD PTR [edx+12], eax
	jmp	$LN16@Insert_n@4
$LN10@Insert_n@4:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Where$[ebp+4]
	sar	edx, 4
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@4

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$65464[ebp]
	call	??0KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@ABU012@@Z

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	edx, DWORD PTR __Tmp$65464[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR __Where$[ebp+4]
	sar	ecx, 4
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Ufill
	jmp	SHORT $LN21@Insert_n@4
__catch$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+16]
	push	edx
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$3
	ret	0
$LN21@Insert_n@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	edx, DWORD PTR __Tmp$65464[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+4]
	push	eax
	call	??$fill@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	SHORT $LN16@Insert_n@4
$LN3@Insert_n@4:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Tmp$65474[ebp]
	call	??0KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@ABU012@@Z

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR __Oldend$65475[ebp], eax

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Oldend$65475[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR __Oldend$65475[ebp]
	sub	edx, ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$65475[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR __Oldend$65475[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$65474[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$fill@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
	add	esp, 12					; 0000000cH
$LN16@Insert_n@4:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Insert_n
PUBLIC	??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@XZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::end
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
PUBLIC	??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator!=
PUBLIC	?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$65499 = -20					; size = 4
__Last$ = -16						; size = 8
__First$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@0@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Make_iter

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Make_iter

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@erase@5

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp+4]
	push	edx
	call	??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$65499[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Ptr$65499[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$65499[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@erase@5:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@0@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::erase
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
PUBLIC	??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
PUBLIC	??0CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@ABU012@@Z ; Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T::CONTROL_POINT_T
PUBLIC	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
PUBLIC	?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Ufill
PUBLIC	?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::capacity
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$5 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$2
__catchsym$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$0
__unwindtable$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__tryblocktable$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
tv84 = -92						; size = 4
_this$ = -88						; size = 4
__Tmp$65541 = -84					; size = 24
__Oldend$65542 = -60					; size = 4
__Tmp$65531 = -56					; size = 24
__Ncopied$65518 = -32					; size = 4
__Newvec$65516 = -28					; size = 4
__Whereoff$65517 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@5
	jmp	$LN16@Insert_n@5
$LN14@Insert_n@5:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n@5

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@KAXXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Xlen
	jmp	$LN16@Insert_n@5
$LN12@Insert_n@5:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@5

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@5
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@5
$LN17@Insert_n@5:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n@5:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n@5

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n@5:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	ecx, DWORD PTR __Capacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::allocate
	mov	DWORD PTR __Newvec$65516[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	sub	eax, DWORD PTR [edx+12]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR __Whereoff$65517[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$65518[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Whereoff$65517[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, DWORD PTR __Newvec$65516[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$65518[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$65518[ebp], edx

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	eax, DWORD PTR __Newvec$65516[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>

; 1182 : 			++_Ncopied;

	mov	ecx, DWORD PTR __Ncopied$65518[ebp]
	add	ecx, 1
	mov	DWORD PTR __Ncopied$65518[ebp], ecx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	edx, DWORD PTR __Whereoff$65517[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	imul	edx, 24					; 00000018H
	add	edx, DWORD PTR __Newvec$65516[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	jmp	SHORT $LN19@Insert_n@5
__catch$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$65518[ebp], 1
	jle	SHORT $LN7@Insert_n@5

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$65517[ebp]
	imul	eax, 24					; 00000018H
	add	eax, DWORD PTR __Newvec$65516[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$65516[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Destroy
$LN7@Insert_n@5:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$65518[ebp], 0
	jle	SHORT $LN6@Insert_n@5

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	edx, DWORD PTR __Whereoff$65517[ebp]
	imul	edx, 24					; 00000018H
	add	edx, DWORD PTR __Newvec$65516[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 24					; 00000018H
	add	edx, eax
	push	edx
	mov	ecx, DWORD PTR __Whereoff$65517[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, DWORD PTR __Newvec$65516[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Destroy
$LN6@Insert_n@5:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newvec$65516[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$1
	ret	0
$LN19@Insert_n@5:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$1:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN5@Insert_n@5

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	sub	eax, DWORD PTR [ecx+12]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@I@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::deallocate
$LN5@Insert_n@5:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	ecx, DWORD PTR __Capacity$[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, DWORD PTR __Newvec$65516[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 24					; 00000018H
	add	eax, DWORD PTR __Newvec$65516[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$65516[ebp]
	mov	DWORD PTR [edx+12], eax
	jmp	$LN16@Insert_n@5
$LN10@Insert_n@5:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	sub	eax, DWORD PTR __Where$[ebp+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@5

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Tmp$65531[ebp]
	call	??0CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@ABU012@@Z

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 24					; 00000018H
	add	eax, DWORD PTR __Where$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	ecx, DWORD PTR __Tmp$65531[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Where$[ebp+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU345@IABU345@@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Ufill
	jmp	SHORT $LN21@Insert_n@5
__catch$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+16]
	push	edx
	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$3
	ret	0
$LN21@Insert_n@5:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	edx, DWORD PTR __Tmp$65531[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+4]
	push	eax
	call	??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	SHORT $LN16@Insert_n@5
$LN3@Insert_n@5:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Tmp$65541[ebp]
	call	??0CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@ABU012@@Z

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR __Oldend$65542[ebp], eax

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR __Oldend$65542[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR __Oldend$65542[ebp]
	sub	edx, ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU234@00@Z ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$65542[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR __Oldend$65542[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$65541[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	call	??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z ; std::fill<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
	add	esp, 12					; 0000000cH
$LN16@Insert_n@5:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@IABUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Insert_n
PUBLIC	??Y?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??H?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator+=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator+
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator+=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator+
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@ABU012@@Z PROC ; Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T::KEYFRAME_T, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@ABU012@@Z ENDP ; Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T::KEYFRAME_T
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@ABU012@@Z PROC ; Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T::CONTROL_POINT_T, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@Ogre@@QAE@ABV01@@Z		; Ogre::Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@ABU012@@Z ENDP ; Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T::CONTROL_POINT_T
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity
$LN3@capacity:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::capacity
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@V?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::BaseKeyFrameArray::AnimRange *,unsigned int,Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU345@IABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU345@IABU345@@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::BaseKeyFrameArray::AnimRange *,unsigned int,Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU345@IABU345@@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Ufill
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@2
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@2
$LN3@capacity@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@2:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::capacity
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<float>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<float>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Ufill
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@3
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@3
$LN3@capacity@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 3
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@3:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::capacity
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU345@IABU345@@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Ufill
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@4
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@4
$LN3@capacity@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	sar	eax, 4
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@4:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::capacity
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU345@IABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU345@IABU345@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __Ptr$[ebp]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU345@IABU345@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Ufill
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@capacity@5
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@5
$LN3@capacity@5:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+12]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@5:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::capacity
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE?AV?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@V?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@2@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU345@IABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU345@IABU345@@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 24					; 00000018H
	add	eax, DWORD PTR __Ptr$[ebp]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU345@IABU345@@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Ufill
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator+=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >

; 328  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator+=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator!=
_TEXT	ENDS
PUBLIC	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container
PUBLIC	??0?$_Ranit@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ; std::_Ranit<Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &>::_Ranit<Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU123@ABU123@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con
$LN1@Vector_con:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAE@PAUAnimRange@BaseKeyFrameArray@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pcont$ = 8						; size = 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z PROC ; std::_Iterator_base_aux::_Set_container, COMDAT
; _this$ = ecx

; 452  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 453  : 		_Myaux = _Pcont->_Myownedaux;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pcont$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 454  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ENDP ; std::_Iterator_base_aux::_Set_container
_TEXT	ENDS
PUBLIC	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
PUBLIC	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@7
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@7:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+16]
	ja	SHORT $LN1@operator@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN2@operator@7
$LN1@operator@7:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@7:

; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator+=
_TEXT	ENDS
PUBLIC	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Iterator_base_aux::_Getmycont, COMDAT
; _this$ = ecx

; 457  : 		{	// Go through the aux object to get the container

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Getmycont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
	mov	DWORD PTR tv67[ebp], eax
	jmp	SHORT $LN4@Getmycont
$LN3@Getmycont:
	mov	DWORD PTR tv67[ebp], 0
$LN4@Getmycont:
	mov	eax, DWORD PTR tv67[ebp]

; 459  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Aux_cont::_Getcont, COMDAT
; _this$ = ecx

; 368  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 369  : 		return _Mycontainer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 370  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Aux_cont::_Getcont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Has_container@_Iterator_base_aux@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ PROC	; std::_Iterator_base_aux::_Has_container, COMDAT
; _this$ = ecx

; 467  : 		{	// Accelerate the comparison by not going through the aux object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 468  : 		return _Myaux != 0;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	setne	cl
	mov	al, cl

; 469  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ENDP	; std::_Iterator_base_aux::_Has_container
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@8
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@8
$LN1@operator@8:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@8:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::operator==
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_aux::_Same_container, COMDAT
; _this$ = ecx

; 462  : 		{	// Accelerate the comparison by not going through the aux object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 463  : 		return _Myaux == _Other._Myaux;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Other$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al

; 464  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_aux::_Same_container
_TEXT	ENDS
PUBLIC	??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ; std::_Ranit<Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &>::_Ranit<Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@2
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@2
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@2
$LN1@Vector_con@2:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@2:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@9
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@9:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+16]
	ja	SHORT $LN1@operator@9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN2@operator@9
$LN1@operator@9:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@9:

; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator+=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@10
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@10
$LN1@operator@10:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@10:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::operator==
_TEXT	ENDS
PUBLIC	??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ; std::_Ranit<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &>::_Ranit<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@3
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@3
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@3
$LN1@Vector_con@3:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@3:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@11
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@11:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+16]
	ja	SHORT $LN1@operator@11
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN2@operator@11
$LN1@operator@11:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@11:

; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator+=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@12
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@12
$LN1@operator@12:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@12:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::operator==
_TEXT	ENDS
PUBLIC	??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ; std::_Ranit<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const &>::_Ranit<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@4
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@4
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@4
$LN1@Vector_con@4:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@4:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@13
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@13:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	esi, DWORD PTR __Off$[ebp]
	shl	esi, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	esi, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+16]
	ja	SHORT $LN1@operator@13
	mov	esi, DWORD PTR __Off$[ebp]
	shl	esi, 4
	mov	edx, DWORD PTR _this$[ebp]
	add	esi, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN2@operator@13
$LN1@operator@13:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@13:

; 164  : 		_Myptr += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator+=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@14
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@14
$LN1@operator@14:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@14:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::operator==
_TEXT	ENDS
PUBLIC	??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ; std::_Ranit<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const &>::_Ranit<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN1@Vector_con@5
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@5
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@Vector_con@5
$LN1@Vector_con@5:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@Vector_con@5:

; 79   : 		this->_Set_container(_Pvector);

	mov	ecx, DWORD PTR __Pvector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 80   : 		_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAE@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@15
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@15:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	esi, DWORD PTR __Off$[ebp]
	imul	esi, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	add	esi, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+16]
	ja	SHORT $LN1@operator@15
	mov	esi, DWORD PTR __Off$[ebp]
	imul	esi, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	add	esi, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN2@operator@15
$LN1@operator@15:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@15:

; 164  : 		_Myptr += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator+=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@16
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@operator@16
$LN1@operator@16:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@16:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::operator==
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU123@ABU123@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU123@ABU123@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &>::_Ranit<Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &>::_Ranit<Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &>::_Ranit<Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &>::_Ranit<Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &>::_Ranit<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &>::_Ranit<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const &>::_Ranit<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const &>::_Ranit<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ PROC ; std::_Ranit<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const &>::_Ranit<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU123@ABU123@@std@@QAE@XZ ENDP ; std::_Ranit<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const &>::_Ranit<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const &>
_TEXT	ENDS
PUBLIC	??0_Iterator_base_aux@std@@QAE@XZ		; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UAnimRange@BaseKeyFrameArray@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::BaseKeyFrameArray::AnimRange,int,Ogre::BaseKeyFrameArray::AnimRange const *,Ogre::BaseKeyFrameArray::AnimRange const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Iterator_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base_aux@std@@QAE@XZ PROC			; std::_Iterator_base_aux::_Iterator_base_aux, COMDAT
; _this$ = ecx

; 448  : 	_Iterator_base_aux()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base_aux@std@@QAE@XZ ENDP			; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::KEYFRAME_T,int,Ogre::KeyFrameArray<float>::KEYFRAME_T const *,Ogre::KeyFrameArray<float>::KEYFRAME_T const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@HPBU345@ABU345@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::destroy
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::destroy
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::destroy
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra@2
$LN2@Destroy_ra@2:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@2:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra@2

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::destroy
	jmp	SHORT $LN2@Destroy_ra@2
$LN4@Destroy_ra@2:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::destroy
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra@3
$LN2@Destroy_ra@3:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@3:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra@3

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::destroy
	jmp	SHORT $LN2@Destroy_ra@3
$LN4@Destroy_ra@3:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::destroy
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra@4
$LN2@Destroy_ra@4:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@4:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra@4

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::destroy
	jmp	SHORT $LN2@Destroy_ra@4
$LN4@Destroy_ra@4:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z PROC ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ENDP ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::destroy
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 233  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra@5
$LN2@Destroy_ra@5:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@5:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra@5

; 234  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::destroy
	jmp	SHORT $LN2@Destroy_ra@5
$LN4@Destroy_ra@5:

; 235  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
PUBLIC	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
PUBLIC	??$_Iter_random@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::_Iter_random<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T71627 = -3						; size = 1
$T71626 = -2						; size = 1
$T71625 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z PROC ; stdext::unchecked_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T71625[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 8
	mov	BYTE PTR $T71626[ebp], al
	movzx	eax, BYTE PTR $T71625[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71626[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T71627[ebp]
	push	ecx
	call	??$_Iter_random@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::_Iter_random<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z ENDP ; stdext::unchecked_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Umove<Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAUAnimRange@BaseKeyFrameArray@Ogre@@@?$vector@UAnimRange@BaseKeyFrameArray@Ogre@@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@IAEPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >::_Umove<Ogre::BaseKeyFrameArray::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z PROC ; std::fill<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	ebp
	ret	0
??$fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z ENDP ; std::fill<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::_Move_cat<Ogre::BaseKeyFrameArray::AnimRange *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_move_backward@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T71636 = -3						; size = 1
$T71635 = -2						; size = 1
$T71634 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z PROC ; stdext::_Unchecked_move_backward<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T71634[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::_Move_cat<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	mov	BYTE PTR $T71635[ebp], al
	movzx	edx, BYTE PTR $T71634[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71635[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T71636[ebp]
	push	eax
	call	??$_Iter_random@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::_Iter_random<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00@Z ENDP ; stdext::_Unchecked_move_backward<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
PUBLIC	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
PUBLIC	??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T71641 = -3						; size = 1
$T71640 = -2						; size = 1
$T71639 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z PROC ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T71639[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T71640[ebp], al
	movzx	eax, BYTE PTR $T71639[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71640[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T71641[ebp]
	push	ecx
	call	??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ENDP ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z PROC ; std::fill<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	ebp
	ret	0
??$fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ENDP ; std::fill<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T71650 = -3						; size = 1
$T71649 = -2						; size = 1
$T71648 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z PROC ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T71648[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	mov	BYTE PTR $T71649[ebp], al
	movzx	edx, BYTE PTR $T71648[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71649[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T71650[ebp]
	push	eax
	call	??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ENDP ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
PUBLIC	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
PUBLIC	??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T71655 = -3						; size = 1
$T71654 = -2						; size = 1
$T71653 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z PROC ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T71653[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T71654[ebp], al
	movzx	eax, BYTE PTR $T71653[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71654[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T71655[ebp]
	push	ecx
	call	??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ENDP ; stdext::unchecked_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z PROC ; std::fill<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	ebp
	ret	0
??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ENDP ; std::fill<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T71664 = -3						; size = 1
$T71663 = -2						; size = 1
$T71662 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z PROC ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T71662[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	mov	BYTE PTR $T71663[ebp], al
	movzx	edx, BYTE PTR $T71662[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71663[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T71664[ebp]
	push	eax
	call	??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00@Z ENDP ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
PUBLIC	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
PUBLIC	??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T71669 = -3						; size = 1
$T71668 = -2						; size = 1
$T71667 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z PROC ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T71667[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T71668[ebp], al
	movzx	eax, BYTE PTR $T71667[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71668[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T71669[ebp]
	push	ecx
	call	??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z ENDP ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$vector@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >::_Umove<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z PROC ; std::fill<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	ebp
	ret	0
??$fill@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z ENDP ; std::fill<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T71678 = -3						; size = 1
$T71677 = -2						; size = 1
$T71676 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z PROC ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T71676[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 4
	mov	BYTE PTR $T71677[ebp], al
	movzx	edx, BYTE PTR $T71676[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71677[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T71678[ebp]
	push	eax
	call	??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z ENDP ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
PUBLIC	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
PUBLIC	??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T71683 = -3						; size = 1
$T71682 = -2						; size = 1
$T71681 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z PROC ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T71681[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T71682[ebp], al
	movzx	eax, BYTE PTR $T71681[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71682[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T71683[ebp]
	push	ecx
	call	??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 24					; 00000018H

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z ENDP ; stdext::unchecked_copy<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU234@00@Z PROC ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@?$vector@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@IAEPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU234@00@Z ENDP ; std::vector<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >::_Umove<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z PROC ; std::fill<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z ; std::_Fill<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	ebp
	ret	0
??$fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z ENDP ; std::fill<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z
_TEXT	SEGMENT
$T71692 = -3						; size = 1
$T71691 = -2						; size = 1
$T71690 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z PROC ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T71690[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 4
	mov	BYTE PTR $T71691[ebp], al
	movzx	edx, BYTE PTR $T71690[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71691[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T71692[ebp]
	push	eax
	call	??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00@Z ENDP ; stdext::_Unchecked_move_backward<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::BaseKeyFrameArray::AnimRange *,unsigned int,Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T71696 = -2						; size = 1
$T71695 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<Ogre::BaseKeyFrameArray::AnimRange *,unsigned int,Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T71695[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 8
	mov	BYTE PTR $T71696[ebp], al
	movzx	eax, BYTE PTR $T71695[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71696[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::BaseKeyFrameArray::AnimRange *,unsigned int,Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	add	esp, 24					; 00000018H

; 943  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<Ogre::BaseKeyFrameArray::AnimRange *,unsigned int,Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::KeyFrameArray<float>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T71700 = -2						; size = 1
$T71699 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<float>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T71699[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T71700[ebp], al
	movzx	eax, BYTE PTR $T71699[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71700[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::KeyFrameArray<float>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	add	esp, 24					; 00000018H

; 943  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<float>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T71704 = -2						; size = 1
$T71703 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T71703[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T71704[ebp], al
	movzx	eax, BYTE PTR $T71703[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71704[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	add	esp, 24					; 00000018H

; 943  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T71708 = -2						; size = 1
$T71707 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T71707[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T71708[ebp], al
	movzx	eax, BYTE PTR $T71707[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71708[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
	add	esp, 24					; 00000018H

; 943  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T71712 = -2						; size = 1
$T71711 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T71711[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T71712[ebp], al
	movzx	eax, BYTE PTR $T71711[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71712[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
	add	esp, 24					; 00000018H

; 943  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
_TEXT	ENDS
PUBLIC	??$_Destroy@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::_Destroy<Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z PROC ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::_Destroy<Ogre::BaseKeyFrameArray::AnimRange>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ENDP ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Destroy<Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Destroy<Ogre::KeyFrameArray<float>::KEYFRAME_T>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Destroy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Destroy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::_Destroy<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::_Destroy<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::_Destroy<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::_Destroy<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::destroy
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z PROC ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ENDP ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T71731 = -7						; size = 1
$T71730 = -6						; size = 1
$T71729 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Result$[ebp], edx

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T71729[ebp], al
	xor	ecx, ecx
	mov	BYTE PTR $T71730[ebp], cl
	movzx	edx, BYTE PTR $T71729[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71730[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71731[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T71735 = -2						; size = 1
$T71734 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T71734[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::_Move_cat<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	mov	BYTE PTR $T71735[ebp], al
	movzx	edx, BYTE PTR $T71734[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71735[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z PROC ; std::_Fill<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill
$LN2@Fill:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill

; 3159 : 		*_First = _Val;

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN2@Fill
$LN4@Fill:

; 3160 : 	}

	pop	ebp
	ret	0
??$_Fill@PAUAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@0ABU123@@Z ENDP ; std::_Fill<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@@Z PROC ; std::_Move_cat<Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ENDP ; std::_Move_cat<Ogre::BaseKeyFrameArray::AnimRange *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T71743 = -2						; size = 1
$T71742 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	push	ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T71742[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 8
	mov	BYTE PTR $T71743[ebp], al
	movzx	eax, BYTE PTR $T71742[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71743[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 24					; 00000018H

; 2755 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z PROC ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ENDP ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T71752 = -7						; size = 1
$T71751 = -6						; size = 1
$T71750 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Result$[ebp], edx

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T71750[ebp], al
	xor	ecx, ecx
	mov	BYTE PTR $T71751[ebp], cl
	movzx	edx, BYTE PTR $T71750[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71751[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71752[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T71756 = -2						; size = 1
$T71755 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T71755[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	mov	BYTE PTR $T71756[ebp], al
	movzx	edx, BYTE PTR $T71755[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71756[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z PROC ; std::_Fill<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill@2
$LN2@Fill@2:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill@2:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill@2

; 3159 : 		*_First = _Val;

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN2@Fill@2
$LN4@Fill@2:

; 3160 : 	}

	pop	ebp
	ret	0
??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ENDP ; std::_Fill<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::_Move_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::_Move_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T71764 = -2						; size = 1
$T71763 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	push	ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T71763[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T71764[ebp], al
	movzx	eax, BYTE PTR $T71763[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71764[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 24					; 00000018H

; 2755 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z PROC ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ENDP ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T71773 = -7						; size = 1
$T71772 = -6						; size = 1
$T71771 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Result$[ebp], edx

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T71771[ebp], al
	xor	ecx, ecx
	mov	BYTE PTR $T71772[ebp], cl
	movzx	edx, BYTE PTR $T71771[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71772[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71773[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T71777 = -2						; size = 1
$T71776 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T71776[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	mov	BYTE PTR $T71777[ebp], al
	movzx	edx, BYTE PTR $T71776[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71777[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z PROC ; std::_Fill<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill@3
$LN2@Fill@3:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill@3:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill@3

; 3159 : 		*_First = _Val;

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN2@Fill@3
$LN4@Fill@3:

; 3160 : 	}

	pop	ebp
	ret	0
??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0ABU123@@Z ENDP ; std::_Fill<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::_Move_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::_Move_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T71785 = -2						; size = 1
$T71784 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	push	ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T71784[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T71785[ebp], al
	movzx	eax, BYTE PTR $T71784[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71785[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 24					; 00000018H

; 2755 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z PROC ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ENDP ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T71794 = -7						; size = 1
$T71793 = -6						; size = 1
$T71792 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 4
	shl	eax, 4
	add	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Result$[ebp], eax

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	ecx, ecx
	mov	BYTE PTR $T71792[ebp], cl
	xor	edx, edx
	mov	BYTE PTR $T71793[ebp], dl
	movzx	eax, BYTE PTR $T71792[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71793[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T71794[ebp]
	push	edx
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T71798 = -2						; size = 1
$T71797 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T71797[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 4
	mov	BYTE PTR $T71798[ebp], al
	movzx	edx, BYTE PTR $T71797[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71798[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
_TEXT	ENDS
PUBLIC	??4KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEAAU012@ABU012@@Z ; Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T::operator=
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z PROC ; std::_Fill<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill@4
$LN2@Fill@4:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill@4:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill@4

; 3159 : 		*_First = _Val;

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR __First$[ebp]
	call	??4KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEAAU012@ABU012@@Z
	jmp	SHORT $LN2@Fill@4
$LN4@Fill@4:

; 3160 : 	}

	pop	ebp
	ret	0
??$_Fill@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z ENDP ; std::_Fill<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z PROC ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_cat@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ENDP ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T71806 = -2						; size = 1
$T71805 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	push	ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T71805[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T71806[ebp], al
	movzx	eax, BYTE PTR $T71805[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71806[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 24					; 00000018H

; 2755 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z PROC ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ENDP ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z PROC ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ENDP ; std::_Iter_random<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T71815 = -7						; size = 1
$T71814 = -6						; size = 1
$T71813 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	imul	eax, 24					; 00000018H
	add	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Result$[ebp], eax

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T71813[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T71814[ebp], al
	movzx	ecx, BYTE PTR $T71813[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T71814[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71815[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2486 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>,std::_Undefined_move_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T71819 = -2						; size = 1
$T71818 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T71818[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 4
	mov	BYTE PTR $T71819[ebp], al
	movzx	edx, BYTE PTR $T71818[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71819[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
_TEXT	ENDS
PUBLIC	??4CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEAAU012@ABU012@@Z ; Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T::operator=
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z PROC ; std::_Fill<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill@5
$LN2@Fill@5:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill@5:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill@5

; 3159 : 		*_First = _Val;

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR __First$[ebp]
	call	??4CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEAAU012@ABU012@@Z
	jmp	SHORT $LN2@Fill@5
$LN4@Fill@5:

; 3160 : 	}

	pop	ebp
	ret	0
??$_Fill@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0ABU123@@Z ENDP ; std::_Fill<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z PROC ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YA?AU_Undefined_move_tag@0@ABQAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ENDP ; std::_Move_cat<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
;	COMDAT ??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T71827 = -2						; size = 1
$T71826 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	push	ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T71826[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T71827[ebp], al
	movzx	eax, BYTE PTR $T71826[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71827[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 24					; 00000018H

; 2755 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU345@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::construct
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<Ogre::BaseKeyFrameArray::AnimRange *,unsigned int,Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil
$LN5@Uninit_fil:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU345@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::construct
	jmp	SHORT $LN5@Uninit_fil
$LN4@Uninit_fil:
	jmp	SHORT $LN10@Uninit_fil
__catch$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil
$LN2@Uninit_fil:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_fil:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil

; 407  : 		_Al.destroy(_Next);

	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::destroy
	jmp	SHORT $LN2@Uninit_fil
$LN1@Uninit_fil:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil
	ret	0
$LN10@Uninit_fil:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUAnimRange@BaseKeyFrameArray@Ogre@@IU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@IABU123@AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<Ogre::BaseKeyFrameArray::AnimRange *,unsigned int,Ogre::BaseKeyFrameArray::AnimRange,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
PUBLIC	?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::construct
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<Ogre::KeyFrameArray<float>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@2
$LN5@Uninit_fil@2:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@2:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@2

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::construct
	jmp	SHORT $LN5@Uninit_fil@2
$LN4@Uninit_fil@2:
	jmp	SHORT $LN10@Uninit_fil@2
__catch$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@2
$LN2@Uninit_fil@2:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_fil@2:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@2

; 407  : 		_Al.destroy(_Next);

	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::destroy
	jmp	SHORT $LN2@Uninit_fil@2
$LN1@Uninit_fil@2:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@2
	ret	0
$LN10@Uninit_fil@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@2:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<Ogre::KeyFrameArray<float>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<float>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
PUBLIC	?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::construct
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@3
$LN5@Uninit_fil@3:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@3:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@3

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::construct
	jmp	SHORT $LN5@Uninit_fil@3
$LN4@Uninit_fil@3:
	jmp	SHORT $LN10@Uninit_fil@3
__catch$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@3
$LN2@Uninit_fil@3:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_fil@3:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@3

; 407  : 		_Al.destroy(_Next);

	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::destroy
	jmp	SHORT $LN2@Uninit_fil@3
$LN1@Uninit_fil@3:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@3
	ret	0
$LN10@Uninit_fil@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@3:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<float>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
PUBLIC	?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::construct
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@4
$LN5@Uninit_fil@4:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@4:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@4

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::construct
	jmp	SHORT $LN5@Uninit_fil@4
$LN4@Uninit_fil@4:
	jmp	SHORT $LN10@Uninit_fil@4
__catch$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@4
$LN2@Uninit_fil@4:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_fil@4:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@4

; 407  : 		_Al.destroy(_Next);

	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::destroy
	jmp	SHORT $LN2@Uninit_fil@4
$LN1@Uninit_fil@4:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@4
	ret	0
$LN10@Uninit_fil@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@4:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,unsigned int,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
PUBLIC	?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::construct
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@5
$LN5@Uninit_fil@5:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@5:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@5

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::construct
	jmp	SHORT $LN5@Uninit_fil@5
$LN4@Uninit_fil@5:
	jmp	SHORT $LN10@Uninit_fil@5
__catch$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@5
$LN2@Uninit_fil@5:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_fil@5:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@5

; 407  : 		_Al.destroy(_Next);

	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::destroy
	jmp	SHORT $LN2@Uninit_fil@5
$LN1@Uninit_fil@5:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@5
	ret	0
$LN10@Uninit_fil@5:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@5:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@IABU123@AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,unsigned int,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z PROC ; std::_Destroy<Ogre::BaseKeyFrameArray::AnimRange>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ENDP ; std::_Destroy<Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::_Destroy<Ogre::KeyFrameArray<float>::KEYFRAME_T>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::_Destroy<Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z PROC ; std::_Destroy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ENDP ; std::_Destroy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z PROC ; std::_Destroy<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ENDP ; std::_Destroy<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z PROC ; std::_Destroy<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ENDP ; std::_Destroy<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??4KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEAAU012@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEAAU012@ABU012@@Z PROC ; Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEAAU012@ABU012@@Z ENDP ; Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T::operator=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??4CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEAAU012@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEAAU012@ABU012@@Z PROC ; Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4Vector3@Ogre@@QAEABV01@ABV01@@Z	; Ogre::Vector3::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEAAU012@ABU012@@Z ENDP ; Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T::operator=
_TEXT	ENDS
PUBLIC	??$_Construct@UAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU123@@Z ; std::_Construct<Ogre::BaseKeyFrameArray::AnimRange,Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU345@@Z PROC ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@UAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU123@@Z ; std::_Construct<Ogre::BaseKeyFrameArray::AnimRange,Ogre::BaseKeyFrameArray::AnimRange>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU345@@Z ENDP ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z ; std::_Construct<Ogre::KeyFrameArray<float>::KEYFRAME_T,Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z ; std::_Construct<Ogre::KeyFrameArray<float>::KEYFRAME_T,Ogre::KeyFrameArray<float>::KEYFRAME_T>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z ; std::_Construct<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z PROC ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z ; std::_Construct<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z ; std::_Construct<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU345@@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z ; std::_Construct<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU345@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z ; std::_Construct<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU345@@Z PROC ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z ; std::_Construct<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU345@@Z ENDP ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::construct
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt
$LN2@Copy_opt:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 8
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Copy_opt
$LN1@Copy_opt:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	ebp
	ret	0
??$_Uninit_move@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::forward_iterator_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T71937 = -7						; size = 1
$T71936 = -6						; size = 1
$T71935 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	shl	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$[ebp], ecx

; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T71935[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T71936[ebp], al
	movzx	ecx, BYTE PTR $T71935[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T71936[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71937[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2690 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2691 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt@2
$LN2@Copy_opt@2:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 8
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt@2:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@2

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Copy_opt@2
$LN1@Copy_opt@2:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	ebp
	ret	0
??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T71948 = -7						; size = 1
$T71947 = -6						; size = 1
$T71946 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	shl	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$[ebp], ecx

; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T71946[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T71947[ebp], al
	movzx	ecx, BYTE PTR $T71946[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T71947[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71948[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2690 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2691 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt@3
$LN2@Copy_opt@3:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 8
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt@3:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@3

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Copy_opt@3
$LN1@Copy_opt@3:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	ebp
	ret	0
??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T71959 = -7						; size = 1
$T71958 = -6						; size = 1
$T71957 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	shl	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$[ebp], ecx

; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T71957[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T71958[ebp], al
	movzx	ecx, BYTE PTR $T71957[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T71958[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71959[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2690 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2691 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt@4
$LN2@Copy_opt@4:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt@4:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@4

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	call	??4KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEAAU012@ABU012@@Z
	jmp	SHORT $LN2@Copy_opt@4
$LN1@Copy_opt@4:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	ebp
	ret	0
??$_Uninit_move@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T71970 = -7						; size = 1
$T71969 = -6						; size = 1
$T71968 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$[ebp], ecx

; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T71968[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T71969[ebp], al
	movzx	ecx, BYTE PTR $T71968[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T71969[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71970[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2690 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2691 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt@5
$LN2@Copy_opt@5:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Copy_opt@5:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@5

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	call	??4CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEAAU012@ABU012@@Z
	jmp	SHORT $LN2@Copy_opt@5
$LN1@Copy_opt@5:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	ebp
	ret	0
??$_Uninit_move@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@U_Undefined_move_tag@5@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::forward_iterator_tag>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T71981 = -7						; size = 1
$T71980 = -6						; size = 1
$T71979 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	imul	eax, 24					; 00000018H
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, eax
	mov	DWORD PTR __Result$[ebp], edx

; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T71979[ebp], al
	xor	ecx, ecx
	mov	BYTE PTR $T71980[ebp], cl
	movzx	edx, BYTE PTR $T71979[ebp]
	push	edx
	movzx	eax, BYTE PTR $T71980[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T71981[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2690 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2691 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Construct@UAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU123@@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
$T71984 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU123@@Z PROC ; std::_Construct<Ogre::BaseKeyFrameArray::AnimRange,Ogre::BaseKeyFrameArray::AnimRange>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T71984[ebp], eax
	cmp	DWORD PTR $T71984[ebp], 0
	je	SHORT $LN3@Construct
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T71984[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T71984[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN1@Construct
$LN3@Construct:
	mov	DWORD PTR tv69[ebp], 0
$LN1@Construct:

; 53   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@UAnimRange@BaseKeyFrameArray@Ogre@@U123@@std@@YAXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU123@@Z ENDP ; std::_Construct<Ogre::BaseKeyFrameArray::AnimRange,Ogre::BaseKeyFrameArray::AnimRange>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Construct@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
$T71989 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z PROC ; std::_Construct<Ogre::KeyFrameArray<float>::KEYFRAME_T,Ogre::KeyFrameArray<float>::KEYFRAME_T>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T71989[ebp], eax
	cmp	DWORD PTR $T71989[ebp], 0
	je	SHORT $LN3@Construct@2
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T71989[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T71989[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN1@Construct@2
$LN3@Construct@2:
	mov	DWORD PTR tv69[ebp], 0
$LN1@Construct@2:

; 53   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z ENDP ; std::_Construct<Ogre::KeyFrameArray<float>::KEYFRAME_T,Ogre::KeyFrameArray<float>::KEYFRAME_T>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
$T71994 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z PROC ; std::_Construct<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T71994[ebp], eax
	cmp	DWORD PTR $T71994[ebp], 0
	je	SHORT $LN3@Construct@3
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T71994[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T71994[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN1@Construct@3
$LN3@Construct@3:
	mov	DWORD PTR tv69[ebp], 0
$LN1@Construct@3:

; 53   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU123@@Z ENDP ; std::_Construct<Ogre::KeyFrameArray<float>::CONTROL_POINT_T,Ogre::KeyFrameArray<float>::CONTROL_POINT_T>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z$0
__ehfuncinfo$??$_Construct@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Construct@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T72000 = -24						; size = 4
$T71999 = -20						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z PROC ; std::_Construct<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	16					; 00000010H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T72000[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T72000[ebp], 0
	je	SHORT $LN3@Construct@4
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T72000[ebp]
	call	??0KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@ABU012@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Construct@4
$LN3@Construct@4:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Construct@4:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T71999[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 53   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z$0:
	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T72000[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Construct@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z ENDP ; std::_Construct<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z$0
__ehfuncinfo$??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T72013 = -24						; size = 4
$T72012 = -20						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z PROC ; std::_Construct<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	24					; 00000018H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T72013[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T72013[ebp], 0
	je	SHORT $LN3@Construct@5
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T72013[ebp]
	call	??0CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAE@ABU012@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Construct@5
$LN3@Construct@5:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Construct@5:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T72012[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 53   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z$0:
	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T72013[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@U123@@std@@YAXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU123@@Z ENDP ; std::_Construct<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>
PUBLIC	??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T72026 = -2						; size = 1
$T72025 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T72025[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUAnimRange@BaseKeyFrameArray@Ogre@@0@Z ; std::_Ptr_cat<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 8
	mov	BYTE PTR $T72026[ebp], al
	movzx	eax, BYTE PTR $T72025[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T72026[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUAnimRange@BaseKeyFrameArray@Ogre@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::BaseKeyFrameArray::AnimRange *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@stdext@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
$LN2@Copy_backw:

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_backw

; 2676 : 		*--_Dest = *--_Last;

	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Last$[ebp], ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Dest$[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Copy_backw
$LN1@Copy_backw:

; 2677 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2678 : 	}

	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T72032 = -2						; size = 1
$T72031 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T72031[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T72032[ebp], al
	movzx	eax, BYTE PTR $T72031[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T72032[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
$LN2@Copy_backw@2:

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_backw@2

; 2676 : 		*--_Dest = *--_Last;

	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Last$[ebp], ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Dest$[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Copy_backw@2
$LN1@Copy_backw@2:

; 2677 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2678 : 	}

	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T72038 = -2						; size = 1
$T72037 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T72037[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T72038[ebp], al
	movzx	eax, BYTE PTR $T72037[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T72038[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
$LN2@Copy_backw@3:

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_backw@3

; 2676 : 		*--_Dest = *--_Last;

	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Last$[ebp], ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Dest$[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Copy_backw@3
$LN1@Copy_backw@3:

; 2677 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2678 : 	}

	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T72044 = -2						; size = 1
$T72043 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T72043[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 8
	mov	BYTE PTR $T72044[ebp], al
	movzx	eax, BYTE PTR $T72043[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T72044[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
$LN2@Copy_backw@4:

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_backw@4

; 2676 : 		*--_Dest = *--_Last;

	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR __Last$[ebp], ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, 16					; 00000010H
	mov	DWORD PTR __Dest$[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	call	??4KEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEAAU012@ABU012@@Z
	jmp	SHORT $LN2@Copy_backw@4
$LN1@Copy_backw@4:

; 2677 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2678 : 	}

	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z
_TEXT	SEGMENT
$T72050 = -2						; size = 1
$T72049 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T72049[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@0@Z ; std::_Ptr_cat<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 8
	mov	BYTE PTR $T72050[ebp], al
	movzx	eax, BYTE PTR $T72049[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T72050[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@AAPAU123@@Z ; std::_Checked_base<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@stdext@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
$LN2@Copy_backw@5:

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_backw@5

; 2676 : 		*--_Dest = *--_Last;

	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 24					; 00000018H
	mov	DWORD PTR __Last$[ebp], ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, 24					; 00000018H
	mov	DWORD PTR __Dest$[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	call	??4CONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@QAEAAU012@ABU012@@Z
	jmp	SHORT $LN2@Copy_backw@5
$LN1@Copy_backw@5:

; 2677 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2678 : 	}

	pop	ebp
	ret	0
??$_Copy_backward_opt@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@Uforward_iterator_tag@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::forward_iterator_tag>
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@ABU345@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::construct
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@QAEXPAUAnimRange@BaseKeyFrameArray@Ogre@@@Z ; std::allocator<Ogre::BaseKeyFrameArray::AnimRange>::destroy
	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@V?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@std@@@std@@YAPAUAnimRange@BaseKeyFrameArray@Ogre@@PAU123@00AAV?$allocator@UAnimRange@BaseKeyFrameArray@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::BaseKeyFrameArray::AnimRange *,Ogre::BaseKeyFrameArray::AnimRange *,std::allocator<Ogre::BaseKeyFrameArray::AnimRange> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@2
$LN5@Uninit_cop@2:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@2:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@2

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::construct
	jmp	SHORT $LN5@Uninit_cop@2
$LN4@Uninit_cop@2:
	jmp	SHORT $LN10@Uninit_cop@2
__catch$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@2
$LN2@Uninit_cop@2:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@2:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@2

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T>::destroy
	jmp	SHORT $LN2@Uninit_cop@2
$LN1@Uninit_cop@2:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@2:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::KEYFRAME_T *,Ogre::KeyFrameArray<float>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<float>::KEYFRAME_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@3
$LN5@Uninit_cop@3:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@3:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@3

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::construct
	jmp	SHORT $LN5@Uninit_cop@3
$LN4@Uninit_cop@3:
	jmp	SHORT $LN10@Uninit_cop@3
__catch$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@3
$LN2@Uninit_cop@3:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@3:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@3

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T>::destroy
	jmp	SHORT $LN2@Uninit_cop@3
$LN1@Uninit_cop@3:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@3:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@M@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,Ogre::KeyFrameArray<float>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<float>::CONTROL_POINT_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@4
$LN5@Uninit_cop@4:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@4:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@4

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::construct
	jmp	SHORT $LN5@Uninit_cop@4
$LN4@Uninit_cop@4:
	jmp	SHORT $LN10@Uninit_cop@4
__catch$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@4
$LN2@Uninit_cop@4:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@4:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@4

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T>::destroy
	jmp	SHORT $LN2@Uninit_cop@4
$LN1@Uninit_cop@4:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@4:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UKEYFRAME_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::KEYFRAME_T> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@5
$LN5@Uninit_cop@5:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@5:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@5

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@ABU345@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::construct
	jmp	SHORT $LN5@Uninit_cop@5
$LN4@Uninit_cop@5:
	jmp	SHORT $LN10@Uninit_cop@5
__catch$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@5
$LN2@Uninit_cop@5:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@5:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@5

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@QAEXPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@Z ; std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T>::destroy
	jmp	SHORT $LN2@Uninit_cop@5
$LN1@Uninit_cop@5:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@5:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@5:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@V?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@std@@@std@@YAPAUCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@PAU123@00AAV?$allocator@UCONTROL_POINT_T@?$KeyFrameArray@VVector3@Ogre@@@Ogre@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T *,std::allocator<Ogre::KeyFrameArray<Ogre::Vector3>::CONTROL_POINT_T> >
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogremath.h
;	COMDAT ??__ETWO_PI@Ogre@@YAXXZ
text$yc	SEGMENT
??__ETWO_PI@Ogre@@YAXXZ PROC				; Ogre::`dynamic initializer for 'TWO_PI'', COMDAT

; 10   : 	const float TWO_PI = ONE_PI*2;

	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _ONE_PI
	fadd	ST(0), ST(0)
	fstp	DWORD PTR _TWO_PI
	pop	ebp
	ret	0
??__ETWO_PI@Ogre@@YAXXZ ENDP				; Ogre::`dynamic initializer for 'TWO_PI''
text$yc	ENDS
PUBLIC	__real@3fe0000000000000
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??__EHALF_PI@Ogre@@YAXXZ
text$yc	SEGMENT
??__EHALF_PI@Ogre@@YAXXZ PROC				; Ogre::`dynamic initializer for 'HALF_PI'', COMDAT

; 11   : 	const float	HALF_PI = ONE_PI*0.5f;

	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _ONE_PI
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR _HALF_PI
	pop	ebp
	ret	0
??__EHALF_PI@Ogre@@YAXXZ ENDP				; Ogre::`dynamic initializer for 'HALF_PI''
text$yc	ENDS
EXTRN	??0RuntimeClass@Ogre@@QAE@PBDPBV01@HP6APAVBaseObject@1@XZ@Z:PROC ; Ogre::RuntimeClass::RuntimeClass
; Function compile flags: /Odtp
; File i:\svnroot\client\ogremain\ogreanimtrackmaterialparam.cpp
;	COMDAT ??__E?m_RTTI@MaterialParamTrack@Ogre@@2VRuntimeClass@2@B@@YAXXZ
text$yc	SEGMENT
??__E?m_RTTI@MaterialParamTrack@Ogre@@2VRuntimeClass@2@B@@YAXXZ PROC ; `dynamic initializer for 'Ogre::MaterialParamTrack::m_RTTI'', COMDAT

; 6    : 	IMPLEMENT_RTTI(MaterialParamTrack, Resource, 100)

	push	ebp
	mov	ebp, esp
	push	OFFSET ?newObject@MaterialParamTrack@Ogre@@SAPAVBaseObject@2@XZ ; Ogre::MaterialParamTrack::newObject
	push	100					; 00000064H
	push	OFFSET ?m_RTTI@Resource@Ogre@@2VRuntimeClass@2@B ; Ogre::Resource::m_RTTI
	push	OFFSET $SG58597
	mov	ecx, OFFSET ?m_RTTI@MaterialParamTrack@Ogre@@2VRuntimeClass@2@B ; Ogre::MaterialParamTrack::m_RTTI
	call	??0RuntimeClass@Ogre@@QAE@PBDPBV01@HP6APAVBaseObject@1@XZ@Z ; Ogre::RuntimeClass::RuntimeClass
	pop	ebp
	ret	0
??__E?m_RTTI@MaterialParamTrack@Ogre@@2VRuntimeClass@2@B@@YAXXZ ENDP ; `dynamic initializer for 'Ogre::MaterialParamTrack::m_RTTI''
text$yc	ENDS
PUBLIC	?m_RTTI@MaterialParamTrack@Ogre@@2VRuntimeClass@2@B ; Ogre::MaterialParamTrack::m_RTTI
_BSS	SEGMENT
?m_RTTI@MaterialParamTrack@Ogre@@2VRuntimeClass@2@B DB 014H DUP (?) ; Ogre::MaterialParamTrack::m_RTTI
_TWO_PI	DD	01H DUP (?)
_HALF_PI DD	01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_TWO_PI$initializer$ DD FLAT:??__ETWO_PI@Ogre@@YAXXZ
_HALF_PI$initializer$ DD FLAT:??__EHALF_PI@Ogre@@YAXXZ
?m_RTTI$initializer$@MaterialParamTrack@Ogre@@2P6AXXZA DD FLAT:??__E?m_RTTI@MaterialParamTrack@Ogre@@2VRuntimeClass@2@B@@YAXXZ ; Ogre::MaterialParamTrack::m_RTTI$initializer$
CRT$XCU	ENDS
END
