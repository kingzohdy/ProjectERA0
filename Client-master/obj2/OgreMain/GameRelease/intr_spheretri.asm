; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\sdk\ozcollide\intr_spheretri.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z		; ozcollide::Vec3f::operator+
PUBLIC	??DVec3f@ozcollide@@QBE?AV01@M@Z		; ozcollide::Vec3f::operator*
PUBLIC	__real@0000000000000000
PUBLIC	?dot@Vec3f@ozcollide@@QBEMABV12@@Z		; ozcollide::Vec3f::dot
PUBLIC	?normalize@Vec3f@ozcollide@@QAEXXZ		; ozcollide::Vec3f::normalize
PUBLIC	?len@Vec3f@ozcollide@@QBEMXZ			; ozcollide::Vec3f::len
PUBLIC	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z		; ozcollide::Vec3f::operator-
PUBLIC	__real@7f7fffff
PUBLIC	??0Vec3f@ozcollide@@QAE@XZ			; ozcollide::Vec3f::Vec3f
PUBLIC	?testIntersectionSphereTriangle@ozcollide@@YA_NAAVVec3f@1@MABV21@11ABVPlane@1@PAV21@PAH@Z ; ozcollide::testIntersectionSphereTriangle
EXTRN	??0Plane@ozcollide@@QAE@XZ:PROC			; ozcollide::Plane::Plane
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
; File i:\svnroot\client\sdk\ozcollide\intr_spheretri.cpp
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
$T6944 = -312						; size = 12
$T6943 = -300						; size = 12
$T6942 = -288						; size = 12
$T6941 = -276						; size = 12
$T6940 = -264						; size = 12
$T6939 = -252						; size = 12
$T6938 = -240						; size = 12
$T6937 = -228						; size = 12
$T6936 = -216						; size = 12
$T6935 = -204						; size = 12
$T6934 = -192						; size = 12
$T6933 = -180						; size = 12
$T6932 = -168						; size = 12
$T6931 = -156						; size = 12
$T6930 = -144						; size = 12
_t$ = -132						; size = 4
_planeE2$ = -128					; size = 16
_c$ = -112						; size = 12
_d$ = -100						; size = 4
_dist$ = -96						; size = 4
_distE0$ = -92						; size = 4
_minDist$ = -88						; size = 4
_distE1$ = -84						; size = 4
_distE2$ = -80						; size = 4
_dist2plane$ = -76					; size = 4
_planeE1$ = -72						; size = 16
_planeE0$ = -56						; size = 16
_up$ = -40						; size = 12
_closest$ = -28						; size = 12
_edges$ = -16						; size = 4
_v$ = -12						; size = 12
__center$ = 8						; size = 4
__radius$ = 12						; size = 4
__pt0$ = 16						; size = 4
__pt1$ = 20						; size = 4
__pt2$ = 24						; size = 4
__plane$ = 28						; size = 4
__closestPoint$ = 32					; size = 4
__edgesFlags$ = 36					; size = 4
?testIntersectionSphereTriangle@ozcollide@@YA_NAAVVec3f@1@MABV21@11ABVPlane@1@PAV21@PAH@Z PROC ; ozcollide::testIntersectionSphereTriangle

; 42   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H

; 43   : 	float dist;
; 44   : 	float dist2plane;
; 45   : 
; 46   : 	dist = _center.x * _plane.a + _center.y * _plane.b + _center.z * _plane.c + _plane.d;

	mov	eax, DWORD PTR __center$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR __plane$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR __center$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __plane$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR __center$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR __plane$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR __plane$[ebp]
	fadd	DWORD PTR [eax+12]
	fstp	DWORD PTR _dist$[ebp]

; 47   : 	dist2plane = dist;

	fld	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR _dist2plane$[ebp]

; 48   : 	if (dist > _radius || dist < -_radius) {

	fld	DWORD PTR _dist$[ebp]
	fld	DWORD PTR __radius$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN27@testInters
	fld	DWORD PTR __radius$[ebp]
	fchs
	fld	DWORD PTR _dist$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN28@testInters
$LN27@testInters:

; 49   : 		if (_edgesFlags)

	cmp	DWORD PTR __edgesFlags$[ebp], 0
	je	SHORT $LN26@testInters

; 50   : 			_edgesFlags = 0;

	mov	DWORD PTR __edgesFlags$[ebp], 0
$LN26@testInters:

; 51   : 		return false;

	xor	al, al
	jmp	$LN29@testInters
$LN28@testInters:

; 52   : 	}
; 53   : 
; 54   : 	Plane planeE0, planeE1, planeE2;

	lea	ecx, DWORD PTR _planeE0$[ebp]
	call	??0Plane@ozcollide@@QAE@XZ		; ozcollide::Plane::Plane
	lea	ecx, DWORD PTR _planeE1$[ebp]
	call	??0Plane@ozcollide@@QAE@XZ		; ozcollide::Plane::Plane
	lea	ecx, DWORD PTR _planeE2$[ebp]
	call	??0Plane@ozcollide@@QAE@XZ		; ozcollide::Plane::Plane

; 55   : 	Vec3f up;

	lea	ecx, DWORD PTR _up$[ebp]
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f

; 56   : 	up.x = _plane.a;

	mov	ecx, DWORD PTR __plane$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR _up$[ebp]

; 57   : 	up.y = _plane.b;

	mov	edx, DWORD PTR __plane$[ebp]
	fld	DWORD PTR [edx+4]
	fstp	DWORD PTR _up$[ebp+4]

; 58   : 	up.z = _plane.c;

	mov	eax, DWORD PTR __plane$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _up$[ebp+8]

; 59   : 
; 60   : 	float distE0 = _center.x * planeE0.a + _center.y * planeE0.b + _center.z * planeE0.c + planeE0.d;

	mov	ecx, DWORD PTR __center$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR _planeE0$[ebp]
	mov	edx, DWORD PTR __center$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _planeE0$[ebp+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR __center$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _planeE0$[ebp+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR _planeE0$[ebp+12]
	fstp	DWORD PTR _distE0$[ebp]

; 61   : 	float distE1 = _center.x * planeE1.a + _center.y * planeE1.b + _center.z * planeE1.c + planeE1.d;

	mov	ecx, DWORD PTR __center$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR _planeE1$[ebp]
	mov	edx, DWORD PTR __center$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _planeE1$[ebp+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR __center$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _planeE1$[ebp+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR _planeE1$[ebp+12]
	fstp	DWORD PTR _distE1$[ebp]

; 62   : 	float distE2 = _center.x * planeE2.a + _center.y * planeE2.b + _center.z * planeE2.c + planeE2.d;

	mov	ecx, DWORD PTR __center$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR _planeE2$[ebp]
	mov	edx, DWORD PTR __center$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _planeE2$[ebp+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR __center$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _planeE2$[ebp+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR _planeE2$[ebp+12]
	fstp	DWORD PTR _distE2$[ebp]

; 63   : 
; 64   : 	if (distE0 <= -_radius || distE1 <= -_radius || distE2 <= -_radius) {

	fld	DWORD PTR __radius$[ebp]
	fchs
	fld	DWORD PTR _distE0$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jnp	SHORT $LN24@testInters
	fld	DWORD PTR __radius$[ebp]
	fchs
	fld	DWORD PTR _distE1$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jnp	SHORT $LN24@testInters
	fld	DWORD PTR __radius$[ebp]
	fchs
	fld	DWORD PTR _distE2$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN25@testInters
$LN24@testInters:

; 65   : 		if (_edgesFlags)

	cmp	DWORD PTR __edgesFlags$[ebp], 0
	je	SHORT $LN23@testInters

; 66   : 			_edgesFlags = 0;

	mov	DWORD PTR __edgesFlags$[ebp], 0
$LN23@testInters:

; 67   : 		return false;

	xor	al, al
	jmp	$LN29@testInters
$LN25@testInters:

; 68   : 	}
; 69   : 
; 70   : 	if (distE0 >= _radius && distE1 >= _radius && distE2 >= _radius) {

	fld	DWORD PTR _distE0$[ebp]
	fld	DWORD PTR __radius$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN22@testInters
	fld	DWORD PTR _distE1$[ebp]
	fld	DWORD PTR __radius$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN22@testInters
	fld	DWORD PTR _distE2$[ebp]
	fld	DWORD PTR __radius$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN22@testInters

; 71   : 		if (_edgesFlags)

	cmp	DWORD PTR __edgesFlags$[ebp], 0
	je	SHORT $LN21@testInters

; 72   : 			_edgesFlags = 0;

	mov	DWORD PTR __edgesFlags$[ebp], 0
$LN21@testInters:

; 73   : 		return true;

	mov	al, 1
	jmp	$LN29@testInters
$LN22@testInters:

; 74   : 	}
; 75   : 
; 76   : 	Vec3f c, v;

	lea	ecx, DWORD PTR _c$[ebp]
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f
	lea	ecx, DWORD PTR _v$[ebp]
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f

; 77   : 	Vec3f closest;

	lea	ecx, DWORD PTR _closest$[ebp]
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f

; 78   : 	float d, t;
; 79   : 	float minDist = FLT_MAX;

	fld	DWORD PTR __real@7f7fffff
	fstp	DWORD PTR _minDist$[ebp]

; 80   : 	int edges = 0;

	mov	DWORD PTR _edges$[ebp], 0

; 81   : 
; 82   : 	// Edge0
; 83   : 	c = _center - _pt0;

	mov	ecx, DWORD PTR __pt0$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T6930[ebp]
	push	edx
	mov	ecx, DWORD PTR __center$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _c$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _c$[ebp+8], eax

; 84   : 	v = _pt1 - _pt0;

	mov	ecx, DWORD PTR __pt0$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T6931[ebp]
	push	edx
	mov	ecx, DWORD PTR __pt1$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _v$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _v$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _v$[ebp+8], eax

; 85   : 	d = v.len();

	lea	ecx, DWORD PTR _v$[ebp]
	call	?len@Vec3f@ozcollide@@QBEMXZ		; ozcollide::Vec3f::len
	fstp	DWORD PTR _d$[ebp]

; 86   : 	v.normalize();

	lea	ecx, DWORD PTR _v$[ebp]
	call	?normalize@Vec3f@ozcollide@@QAEXXZ	; ozcollide::Vec3f::normalize

; 87   : 	t = v.dot(c);

	lea	ecx, DWORD PTR _c$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _v$[ebp]
	call	?dot@Vec3f@ozcollide@@QBEMABV12@@Z	; ozcollide::Vec3f::dot
	fstp	DWORD PTR _t$[ebp]

; 88   : 
; 89   : 	if (t < 0.0f)

	fld	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN20@testInters

; 90   : 		closest = _pt0;

	mov	edx, DWORD PTR __pt0$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _closest$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _closest$[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _closest$[ebp+8], edx
	jmp	SHORT $LN17@testInters
$LN20@testInters:

; 91   : 	else if (t > d)

	fld	DWORD PTR _t$[ebp]
	fld	DWORD PTR _d$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN18@testInters

; 92   : 		closest = _pt1;

	mov	eax, DWORD PTR __pt1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _closest$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _closest$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _closest$[ebp+8], eax

; 93   : 	else

	jmp	SHORT $LN17@testInters
$LN18@testInters:

; 94   : 		closest = v * t + _pt0;

	mov	ecx, DWORD PTR __pt0$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T6933[ebp]
	push	edx
	push	ecx
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T6932[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	call	??DVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator*
	mov	ecx, eax
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _closest$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _closest$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _closest$[ebp+8], eax
$LN17@testInters:

; 95   : 	
; 96   : 	dist = (closest - _center).len();

	mov	ecx, DWORD PTR __center$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T6934[ebp]
	push	edx
	lea	ecx, DWORD PTR _closest$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-
	mov	ecx, eax
	call	?len@Vec3f@ozcollide@@QBEMXZ		; ozcollide::Vec3f::len
	fstp	DWORD PTR _dist$[ebp]

; 97   : 	if (dist < _radius)

	fld	DWORD PTR _dist$[ebp]
	fld	DWORD PTR __radius$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN16@testInters

; 98   : 		edges |= 1;

	mov	eax, DWORD PTR _edges$[ebp]
	or	eax, 1
	mov	DWORD PTR _edges$[ebp], eax
$LN16@testInters:

; 99   : 	if (_closestPoint && dist < minDist) {

	cmp	DWORD PTR __closestPoint$[ebp], 0
	je	SHORT $LN15@testInters
	fld	DWORD PTR _dist$[ebp]
	fld	DWORD PTR _minDist$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN15@testInters

; 100  : 		minDist = dist;

	fld	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR _minDist$[ebp]

; 101  : 		*_closestPoint = closest;

	mov	ecx, DWORD PTR __closestPoint$[ebp]
	mov	edx, DWORD PTR _closest$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _closest$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _closest$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
$LN15@testInters:

; 102  : 	}
; 103  : 
; 104  : 	// Edge1
; 105  : 	c = _center - _pt1;

	mov	eax, DWORD PTR __pt1$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T6935[ebp]
	push	ecx
	mov	ecx, DWORD PTR __center$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _c$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _c$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _c$[ebp+8], edx

; 106  : 	v = _pt2 - _pt1;

	mov	eax, DWORD PTR __pt1$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T6936[ebp]
	push	ecx
	mov	ecx, DWORD PTR __pt2$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _v$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _v$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _v$[ebp+8], edx

; 107  : 	d = v.len();

	lea	ecx, DWORD PTR _v$[ebp]
	call	?len@Vec3f@ozcollide@@QBEMXZ		; ozcollide::Vec3f::len
	fstp	DWORD PTR _d$[ebp]

; 108  : 	v.normalize();

	lea	ecx, DWORD PTR _v$[ebp]
	call	?normalize@Vec3f@ozcollide@@QAEXXZ	; ozcollide::Vec3f::normalize

; 109  : 	t = v.dot(c);

	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	call	?dot@Vec3f@ozcollide@@QBEMABV12@@Z	; ozcollide::Vec3f::dot
	fstp	DWORD PTR _t$[ebp]

; 110  : 
; 111  : 	if (t < 0.0f)

	fld	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN14@testInters

; 112  : 		closest = _pt1;

	mov	ecx, DWORD PTR __pt1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _closest$[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _closest$[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR _closest$[ebp+8], ecx
	jmp	SHORT $LN11@testInters
$LN14@testInters:

; 113  : 	else if (t > d)

	fld	DWORD PTR _t$[ebp]
	fld	DWORD PTR _d$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN12@testInters

; 114  : 		closest = _pt2;

	mov	edx, DWORD PTR __pt2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _closest$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _closest$[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _closest$[ebp+8], edx

; 115  : 	else

	jmp	SHORT $LN11@testInters
$LN12@testInters:

; 116  : 		closest = v * t + _pt1;

	mov	eax, DWORD PTR __pt1$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T6938[ebp]
	push	ecx
	push	ecx
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR $T6937[ebp]
	push	edx
	lea	ecx, DWORD PTR _v$[ebp]
	call	??DVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator*
	mov	ecx, eax
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _closest$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _closest$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _closest$[ebp+8], eax
$LN11@testInters:

; 117  : 	
; 118  : 	dist = (closest - _center).len();

	mov	ecx, DWORD PTR __center$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T6939[ebp]
	push	edx
	lea	ecx, DWORD PTR _closest$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-
	mov	ecx, eax
	call	?len@Vec3f@ozcollide@@QBEMXZ		; ozcollide::Vec3f::len
	fstp	DWORD PTR _dist$[ebp]

; 119  : 	if (dist < _radius)

	fld	DWORD PTR _dist$[ebp]
	fld	DWORD PTR __radius$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN10@testInters

; 120  : 		edges |= 2;

	mov	eax, DWORD PTR _edges$[ebp]
	or	eax, 2
	mov	DWORD PTR _edges$[ebp], eax
$LN10@testInters:

; 121  : 	if (_closestPoint && dist < minDist) {

	cmp	DWORD PTR __closestPoint$[ebp], 0
	je	SHORT $LN9@testInters
	fld	DWORD PTR _dist$[ebp]
	fld	DWORD PTR _minDist$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN9@testInters

; 122  : 		minDist = dist;

	fld	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR _minDist$[ebp]

; 123  : 		*_closestPoint = closest;

	mov	ecx, DWORD PTR __closestPoint$[ebp]
	mov	edx, DWORD PTR _closest$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _closest$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _closest$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
$LN9@testInters:

; 124  : 	}
; 125  : 
; 126  : 	// Edge3
; 127  : 	c = _center - _pt2;

	mov	eax, DWORD PTR __pt2$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T6940[ebp]
	push	ecx
	mov	ecx, DWORD PTR __center$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _c$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _c$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _c$[ebp+8], edx

; 128  : 	v = _pt0 - _pt2;

	mov	eax, DWORD PTR __pt2$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T6941[ebp]
	push	ecx
	mov	ecx, DWORD PTR __pt0$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _v$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _v$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _v$[ebp+8], edx

; 129  : 	d = v.len();

	lea	ecx, DWORD PTR _v$[ebp]
	call	?len@Vec3f@ozcollide@@QBEMXZ		; ozcollide::Vec3f::len
	fstp	DWORD PTR _d$[ebp]

; 130  : 	v.normalize();

	lea	ecx, DWORD PTR _v$[ebp]
	call	?normalize@Vec3f@ozcollide@@QAEXXZ	; ozcollide::Vec3f::normalize

; 131  : 	t = v.dot(c);

	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	call	?dot@Vec3f@ozcollide@@QBEMABV12@@Z	; ozcollide::Vec3f::dot
	fstp	DWORD PTR _t$[ebp]

; 132  : 
; 133  : 	if (t < 0.0f)

	fld	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN8@testInters

; 134  : 		closest = _pt2;

	mov	ecx, DWORD PTR __pt2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _closest$[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _closest$[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR _closest$[ebp+8], ecx
	jmp	SHORT $LN5@testInters
$LN8@testInters:

; 135  : 	else if (t > d)

	fld	DWORD PTR _t$[ebp]
	fld	DWORD PTR _d$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@testInters

; 136  : 		closest = _pt0;

	mov	edx, DWORD PTR __pt0$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _closest$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _closest$[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _closest$[ebp+8], edx

; 137  : 	else

	jmp	SHORT $LN5@testInters
$LN6@testInters:

; 138  : 		closest = v * t + _pt2;

	mov	eax, DWORD PTR __pt2$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T6943[ebp]
	push	ecx
	push	ecx
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR $T6942[ebp]
	push	edx
	lea	ecx, DWORD PTR _v$[ebp]
	call	??DVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator*
	mov	ecx, eax
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _closest$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _closest$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _closest$[ebp+8], eax
$LN5@testInters:

; 139  : 	
; 140  : 	dist = (closest - _center).len();

	mov	ecx, DWORD PTR __center$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T6944[ebp]
	push	edx
	lea	ecx, DWORD PTR _closest$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-
	mov	ecx, eax
	call	?len@Vec3f@ozcollide@@QBEMXZ		; ozcollide::Vec3f::len
	fstp	DWORD PTR _dist$[ebp]

; 141  : 	if (dist < _radius)

	fld	DWORD PTR _dist$[ebp]
	fld	DWORD PTR __radius$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@testInters

; 142  : 		edges |= 4;

	mov	eax, DWORD PTR _edges$[ebp]
	or	eax, 4
	mov	DWORD PTR _edges$[ebp], eax
$LN4@testInters:

; 143  : 	if (_closestPoint && dist < minDist) {

	cmp	DWORD PTR __closestPoint$[ebp], 0
	je	SHORT $LN3@testInters
	fld	DWORD PTR _dist$[ebp]
	fld	DWORD PTR _minDist$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@testInters

; 144  : 		minDist = dist;

	fld	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR _minDist$[ebp]

; 145  : 		*_closestPoint = closest;

	mov	ecx, DWORD PTR __closestPoint$[ebp]
	mov	edx, DWORD PTR _closest$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _closest$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _closest$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
$LN3@testInters:

; 146  : 	}
; 147  : 
; 148  : 	if (_edgesFlags)

	cmp	DWORD PTR __edgesFlags$[ebp], 0
	je	SHORT $LN2@testInters

; 149  : 		*_edgesFlags = edges;

	mov	eax, DWORD PTR __edgesFlags$[ebp]
	mov	ecx, DWORD PTR _edges$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@testInters:

; 150  : 
; 151  : 	if (edges)

	cmp	DWORD PTR _edges$[ebp], 0
	je	SHORT $LN1@testInters

; 152  : 		return true;

	mov	al, 1
	jmp	SHORT $LN29@testInters
$LN1@testInters:

; 153  : 
; 154  : 	return false;

	xor	al, al
$LN29@testInters:

; 155  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?testIntersectionSphereTriangle@ozcollide@@YA_NAAVVec3f@1@MABV21@11ABVPlane@1@PAV21@PAH@Z ENDP ; ozcollide::testIntersectionSphereTriangle
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
_TEXT	ENDS
;	COMDAT ??0Vec3f@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vec3f@ozcollide@@QAE@XZ PROC				; ozcollide::Vec3f::Vec3f, COMDAT
; _this$ = ecx

; 37   : 	ozinline Vec3f()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	{
; 39   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vec3f@ozcollide@@QAE@XZ ENDP				; ozcollide::Vec3f::Vec3f
_TEXT	ENDS
PUBLIC	??0Vec3f@ozcollide@@QAE@MMM@Z			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
;	COMDAT ??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv89 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__v$ = 12						; size = 4
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z PROC		; ozcollide::Vec3f::operator-, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		return Vec3f(x - _v.x, y - _v.y, z - _v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 96   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z ENDP		; ozcollide::Vec3f::operator-
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0Vec3f@ozcollide@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0Vec3f@ozcollide@@QAE@MMM@Z PROC			; ozcollide::Vec3f::Vec3f, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __x$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __y$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __z$[ebp]
	fstp	DWORD PTR [edx+8]

; 43   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vec3f@ozcollide@@QAE@MMM@Z ENDP			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv89 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__v$ = 12						; size = 4
??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z PROC		; ozcollide::Vec3f::operator+, COMDAT
; _this$ = ecx

; 99   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 		return Vec3f(x + _v.x, y + _v.y, z + _v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __v$[ebp]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR __v$[ebp]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 101  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z ENDP		; ozcollide::Vec3f::operator+
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??DVec3f@ozcollide@@QBE?AV01@M@Z
_TEXT	SEGMENT
tv87 = -16						; size = 4
tv85 = -12						; size = 4
tv83 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__m$ = 12						; size = 4
??DVec3f@ozcollide@@QBE?AV01@M@Z PROC			; ozcollide::Vec3f::operator*, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 		return Vec3f(x * _m, y * _m, z * _m);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR __m$[ebp]
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR __m$[ebp]
	fstp	DWORD PTR tv85[ebp]
	fld	DWORD PTR tv85[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR __m$[ebp]
	fstp	DWORD PTR tv87[ebp]
	fld	DWORD PTR tv87[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 111  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??DVec3f@ozcollide@@QBE?AV01@M@Z ENDP			; ozcollide::Vec3f::operator*
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
; Function compile flags: /Odtp
;	COMDAT ?len@Vec3f@ozcollide@@QBEMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_len$ = -4						; size = 4
?len@Vec3f@ozcollide@@QBEMXZ PROC			; ozcollide::Vec3f::len, COMDAT
; _this$ = ecx

; 152  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 153  : 		float len = x * x + y * y + z * z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _len$[ebp]

; 154  : 		return (float) sqrt(len);

	push	ecx
	fld	DWORD PTR _len$[ebp]
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 155  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?len@Vec3f@ozcollide@@QBEMXZ ENDP			; ozcollide::Vec3f::len
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 534  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 423  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
_TEXT	ENDS
;	COMDAT ?dot@Vec3f@ozcollide@@QBEMABV12@@Z
_TEXT	SEGMENT
tv86 = -8						; size = 4
_this$ = -4						; size = 4
__v$ = 8						; size = 4
?dot@Vec3f@ozcollide@@QBEMABV12@@Z PROC			; ozcollide::Vec3f::dot, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 		return x * _v.x + y * _v.y + z * _v.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR __v$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR __v$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]

; 165  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?dot@Vec3f@ozcollide@@QBEMABV12@@Z ENDP			; ozcollide::Vec3f::dot
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?normalize@Vec3f@ozcollide@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_ln$ = -8						; size = 4
_div$ = -4						; size = 4
?normalize@Vec3f@ozcollide@@QAEXXZ PROC			; ozcollide::Vec3f::normalize, COMDAT
; _this$ = ecx

; 168  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 		float ln = len();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?len@Vec3f@ozcollide@@QBEMXZ		; ozcollide::Vec3f::len
	fstp	DWORD PTR _ln$[ebp]

; 170  : 		if (!ln)

	fld	DWORD PTR _ln$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@normalize

; 171  : 			return;

	jmp	SHORT $LN2@normalize
$LN1@normalize:

; 172  : 		float div = 1.0f / ln;

	fld	DWORD PTR _ln$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _div$[ebp]

; 173  : 		x *= div;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _div$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 174  : 		y *= div;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _div$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 175  : 		z *= div;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _div$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]
$LN2@normalize:

; 176  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?normalize@Vec3f@ozcollide@@QAEXXZ ENDP			; ozcollide::Vec3f::normalize
_TEXT	ENDS
PUBLIC	__real@4000000000000000
PUBLIC	__real@3f800000
PUBLIC	__real@00000000
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?lenSq@Vec3f@ozcollide@@QBEMXZ			; ozcollide::Vec3f::lenSq
PUBLIC	?magic_testIntersectionSphereTriangle@ozcollide@@YA_NABVVec3f@1@M000PAM@Z ; ozcollide::magic_testIntersectionSphereTriangle
;	COMDAT __real@4000000000000000
; File i:\svnroot\client\sdk\ozcollide\intr_spheretri.cpp
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
tv564 = -117						; size = 1
tv595 = -116						; size = 4
_fTmp1$6665 = -112					; size = 4
_fTmp0$6664 = -108					; size = 4
_fNumer$6666 = -104					; size = 4
_fDenom$6667 = -100					; size = 4
_fInvDet$6662 = -96					; size = 4
_fT$ = -92						; size = 4
_fA01$ = -88						; size = 4
_fB0$ = -84						; size = 4
_triEdge0$ = -80					; size = 12
_fA11$ = -68						; size = 4
_fB1$ = -64						; size = 4
_fA00$ = -60						; size = 4
_radius2$ = -56						; size = 4
_fDet$ = -52						; size = 4
_triEdge1$ = -48					; size = 12
_fC$ = -36						; size = 4
_kDiff$ = -32						; size = 12
_fS$ = -20						; size = 4
_triOrg$ = -16						; size = 12
_sqrDist$ = -4						; size = 4
_center$ = 8						; size = 4
_radius$ = 12						; size = 4
_pt0$ = 16						; size = 4
_pt1$ = 20						; size = 4
_pt2$ = 24						; size = 4
_dist$ = 28						; size = 4
?magic_testIntersectionSphereTriangle@ozcollide@@YA_NABVVec3f@1@M000PAM@Z PROC ; ozcollide::magic_testIntersectionSphereTriangle

; 158  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H

; 159  : 	Vec3f triOrg = pt0;

	mov	eax, DWORD PTR _pt0$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _triOrg$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _triOrg$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _triOrg$[ebp+8], eax

; 160  : 	Vec3f triEdge0 = pt1 - pt0;

	mov	ecx, DWORD PTR _pt0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _triEdge0$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pt1$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 161  : 	Vec3f triEdge1 = pt2 - pt0;

	mov	eax, DWORD PTR _pt0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _triEdge1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pt2$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 162  : 
; 163  : 	Vec3f kDiff = triOrg - center;

	mov	edx, DWORD PTR _center$[ebp]
	push	edx
	lea	eax, DWORD PTR _kDiff$[ebp]
	push	eax
	lea	ecx, DWORD PTR _triOrg$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 164  : 	float fA00 = triEdge0.lenSq();

	lea	ecx, DWORD PTR _triEdge0$[ebp]
	call	?lenSq@Vec3f@ozcollide@@QBEMXZ		; ozcollide::Vec3f::lenSq
	fstp	DWORD PTR _fA00$[ebp]

; 165  : 	float fA01 = triEdge0.dot(triEdge1);

	lea	ecx, DWORD PTR _triEdge1$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _triEdge0$[ebp]
	call	?dot@Vec3f@ozcollide@@QBEMABV12@@Z	; ozcollide::Vec3f::dot
	fstp	DWORD PTR _fA01$[ebp]

; 166  : 	float fA11 = triEdge1.lenSq();

	lea	ecx, DWORD PTR _triEdge1$[ebp]
	call	?lenSq@Vec3f@ozcollide@@QBEMXZ		; ozcollide::Vec3f::lenSq
	fstp	DWORD PTR _fA11$[ebp]

; 167  : 	float fB0 = kDiff.dot(triEdge0);

	lea	edx, DWORD PTR _triEdge0$[ebp]
	push	edx
	lea	ecx, DWORD PTR _kDiff$[ebp]
	call	?dot@Vec3f@ozcollide@@QBEMABV12@@Z	; ozcollide::Vec3f::dot
	fstp	DWORD PTR _fB0$[ebp]

; 168  : 	float fB1 = kDiff.dot(triEdge1);

	lea	eax, DWORD PTR _triEdge1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _kDiff$[ebp]
	call	?dot@Vec3f@ozcollide@@QBEMABV12@@Z	; ozcollide::Vec3f::dot
	fstp	DWORD PTR _fB1$[ebp]

; 169  : 	float fC = kDiff.lenSq();

	lea	ecx, DWORD PTR _kDiff$[ebp]
	call	?lenSq@Vec3f@ozcollide@@QBEMXZ		; ozcollide::Vec3f::lenSq
	fstp	DWORD PTR _fC$[ebp]

; 170  : 	float fDet = (float) fabs(fA00 * fA11 - fA01 * fA01);

	fld	DWORD PTR _fA00$[ebp]
	fmul	DWORD PTR _fA11$[ebp]
	fld	DWORD PTR _fA01$[ebp]
	fmul	DWORD PTR _fA01$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR tv595[ebp]
	fld	DWORD PTR tv595[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _fDet$[ebp]

; 171  : 	float fS = fA01 * fB1 - fA11 * fB0;

	fld	DWORD PTR _fA01$[ebp]
	fmul	DWORD PTR _fB1$[ebp]
	fld	DWORD PTR _fA11$[ebp]
	fmul	DWORD PTR _fB0$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _fS$[ebp]

; 172  : 	float fT = fA01 * fB0 - fA00 * fB1;

	fld	DWORD PTR _fA01$[ebp]
	fmul	DWORD PTR _fB0$[ebp]
	fld	DWORD PTR _fA00$[ebp]
	fmul	DWORD PTR _fB1$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _fT$[ebp]

; 173  : 	float sqrDist;
; 174  : 
; 175  : 	if (fS + fT <= fDet) {

	fld	DWORD PTR _fS$[ebp]
	fadd	DWORD PTR _fT$[ebp]
	fld	DWORD PTR _fDet$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	$LN49@magic_test

; 176  : 		if (fS < 0.0f) {

	fld	DWORD PTR _fS$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	$LN48@magic_test

; 177  : 			if (fT < 0.0f) {

	fld	DWORD PTR _fT$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	$LN47@magic_test

; 178  : 				// region 4
; 179  : 				if (fB0 < 0.0f) {

	fld	DWORD PTR _fB0$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN46@magic_test

; 180  : 					fT = 0.0f;

	fldz
	fstp	DWORD PTR _fT$[ebp]

; 181  : 					if (-fB0 >= fA00) {

	fld	DWORD PTR _fB0$[ebp]
	fchs
	fld	DWORD PTR _fA00$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN45@magic_test

; 182  : 						fS = 1.0f;

	fld1
	fstp	DWORD PTR _fS$[ebp]

; 183  : 						sqrDist = fA00 + 2.0f * fB0 + fC;

	fld	DWORD PTR _fB0$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fadd	DWORD PTR _fA00$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]

; 184  : 					}
; 185  : 					else {

	jmp	SHORT $LN44@magic_test
$LN45@magic_test:

; 186  : 						fS = -fB0 / fA00;

	fld	DWORD PTR _fB0$[ebp]
	fchs
	fdiv	DWORD PTR _fA00$[ebp]
	fstp	DWORD PTR _fS$[ebp]

; 187  : 						sqrDist = fB0 * fS + fC;

	fld	DWORD PTR _fB0$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]
$LN44@magic_test:

; 188  : 					}
; 189  : 				}
; 190  : 				else {

	jmp	SHORT $LN39@magic_test
$LN46@magic_test:

; 191  : 					fS = 0.0f;

	fldz
	fstp	DWORD PTR _fS$[ebp]

; 192  : 					if (fB1 >= 0.0f) {

	fld	DWORD PTR _fB1$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN42@magic_test

; 193  : 						fT = 0.0f;

	fldz
	fstp	DWORD PTR _fT$[ebp]

; 194  : 						sqrDist = fC;

	fld	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]
	jmp	SHORT $LN39@magic_test
$LN42@magic_test:

; 195  : 					}
; 196  : 					else if (-fB1 >= fA11) {

	fld	DWORD PTR _fB1$[ebp]
	fchs
	fld	DWORD PTR _fA11$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN40@magic_test

; 197  : 						fT = 1.0f;

	fld1
	fstp	DWORD PTR _fT$[ebp]

; 198  : 						sqrDist = fA11 + 2.0f * fB1 + fC;

	fld	DWORD PTR _fB1$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fadd	DWORD PTR _fA11$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]

; 199  : 					}
; 200  : 					else {

	jmp	SHORT $LN39@magic_test
$LN40@magic_test:

; 201  : 						fT = -fB1 / fA11;

	fld	DWORD PTR _fB1$[ebp]
	fchs
	fdiv	DWORD PTR _fA11$[ebp]
	fstp	DWORD PTR _fT$[ebp]

; 202  : 						sqrDist = fB1 * fT + fC;

	fld	DWORD PTR _fB1$[ebp]
	fmul	DWORD PTR _fT$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]
$LN39@magic_test:

; 203  : 					}
; 204  : 				}
; 205  : 			}
; 206  : 			else {

	jmp	SHORT $LN34@magic_test
$LN47@magic_test:

; 207  : 				// region 3
; 208  : 				fS = 0.0f;

	fldz
	fstp	DWORD PTR _fS$[ebp]

; 209  : 				if (fB1 >= 0.0f) {

	fld	DWORD PTR _fB1$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN37@magic_test

; 210  : 					fT = 0.0f;

	fldz
	fstp	DWORD PTR _fT$[ebp]

; 211  : 					sqrDist = fC;

	fld	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]
	jmp	SHORT $LN34@magic_test
$LN37@magic_test:

; 212  : 				}
; 213  : 				else if (-fB1 >= fA11) {

	fld	DWORD PTR _fB1$[ebp]
	fchs
	fld	DWORD PTR _fA11$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN35@magic_test

; 214  : 					fT = 1.0f;

	fld1
	fstp	DWORD PTR _fT$[ebp]

; 215  : 					sqrDist = fA11 + 2.0f * fB1 + fC;

	fld	DWORD PTR _fB1$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fadd	DWORD PTR _fA11$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]

; 216  : 				}
; 217  : 				else {

	jmp	SHORT $LN34@magic_test
$LN35@magic_test:

; 218  : 					fT = -fB1 / fA11;

	fld	DWORD PTR _fB1$[ebp]
	fchs
	fdiv	DWORD PTR _fA11$[ebp]
	fstp	DWORD PTR _fT$[ebp]

; 219  : 					sqrDist = fB1 * fT + fC;

	fld	DWORD PTR _fB1$[ebp]
	fmul	DWORD PTR _fT$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]
$LN34@magic_test:

; 220  : 				}
; 221  : 			}

	jmp	$LN27@magic_test
$LN48@magic_test:

; 222  : 		}
; 223  : 		else if (fT < 0.0f) {

	fld	DWORD PTR _fT$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN32@magic_test

; 224  : 			// region 5
; 225  : 			fT = 0.0f;

	fldz
	fstp	DWORD PTR _fT$[ebp]

; 226  : 			if (fB0 >= 0.0f) {

	fld	DWORD PTR _fB0$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN31@magic_test

; 227  : 				fS = 0.0f;

	fldz
	fstp	DWORD PTR _fS$[ebp]

; 228  : 				sqrDist = fC;

	fld	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]
	jmp	SHORT $LN28@magic_test
$LN31@magic_test:

; 229  : 			}
; 230  : 			else if (-fB0 >= fA00) {

	fld	DWORD PTR _fB0$[ebp]
	fchs
	fld	DWORD PTR _fA00$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN29@magic_test

; 231  : 				fS = 1.0f;

	fld1
	fstp	DWORD PTR _fS$[ebp]

; 232  : 				sqrDist = fA00 + 2.0f * fB0 + fC;

	fld	DWORD PTR _fB0$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fadd	DWORD PTR _fA00$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]

; 233  : 			}
; 234  : 			else {

	jmp	SHORT $LN28@magic_test
$LN29@magic_test:

; 235  : 				fS = -fB0 / fA00;

	fld	DWORD PTR _fB0$[ebp]
	fchs
	fdiv	DWORD PTR _fA00$[ebp]
	fstp	DWORD PTR _fS$[ebp]

; 236  : 				sqrDist = fB0 * fS + fC;

	fld	DWORD PTR _fB0$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]
$LN28@magic_test:

; 237  : 			}
; 238  : 		}
; 239  : 		else {

	jmp	SHORT $LN27@magic_test
$LN32@magic_test:

; 240  : 			// region 0
; 241  :             // minimum at interior point
; 242  : 			float fInvDet = 1.0f / fDet;

	fld	DWORD PTR _fDet$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _fInvDet$6662[ebp]

; 243  : 			fS *= fInvDet;

	fld	DWORD PTR _fS$[ebp]
	fmul	DWORD PTR _fInvDet$6662[ebp]
	fstp	DWORD PTR _fS$[ebp]

; 244  : 			fT *= fInvDet;

	fld	DWORD PTR _fT$[ebp]
	fmul	DWORD PTR _fInvDet$6662[ebp]
	fstp	DWORD PTR _fT$[ebp]

; 245  : 			sqrDist = fS * (fA00 * fS + fA01 * fT + 2.0f * fB0) +
; 246  : 					  fT * (fA01 * fS + fA11 * fT + 2.0f * fB1) + fC;

	fld	DWORD PTR _fA00$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fld	DWORD PTR _fA01$[ebp]
	fmul	DWORD PTR _fT$[ebp]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _fB0$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _fS$[ebp]
	fld	DWORD PTR _fA01$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fld	DWORD PTR _fA11$[ebp]
	fmul	DWORD PTR _fT$[ebp]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _fB1$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _fT$[ebp]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]
$LN27@magic_test:

; 247  : 		}
; 248  : 	}
; 249  : 	else {

	jmp	$LN2@magic_test
$LN49@magic_test:

; 250  : 		float fTmp0, fTmp1, fNumer, fDenom;
; 251  : 		
; 252  : 		if (fS < 0.0f)  {

	fld	DWORD PTR _fS$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	$LN25@magic_test

; 253  : 			// region 2
; 254  : 			fTmp0 = fA01 + fB0;

	fld	DWORD PTR _fA01$[ebp]
	fadd	DWORD PTR _fB0$[ebp]
	fstp	DWORD PTR _fTmp0$6664[ebp]

; 255  : 			fTmp1 = fA11 + fB1;

	fld	DWORD PTR _fA11$[ebp]
	fadd	DWORD PTR _fB1$[ebp]
	fstp	DWORD PTR _fTmp1$6665[ebp]

; 256  : 			if (fTmp1 > fTmp0) {

	fld	DWORD PTR _fTmp1$6665[ebp]
	fld	DWORD PTR _fTmp0$6664[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	$LN24@magic_test

; 257  : 				fNumer = fTmp1 - fTmp0;

	fld	DWORD PTR _fTmp1$6665[ebp]
	fsub	DWORD PTR _fTmp0$6664[ebp]
	fstp	DWORD PTR _fNumer$6666[ebp]

; 258  : 				fDenom = fA00 - 2.0f * fA01 + fA11;

	fld	DWORD PTR _fA01$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fsubr	DWORD PTR _fA00$[ebp]
	fadd	DWORD PTR _fA11$[ebp]
	fstp	DWORD PTR _fDenom$6667[ebp]

; 259  : 				if (fNumer >= fDenom) {

	fld	DWORD PTR _fNumer$6666[ebp]
	fld	DWORD PTR _fDenom$6667[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN23@magic_test

; 260  : 					fS = 1.0f;

	fld1
	fstp	DWORD PTR _fS$[ebp]

; 261  : 					fT = 0.0f;

	fldz
	fstp	DWORD PTR _fT$[ebp]

; 262  : 					sqrDist = fA00 + 2.0f * fB0 + fC;

	fld	DWORD PTR _fB0$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fadd	DWORD PTR _fA00$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]

; 263  : 				}
; 264  : 				else {

	jmp	SHORT $LN22@magic_test
$LN23@magic_test:

; 265  : 					fS = fNumer / fDenom;

	fld	DWORD PTR _fNumer$6666[ebp]
	fdiv	DWORD PTR _fDenom$6667[ebp]
	fstp	DWORD PTR _fS$[ebp]

; 266  : 					fT = 1.0f - fS;

	fld	DWORD PTR _fS$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR _fT$[ebp]

; 267  : 					sqrDist = fS * (fA00 * fS + fA01 * fT + 2.0f * fB0) +
; 268  : 							  fT * (fA01 * fS + fA11 * fT + 2.0f * fB1) + fC;

	fld	DWORD PTR _fA00$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fld	DWORD PTR _fA01$[ebp]
	fmul	DWORD PTR _fT$[ebp]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _fB0$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _fS$[ebp]
	fld	DWORD PTR _fA01$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fld	DWORD PTR _fA11$[ebp]
	fmul	DWORD PTR _fT$[ebp]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _fB1$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _fT$[ebp]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]
$LN22@magic_test:

; 269  : 				}
; 270  : 			}
; 271  : 			else {

	jmp	SHORT $LN17@magic_test
$LN24@magic_test:

; 272  : 				fS = 0.0f;

	fldz
	fstp	DWORD PTR _fS$[ebp]

; 273  : 				if (fTmp1 <= 0.0f) {

	fld	DWORD PTR _fTmp1$6665[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN20@magic_test

; 274  : 					fT = 1.0f;

	fld1
	fstp	DWORD PTR _fT$[ebp]

; 275  : 					sqrDist = fA11 + 2.0f * fB1 + fC;

	fld	DWORD PTR _fB1$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fadd	DWORD PTR _fA11$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]
	jmp	SHORT $LN17@magic_test
$LN20@magic_test:

; 276  : 				}
; 277  : 				else if (fB1 >= 0.0f) {

	fld	DWORD PTR _fB1$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN18@magic_test

; 278  : 					fT = 0.0f;

	fldz
	fstp	DWORD PTR _fT$[ebp]

; 279  : 					sqrDist = fC;

	fld	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]

; 280  : 				}
; 281  : 				else {

	jmp	SHORT $LN17@magic_test
$LN18@magic_test:

; 282  : 					fT = -fB1 / fA11;

	fld	DWORD PTR _fB1$[ebp]
	fchs
	fdiv	DWORD PTR _fA11$[ebp]
	fstp	DWORD PTR _fT$[ebp]

; 283  : 					sqrDist = fB1 * fT + fC;

	fld	DWORD PTR _fB1$[ebp]
	fmul	DWORD PTR _fT$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]
$LN17@magic_test:

; 284  : 				}
; 285  : 			}

	jmp	$LN2@magic_test
$LN25@magic_test:

; 286  : 		}
; 287  : 		else if (fT < 0.0f) {

	fld	DWORD PTR _fT$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	$LN15@magic_test

; 288  : 			// region 6
; 289  : 			fTmp0 = fA01 + fB1;

	fld	DWORD PTR _fA01$[ebp]
	fadd	DWORD PTR _fB1$[ebp]
	fstp	DWORD PTR _fTmp0$6664[ebp]

; 290  : 			fTmp1 = fA00 + fB0;

	fld	DWORD PTR _fA00$[ebp]
	fadd	DWORD PTR _fB0$[ebp]
	fstp	DWORD PTR _fTmp1$6665[ebp]

; 291  : 			if (fTmp1 > fTmp0) {

	fld	DWORD PTR _fTmp1$6665[ebp]
	fld	DWORD PTR _fTmp0$6664[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	$LN14@magic_test

; 292  : 				fNumer = fTmp1 - fTmp0;

	fld	DWORD PTR _fTmp1$6665[ebp]
	fsub	DWORD PTR _fTmp0$6664[ebp]
	fstp	DWORD PTR _fNumer$6666[ebp]

; 293  : 				fDenom = fA00 - 2.0f * fA01 + fA11;

	fld	DWORD PTR _fA01$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fsubr	DWORD PTR _fA00$[ebp]
	fadd	DWORD PTR _fA11$[ebp]
	fstp	DWORD PTR _fDenom$6667[ebp]

; 294  : 				if (fNumer >= fDenom) {

	fld	DWORD PTR _fNumer$6666[ebp]
	fld	DWORD PTR _fDenom$6667[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN13@magic_test

; 295  : 					fT = 1.0f;

	fld1
	fstp	DWORD PTR _fT$[ebp]

; 296  : 					fS = 0.0f;

	fldz
	fstp	DWORD PTR _fS$[ebp]

; 297  : 					sqrDist = fA11 + 2.0f * fB1 + fC;

	fld	DWORD PTR _fB1$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fadd	DWORD PTR _fA11$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]

; 298  : 				}
; 299  : 				else {

	jmp	SHORT $LN12@magic_test
$LN13@magic_test:

; 300  : 					fT = fNumer / fDenom;

	fld	DWORD PTR _fNumer$6666[ebp]
	fdiv	DWORD PTR _fDenom$6667[ebp]
	fstp	DWORD PTR _fT$[ebp]

; 301  : 					fS = 1.0f - fT;

	fld	DWORD PTR _fT$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR _fS$[ebp]

; 302  : 					sqrDist = fS * (fA00 * fS + fA01 * fT + 2.0f * fB0) +
; 303  : 							  fT * (fA01 * fS + fA11 * fT + 2.0f * fB1) + fC;

	fld	DWORD PTR _fA00$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fld	DWORD PTR _fA01$[ebp]
	fmul	DWORD PTR _fT$[ebp]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _fB0$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _fS$[ebp]
	fld	DWORD PTR _fA01$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fld	DWORD PTR _fA11$[ebp]
	fmul	DWORD PTR _fT$[ebp]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _fB1$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _fT$[ebp]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]
$LN12@magic_test:

; 304  : 				}
; 305  : 			}
; 306  : 			else {

	jmp	SHORT $LN7@magic_test
$LN14@magic_test:

; 307  : 				fT = 0.0f;

	fldz
	fstp	DWORD PTR _fT$[ebp]

; 308  : 				if (fTmp1 <= 0.0f) {

	fld	DWORD PTR _fTmp1$6665[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN10@magic_test

; 309  : 					fS = 1.0f;

	fld1
	fstp	DWORD PTR _fS$[ebp]

; 310  : 					sqrDist = fA00 + 2.0f * fB0 + fC;

	fld	DWORD PTR _fB0$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fadd	DWORD PTR _fA00$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]
	jmp	SHORT $LN7@magic_test
$LN10@magic_test:

; 311  : 				}
; 312  : 				else if (fB0 >= 0.0f) {

	fld	DWORD PTR _fB0$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN8@magic_test

; 313  : 					fS = 0.0f;

	fldz
	fstp	DWORD PTR _fS$[ebp]

; 314  : 					sqrDist = fC;

	fld	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]

; 315  : 				}
; 316  : 				else {

	jmp	SHORT $LN7@magic_test
$LN8@magic_test:

; 317  : 					fS = -fB0 / fA00;

	fld	DWORD PTR _fB0$[ebp]
	fchs
	fdiv	DWORD PTR _fA00$[ebp]
	fstp	DWORD PTR _fS$[ebp]

; 318  : 					sqrDist = fB0 * fS + fC;

	fld	DWORD PTR _fB0$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]
$LN7@magic_test:

; 319  : 				}
; 320  : 			}
; 321  : 		}
; 322  : 		else {

	jmp	$LN2@magic_test
$LN15@magic_test:

; 323  : 			// region 1
; 324  : 			fNumer = fA11 + fB1 - fA01 - fB0;

	fld	DWORD PTR _fA11$[ebp]
	fadd	DWORD PTR _fB1$[ebp]
	fsub	DWORD PTR _fA01$[ebp]
	fsub	DWORD PTR _fB0$[ebp]
	fstp	DWORD PTR _fNumer$6666[ebp]

; 325  : 			if (fNumer <= 0.0f) {

	fld	DWORD PTR _fNumer$6666[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN5@magic_test

; 326  : 				fS = 0.0f;

	fldz
	fstp	DWORD PTR _fS$[ebp]

; 327  : 				fT = 1.0f;

	fld1
	fstp	DWORD PTR _fT$[ebp]

; 328  : 				sqrDist = fA11 + 2.0f * fB1 + fC;

	fld	DWORD PTR _fB1$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fadd	DWORD PTR _fA11$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]

; 329  : 			}
; 330  : 			else {

	jmp	$LN2@magic_test
$LN5@magic_test:

; 331  : 				fDenom = fA00 - 2.0f * fA01 + fA11;

	fld	DWORD PTR _fA01$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fsubr	DWORD PTR _fA00$[ebp]
	fadd	DWORD PTR _fA11$[ebp]
	fstp	DWORD PTR _fDenom$6667[ebp]

; 332  : 				if (fNumer >= fDenom) {

	fld	DWORD PTR _fNumer$6666[ebp]
	fld	DWORD PTR _fDenom$6667[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@magic_test

; 333  : 					fS = 1.0f;

	fld1
	fstp	DWORD PTR _fS$[ebp]

; 334  : 					fT = 0.0f;

	fldz
	fstp	DWORD PTR _fT$[ebp]

; 335  : 					sqrDist = fA00 + 2.0f * fB0 + fC;

	fld	DWORD PTR _fB0$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fadd	DWORD PTR _fA00$[ebp]
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]

; 336  : 				}
; 337  : 				else {

	jmp	SHORT $LN2@magic_test
$LN3@magic_test:

; 338  : 					fS = fNumer / fDenom;

	fld	DWORD PTR _fNumer$6666[ebp]
	fdiv	DWORD PTR _fDenom$6667[ebp]
	fstp	DWORD PTR _fS$[ebp]

; 339  : 					fT = 1.0f - fS;

	fld	DWORD PTR _fS$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR _fT$[ebp]

; 340  : 					sqrDist = fS * (fA00 * fS + fA01 * fT + 2.0f * fB0) +
; 341  : 							  fT * (fA01 * fS + fA11 * fT + 2.0f * fB1) + fC;

	fld	DWORD PTR _fA00$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fld	DWORD PTR _fA01$[ebp]
	fmul	DWORD PTR _fT$[ebp]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _fB0$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _fS$[ebp]
	fld	DWORD PTR _fA01$[ebp]
	fmul	DWORD PTR _fS$[ebp]
	fld	DWORD PTR _fA11$[ebp]
	fmul	DWORD PTR _fT$[ebp]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _fB1$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _fT$[ebp]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR _fC$[ebp]
	fstp	DWORD PTR _sqrDist$[ebp]
$LN2@magic_test:

; 342  : 				}
; 343  : 			}
; 344  : 		}
; 345  : 	}
; 346  : 
; 347  : 	sqrDist = (float) fabs(sqrDist);

	push	ecx
	fld	DWORD PTR _sqrDist$[ebp]
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _sqrDist$[ebp]

; 348  : 
; 349  : 	if (dist)

	cmp	DWORD PTR _dist$[ebp], 0
	je	SHORT $LN1@magic_test

; 350  : 		*dist = (float) sqrt(sqrDist);

	push	ecx
	fld	DWORD PTR _sqrDist$[ebp]
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	mov	ecx, DWORD PTR _dist$[ebp]
	fstp	DWORD PTR [ecx]
$LN1@magic_test:

; 351  : 
; 352  : 	float radius2 = radius * radius;

	fld	DWORD PTR _radius$[ebp]
	fmul	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR _radius2$[ebp]

; 353  : 	return sqrDist < radius2 ? true : false;

	fld	DWORD PTR _sqrDist$[ebp]
	fld	DWORD PTR _radius2$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN52@magic_test
	mov	BYTE PTR tv564[ebp], 1
	jmp	SHORT $LN53@magic_test
$LN52@magic_test:
	mov	BYTE PTR tv564[ebp], 0
$LN53@magic_test:
	mov	al, BYTE PTR tv564[ebp]

; 354  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?magic_testIntersectionSphereTriangle@ozcollide@@YA_NABVVec3f@1@M000PAM@Z ENDP ; ozcollide::magic_testIntersectionSphereTriangle
_TEXT	ENDS
PUBLIC	_fabsf
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 510  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
EXTRN	_fabs:PROC
; Function compile flags: /Odtp
;	COMDAT _fabsf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 384  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
_TEXT	ENDS
;	COMDAT ?lenSq@Vec3f@ozcollide@@QBEMXZ
_TEXT	SEGMENT
tv86 = -8						; size = 4
_this$ = -4						; size = 4
?lenSq@Vec3f@ozcollide@@QBEMXZ PROC			; ozcollide::Vec3f::lenSq, COMDAT
; _this$ = ecx

; 158  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 159  : 		return x * x + y * y + z * z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]

; 160  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?lenSq@Vec3f@ozcollide@@QBEMXZ ENDP			; ozcollide::Vec3f::lenSq
_TEXT	ENDS
PUBLIC	??0Vec2f@ozcollide@@QAE@MM@Z			; ozcollide::Vec2f::Vec2f
PUBLIC	??AVec3f@ozcollide@@QBEMH@Z			; ozcollide::Vec3f::operator[]
PUBLIC	?project@Plane@ozcollide@@QAE?AVVec3f@2@ABV32@@Z ; ozcollide::Plane::project
PUBLIC	??ZVec3f@ozcollide@@QAEXABV01@@Z		; ozcollide::Vec3f::operator-=
PUBLIC	?dist@Plane@ozcollide@@QBEMABVVec3f@2@@Z	; ozcollide::Plane::dist
PUBLIC	?testIntersectionTriSphere@ozcollide@@YA_NQAPBVVec3f@1@ABV21@ABVSphere@1@1AAMAAV21@@Z ; ozcollide::testIntersectionTriSphere
EXTRN	?testIntersectionLineLine@ozcollide@@YA_NABVVec2f@1@000PAM@Z:PROC ; ozcollide::testIntersectionLineLine
EXTRN	?distancePointToLine@ozcollide@@YAMABVVec3f@1@00PAV21@@Z:PROC ; ozcollide::distancePointToLine
EXTRN	?fromPoints@Plane@ozcollide@@QAEXABVVec3f@2@00@Z:PROC ; ozcollide::Plane::fromPoints
EXTRN	?testIntersectionSphereLine@ozcollide@@YA_NABVSphere@1@ABVVec3f@1@1PAHPAM3@Z:PROC ; ozcollide::testIntersectionSphereLine
EXTRN	?isPointInsideTriangle@ozcollide@@YA_NABVVec3f@1@000@Z:PROC ; ozcollide::isPointInsideTriangle
EXTRN	?fromPointAndNormal@Plane@ozcollide@@QAEXABVVec3f@2@0@Z:PROC ; ozcollide::Plane::fromPointAndNormal
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\intr_spheretri.cpp
_TEXT	SEGMENT
tv617 = -460						; size = 4
$T6999 = -456						; size = 12
$T6998 = -444						; size = 12
$T6997 = -432						; size = 8
$T6996 = -424						; size = 8
$T6995 = -416						; size = 8
$T6994 = -408						; size = 8
$T6993 = -400						; size = 12
$T6992 = -388						; size = 12
$T6991 = -376						; size = 12
$T6990 = -364						; size = 12
$T6989 = -352						; size = 12
$T6988 = -340						; size = 12
_j$6749 = -328						; size = 4
_srr$6757 = -324					; size = 4
_a0$6768 = -320						; size = 4
_plane$6752 = -316					; size = 16
_pt1$6765 = -300					; size = 12
_t$6778 = -288						; size = 4
_d$6754 = -284						; size = 4
_r$6758 = -280						; size = 4
_edge1$6751 = -276					; size = 12
_pl_y$6771 = -264					; size = 4
_onLine$6761 = -260					; size = 12
_pl_x$6770 = -248					; size = 4
_r2$6791 = -244						; size = 12
_inter$6786 = -232					; size = 12
_edge0$6748 = -220					; size = 12
_vv$6776 = -208						; size = 12
_a1$6769 = -196						; size = 4
_r1$6789 = -192						; size = 12
_pt0$6759 = -180					; size = 12
_h$6762 = -168						; size = 4
_v$6763 = -164						; size = 12
_res$6779 = -149					; size = 1
_pl_z$6772 = -148					; size = 4
_onSphere$6741 = -144					; size = 12
_t$6737 = -132						; size = 4
_seg_pt1$6728 = -128					; size = 12
_inter1$6732 = -116					; size = 4
_inter2$6733 = -112					; size = 4
_nbInter$6734 = -108					; size = 4
_seg_pt0$6727 = -104					; size = 12
_v$6730 = -92						; size = 12
_res$6735 = -77						; size = 1
_onPlane$6718 = -76					; size = 12
_t$6716 = -64						; size = 4
_dot$6714 = -60						; size = 4
_plane$ = -56						; size = 16
_reaction$ = -40					; size = 12
_minDist$ = -28						; size = 4
_nvelo$ = -24						; size = 12
_i$ = -12						; size = 4
_h$ = -8						; size = 4
_col$ = -4						; size = 4
__triPts$ = 8						; size = 4
__triNormal$ = 12					; size = 4
__sphere$ = 16						; size = 4
__sphereVel$ = 20					; size = 4
__distTravel$ = 24					; size = 4
__reaction$ = 28					; size = 4
?testIntersectionTriSphere@ozcollide@@YA_NQAPBVVec3f@1@ABV21@ABVSphere@1@1AAMAAV21@@Z PROC ; ozcollide::testIntersectionTriSphere

; 362  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 460				; 000001ccH

; 363  : 	int i;
; 364  : 	Vec3f nvelo = _sphereVel;

	mov	eax, DWORD PTR __sphereVel$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _nvelo$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _nvelo$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _nvelo$[ebp+8], eax

; 365  : 	nvelo.normalize();

	lea	ecx, DWORD PTR _nvelo$[ebp]
	call	?normalize@Vec3f@ozcollide@@QAEXXZ	; ozcollide::Vec3f::normalize

; 366  : 
; 367  : 	if (_triNormal.dot(nvelo) >= 0)

	lea	ecx, DWORD PTR _nvelo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __triNormal$[ebp]
	call	?dot@Vec3f@ozcollide@@QBEMABV12@@Z	; ozcollide::Vec3f::dot
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN28@testInters@2

; 368  : 		return false;

	xor	al, al
	jmp	$LN29@testInters@2
$LN28@testInters@2:

; 369  : 
; 370  : 	float minDist = FLT_MAX;

	fld	DWORD PTR __real@7f7fffff
	fstp	DWORD PTR _minDist$[ebp]

; 371  : 	Vec3f reaction;

	lea	ecx, DWORD PTR _reaction$[ebp]
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f

; 372  : 	int col = -1;

	mov	DWORD PTR _col$[ebp], -1

; 373  : 	_distTravel = FLT_MAX;

	mov	edx, DWORD PTR __distTravel$[ebp]
	fld	DWORD PTR __real@7f7fffff
	fstp	DWORD PTR [edx]

; 374  : 
; 375  : 	Plane plane;

	lea	ecx, DWORD PTR _plane$[ebp]
	call	??0Plane@ozcollide@@QAE@XZ		; ozcollide::Plane::Plane

; 376  : 	plane.fromPointAndNormal(*_triPts[0], _triNormal);

	mov	eax, DWORD PTR __triNormal$[ebp]
	push	eax
	mov	ecx, DWORD PTR __triPts$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR _plane$[ebp]
	call	?fromPointAndNormal@Plane@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Plane::fromPointAndNormal

; 377  : 
; 378  : 	// pass1: sphere VS plane
; 379  : 	float h = plane.dist( _sphere.center );

	mov	eax, DWORD PTR __sphere$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plane$[ebp]
	call	?dist@Plane@ozcollide@@QBEMABVVec3f@2@@Z ; ozcollide::Plane::dist
	fstp	DWORD PTR _h$[ebp]

; 380  : 	if (h < -_sphere.radius)

	mov	ecx, DWORD PTR __sphere$[ebp]
	fld	DWORD PTR [ecx+12]
	fchs
	fld	DWORD PTR _h$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN27@testInters@2

; 381  : 		return false;

	xor	al, al
	jmp	$LN29@testInters@2
$LN27@testInters@2:

; 382  : 
; 383  : 	if (h > _sphere.radius) {

	fld	DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR __sphere$[ebp]
	fld	DWORD PTR [edx+12]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	$LN22@testInters@2

; 384  : 		h -= _sphere.radius;

	fld	DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR __sphere$[ebp]
	fsub	DWORD PTR [eax+12]
	fstp	DWORD PTR _h$[ebp]

; 385  : 		float dot = _triNormal.dot(nvelo);

	lea	ecx, DWORD PTR _nvelo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __triNormal$[ebp]
	call	?dot@Vec3f@ozcollide@@QBEMABV12@@Z	; ozcollide::Vec3f::dot
	fstp	DWORD PTR _dot$6714[ebp]

; 386  : 		if (dot != 0) {

	fld	DWORD PTR _dot$6714[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN22@testInters@2

; 387  : 			float t = -h / dot;

	fld	DWORD PTR _h$[ebp]
	fchs
	fdiv	DWORD PTR _dot$6714[ebp]
	fstp	DWORD PTR _t$6716[ebp]

; 388  : 			if (t >= 0) {

	fld	DWORD PTR _t$6716[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	$LN22@testInters@2

; 389  : 				Vec3f onPlane = _sphere.center + nvelo * t;

	push	ecx
	fld	DWORD PTR _t$6716[ebp]
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR $T6988[ebp]
	push	edx
	lea	ecx, DWORD PTR _nvelo$[ebp]
	call	??DVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator*
	push	eax
	lea	eax, DWORD PTR _onPlane$6718[ebp]
	push	eax
	mov	ecx, DWORD PTR __sphere$[ebp]
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+

; 390  : 				onPlane -= _triNormal * _sphere.radius;

	mov	ecx, DWORD PTR __sphere$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR $T6989[ebp]
	push	edx
	mov	ecx, DWORD PTR __triNormal$[ebp]
	call	??DVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator*
	push	eax
	lea	ecx, DWORD PTR _onPlane$6718[ebp]
	call	??ZVec3f@ozcollide@@QAEXABV01@@Z	; ozcollide::Vec3f::operator-=

; 391  : 				if (isPointInsideTriangle( *_triPts[0], *_triPts[1], *_triPts[2], onPlane)) {

	lea	eax, DWORD PTR _onPlane$6718[ebp]
	push	eax
	mov	ecx, DWORD PTR __triPts$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __triPts$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR __triPts$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?isPointInsideTriangle@ozcollide@@YA_NABVVec3f@1@000@Z ; ozcollide::isPointInsideTriangle
	add	esp, 16					; 00000010H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN22@testInters@2

; 392  : 					if (t < _distTravel) {

	fld	DWORD PTR _t$6716[ebp]
	mov	edx, DWORD PTR __distTravel$[ebp]
	fld	DWORD PTR [edx]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN22@testInters@2

; 393  : 						_distTravel = t;

	mov	eax, DWORD PTR __distTravel$[ebp]
	fld	DWORD PTR _t$6716[ebp]
	fstp	DWORD PTR [eax]

; 394  : 						_reaction = _triNormal;

	mov	ecx, DWORD PTR __triNormal$[ebp]
	mov	edx, DWORD PTR __reaction$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 395  : 						col = 0;

	mov	DWORD PTR _col$[ebp], 0
$LN22@testInters@2:

; 396  : 					}
; 397  : 				}
; 398  : 			}
; 399  : 		}
; 400  : 	}
; 401  : 
; 402  : 	// pass2: sphere VS triangle vertices
; 403  : 	for (i = 0; i < 3; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN21@testInters@2
$LN20@testInters@2:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN21@testInters@2:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN19@testInters@2

; 404  : 		Vec3f seg_pt0 = *_triPts[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR __triPts$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _seg_pt0$6727[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _seg_pt0$6727[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _seg_pt0$6727[ebp+8], edx

; 405  : 		Vec3f seg_pt1 = seg_pt0 - nvelo;

	lea	eax, DWORD PTR _nvelo$[ebp]
	push	eax
	lea	ecx, DWORD PTR _seg_pt1$6728[ebp]
	push	ecx
	lea	ecx, DWORD PTR _seg_pt0$6727[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 406  : 		Vec3f v = seg_pt1 - seg_pt0;

	lea	edx, DWORD PTR _seg_pt0$6727[ebp]
	push	edx
	lea	eax, DWORD PTR _v$6730[ebp]
	push	eax
	lea	ecx, DWORD PTR _seg_pt1$6728[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 407  : 
; 408  : 		float inter1=FLT_MAX, inter2=FLT_MAX;

	fld	DWORD PTR __real@7f7fffff
	fstp	DWORD PTR _inter1$6732[ebp]
	fld	DWORD PTR __real@7f7fffff
	fstp	DWORD PTR _inter2$6733[ebp]

; 409  : 		int nbInter;
; 410  : 		bool res = testIntersectionSphereLine(_sphere, seg_pt0, seg_pt1, &nbInter, &inter1, &inter2);

	lea	ecx, DWORD PTR _inter2$6733[ebp]
	push	ecx
	lea	edx, DWORD PTR _inter1$6732[ebp]
	push	edx
	lea	eax, DWORD PTR _nbInter$6734[ebp]
	push	eax
	lea	ecx, DWORD PTR _seg_pt1$6728[ebp]
	push	ecx
	lea	edx, DWORD PTR _seg_pt0$6727[ebp]
	push	edx
	mov	eax, DWORD PTR __sphere$[ebp]
	push	eax
	call	?testIntersectionSphereLine@ozcollide@@YA_NABVSphere@1@ABVVec3f@1@1PAHPAM3@Z ; ozcollide::testIntersectionSphereLine
	add	esp, 24					; 00000018H
	mov	BYTE PTR _res$6735[ebp], al

; 411  : 		if (res == false)

	movzx	ecx, BYTE PTR _res$6735[ebp]
	test	ecx, ecx
	jne	SHORT $LN18@testInters@2

; 412  : 			continue;

	jmp	$LN20@testInters@2
$LN18@testInters@2:

; 413  : 
; 414  : 		float t = inter1;

	fld	DWORD PTR _inter1$6732[ebp]
	fstp	DWORD PTR _t$6737[ebp]

; 415  : 		if (inter2 < t)

	fld	DWORD PTR _inter2$6733[ebp]
	fld	DWORD PTR _t$6737[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN17@testInters@2

; 416  : 			t = inter2;

	fld	DWORD PTR _inter2$6733[ebp]
	fstp	DWORD PTR _t$6737[ebp]
$LN17@testInters@2:

; 417  : 
; 418  : 		if (t < 0)

	fld	DWORD PTR _t$6737[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN16@testInters@2

; 419  : 			continue;

	jmp	$LN20@testInters@2
$LN16@testInters@2:

; 420  : 
; 421  : 		if (t < _distTravel) {

	fld	DWORD PTR _t$6737[ebp]
	mov	edx, DWORD PTR __distTravel$[ebp]
	fld	DWORD PTR [edx]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN15@testInters@2

; 422  : 			_distTravel = t;

	mov	eax, DWORD PTR __distTravel$[ebp]
	fld	DWORD PTR _t$6737[ebp]
	fstp	DWORD PTR [eax]

; 423  : 			Vec3f onSphere = seg_pt0 + v * t;

	push	ecx
	fld	DWORD PTR _t$6737[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T6990[ebp]
	push	ecx
	lea	ecx, DWORD PTR _v$6730[ebp]
	call	??DVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator*
	push	eax
	lea	edx, DWORD PTR _onSphere$6741[ebp]
	push	edx
	lea	ecx, DWORD PTR _seg_pt0$6727[ebp]
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+

; 424  : 			_reaction = _sphere.center - onSphere;

	lea	eax, DWORD PTR _onSphere$6741[ebp]
	push	eax
	lea	ecx, DWORD PTR $T6991[ebp]
	push	ecx
	mov	ecx, DWORD PTR __sphere$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-
	mov	edx, DWORD PTR __reaction$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 425  : 			col = 1;

	mov	DWORD PTR _col$[ebp], 1
$LN15@testInters@2:

; 426  : 		}
; 427  : 	}

	jmp	$LN20@testInters@2
$LN19@testInters@2:

; 428  : 
; 429  : 	// pass3: sphere VS triangle edges
; 430  : 	for (i = 0; i < 3; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@testInters@2
$LN13@testInters@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN14@testInters@2:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN12@testInters@2

; 431  : 		Vec3f edge0 = *_triPts[i];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR __triPts$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _edge0$6748[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _edge0$6748[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR _edge0$6748[ebp+8], ecx

; 432  : 		int j = i + 1;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$6749[ebp], edx

; 433  : 		if (j == 3)

	cmp	DWORD PTR _j$6749[ebp], 3
	jne	SHORT $LN11@testInters@2

; 434  : 			j = 0;

	mov	DWORD PTR _j$6749[ebp], 0
$LN11@testInters@2:

; 435  : 		Vec3f edge1 = *_triPts[j];

	mov	eax, DWORD PTR _j$6749[ebp]
	mov	ecx, DWORD PTR __triPts$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _edge1$6751[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _edge1$6751[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _edge1$6751[ebp+8], edx

; 436  : 
; 437  : 		Plane plane;

	lea	ecx, DWORD PTR _plane$6752[ebp]
	call	??0Plane@ozcollide@@QAE@XZ		; ozcollide::Plane::Plane

; 438  : 		plane.fromPoints(edge0, edge1, edge1 - nvelo);

	lea	eax, DWORD PTR _nvelo$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T6992[ebp]
	push	ecx
	lea	ecx, DWORD PTR _edge1$6751[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-
	push	eax
	lea	edx, DWORD PTR _edge1$6751[ebp]
	push	edx
	lea	eax, DWORD PTR _edge0$6748[ebp]
	push	eax
	lea	ecx, DWORD PTR _plane$6752[ebp]
	call	?fromPoints@Plane@ozcollide@@QAEXABVVec3f@2@00@Z ; ozcollide::Plane::fromPoints

; 439  : 		float d = plane.dist(_sphere.center);

	mov	ecx, DWORD PTR __sphere$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _plane$6752[ebp]
	call	?dist@Plane@ozcollide@@QBEMABVVec3f@2@@Z ; ozcollide::Plane::dist
	fstp	DWORD PTR _d$6754[ebp]

; 440  : 		if (d > _sphere.radius || d < -_sphere.radius)

	fld	DWORD PTR _d$6754[ebp]
	mov	edx, DWORD PTR __sphere$[ebp]
	fld	DWORD PTR [edx+12]
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN9@testInters@2
	mov	eax, DWORD PTR __sphere$[ebp]
	fld	DWORD PTR [eax+12]
	fchs
	fld	DWORD PTR _d$6754[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN10@testInters@2
$LN9@testInters@2:

; 441  : 			continue;

	jmp	$LN13@testInters@2
$LN10@testInters@2:

; 442  : 
; 443  : 		float srr = _sphere.radius * _sphere.radius;

	mov	ecx, DWORD PTR __sphere$[ebp]
	fld	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR __sphere$[ebp]
	fmul	DWORD PTR [edx+12]
	fstp	DWORD PTR _srr$6757[ebp]

; 444  : 		float r = sqrt(srr - d*d);

	fld	DWORD PTR _d$6754[ebp]
	fmul	DWORD PTR _d$6754[ebp]
	fsubr	DWORD PTR _srr$6757[ebp]
	fstp	DWORD PTR tv617[ebp]
	fld	DWORD PTR tv617[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _r$6758[ebp]

; 445  : 
; 446  : 		Vec3f pt0 = plane.project(_sphere.center); // center of the sphere slice (a circle)

	mov	eax, DWORD PTR __sphere$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pt0$6759[ebp]
	push	ecx
	lea	ecx, DWORD PTR _plane$6752[ebp]
	call	?project@Plane@ozcollide@@QAE?AVVec3f@2@ABV32@@Z ; ozcollide::Plane::project

; 447  : 
; 448  : 		Vec3f onLine;

	lea	ecx, DWORD PTR _onLine$6761[ebp]
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f

; 449  : 		float h = distancePointToLine(pt0, edge0, edge1, &onLine);

	lea	edx, DWORD PTR _onLine$6761[ebp]
	push	edx
	lea	eax, DWORD PTR _edge1$6751[ebp]
	push	eax
	lea	ecx, DWORD PTR _edge0$6748[ebp]
	push	ecx
	lea	edx, DWORD PTR _pt0$6759[ebp]
	push	edx
	call	?distancePointToLine@ozcollide@@YAMABVVec3f@1@00PAV21@@Z ; ozcollide::distancePointToLine
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _h$6762[ebp]

; 450  : 		Vec3f v = onLine - pt0;

	lea	eax, DWORD PTR _pt0$6759[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$6763[ebp]
	push	ecx
	lea	ecx, DWORD PTR _onLine$6761[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 451  : 		v.normalize();

	lea	ecx, DWORD PTR _v$6763[ebp]
	call	?normalize@Vec3f@ozcollide@@QAEXXZ	; ozcollide::Vec3f::normalize

; 452  : 		Vec3f pt1 = v * r + pt0; // point on the sphere that will maybe collide with the edge

	lea	edx, DWORD PTR _pt0$6759[ebp]
	push	edx
	lea	eax, DWORD PTR _pt1$6765[ebp]
	push	eax
	push	ecx
	fld	DWORD PTR _r$6758[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T6993[ebp]
	push	ecx
	lea	ecx, DWORD PTR _v$6763[ebp]
	call	??DVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator*
	mov	ecx, eax
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+

; 453  : 
; 454  : 		int a0 = 0, a1 = 1;

	mov	DWORD PTR _a0$6768[ebp], 0
	mov	DWORD PTR _a1$6769[ebp], 1

; 455  : 		float pl_x = fabsf(plane.a);

	push	ecx
	fld	DWORD PTR _plane$6752[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _pl_x$6770[ebp]

; 456  : 		float pl_y = fabsf(plane.b);

	push	ecx
	fld	DWORD PTR _plane$6752[ebp+4]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _pl_y$6771[ebp]

; 457  : 		float pl_z = fabsf(plane.c);

	push	ecx
	fld	DWORD PTR _plane$6752[ebp+8]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _pl_z$6772[ebp]

; 458  : 		if (pl_x > pl_y && pl_x > pl_z) {

	fld	DWORD PTR _pl_x$6770[ebp]
	fld	DWORD PTR _pl_y$6771[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN8@testInters@2
	fld	DWORD PTR _pl_x$6770[ebp]
	fld	DWORD PTR _pl_z$6772[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN8@testInters@2

; 459  : 			a0 = 1;

	mov	DWORD PTR _a0$6768[ebp], 1

; 460  : 			a1 = 2;

	mov	DWORD PTR _a1$6769[ebp], 2

; 461  : 		}
; 462  : 		else {

	jmp	SHORT $LN6@testInters@2
$LN8@testInters@2:

; 463  : 			if (pl_y > pl_z) {

	fld	DWORD PTR _pl_y$6771[ebp]
	fld	DWORD PTR _pl_z$6772[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@testInters@2

; 464  : 				a0 = 0;

	mov	DWORD PTR _a0$6768[ebp], 0

; 465  : 				a1 = 2;

	mov	DWORD PTR _a1$6769[ebp], 2
$LN6@testInters@2:

; 466  : 			}
; 467  : 		}
; 468  : 
; 469  : 		Vec3f vv = pt1 + nvelo;

	lea	edx, DWORD PTR _nvelo$[ebp]
	push	edx
	lea	eax, DWORD PTR _vv$6776[ebp]
	push	eax
	lea	ecx, DWORD PTR _pt1$6765[ebp]
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+

; 470  : 
; 471  : 		float t;
; 472  : 		bool res = testIntersectionLineLine(	Vec2f(pt1[a0], pt1[a1]),
; 473  : 												Vec2f(vv[a0], vv[a1]),
; 474  : 												Vec2f(edge0[a0], edge0[a1]),
; 475  : 												Vec2f(edge1[a0], edge1[a1]),
; 476  : 												&t);

	lea	ecx, DWORD PTR _t$6778[ebp]
	push	ecx
	mov	edx, DWORD PTR _a1$6769[ebp]
	push	edx
	lea	ecx, DWORD PTR _edge1$6751[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _a0$6768[ebp]
	push	eax
	lea	ecx, DWORD PTR _edge1$6751[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T6994[ebp]
	call	??0Vec2f@ozcollide@@QAE@MM@Z		; ozcollide::Vec2f::Vec2f
	push	eax
	mov	ecx, DWORD PTR _a1$6769[ebp]
	push	ecx
	lea	ecx, DWORD PTR _edge0$6748[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _a0$6768[ebp]
	push	edx
	lea	ecx, DWORD PTR _edge0$6748[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T6995[ebp]
	call	??0Vec2f@ozcollide@@QAE@MM@Z		; ozcollide::Vec2f::Vec2f
	push	eax
	mov	eax, DWORD PTR _a1$6769[ebp]
	push	eax
	lea	ecx, DWORD PTR _vv$6776[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _a0$6768[ebp]
	push	ecx
	lea	ecx, DWORD PTR _vv$6776[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T6996[ebp]
	call	??0Vec2f@ozcollide@@QAE@MM@Z		; ozcollide::Vec2f::Vec2f
	push	eax
	mov	edx, DWORD PTR _a1$6769[ebp]
	push	edx
	lea	ecx, DWORD PTR _pt1$6765[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _a0$6768[ebp]
	push	eax
	lea	ecx, DWORD PTR _pt1$6765[ebp]
	call	??AVec3f@ozcollide@@QBEMH@Z		; ozcollide::Vec3f::operator[]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T6997[ebp]
	call	??0Vec2f@ozcollide@@QAE@MM@Z		; ozcollide::Vec2f::Vec2f
	push	eax
	call	?testIntersectionLineLine@ozcollide@@YA_NABVVec2f@1@000PAM@Z ; ozcollide::testIntersectionLineLine
	add	esp, 20					; 00000014H
	mov	BYTE PTR _res$6779[ebp], al

; 477  : 		if (!res || t < 0)

	movzx	ecx, BYTE PTR _res$6779[ebp]
	test	ecx, ecx
	je	SHORT $LN4@testInters@2
	fld	DWORD PTR _t$6778[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN5@testInters@2
$LN4@testInters@2:

; 478  : 			continue;

	jmp	$LN13@testInters@2
$LN5@testInters@2:

; 479  : 
; 480  : 		Vec3f inter = pt1 + nvelo * t;

	push	ecx
	fld	DWORD PTR _t$6778[ebp]
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR $T6998[ebp]
	push	edx
	lea	ecx, DWORD PTR _nvelo$[ebp]
	call	??DVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator*
	push	eax
	lea	eax, DWORD PTR _inter$6786[ebp]
	push	eax
	lea	ecx, DWORD PTR _pt1$6765[ebp]
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+

; 481  : 
; 482  : 		Vec3f r1 = edge0 - inter;

	lea	ecx, DWORD PTR _inter$6786[ebp]
	push	ecx
	lea	edx, DWORD PTR _r1$6789[ebp]
	push	edx
	lea	ecx, DWORD PTR _edge0$6748[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 483  : 		Vec3f r2 = edge1 - inter;

	lea	eax, DWORD PTR _inter$6786[ebp]
	push	eax
	lea	ecx, DWORD PTR _r2$6791[ebp]
	push	ecx
	lea	ecx, DWORD PTR _edge1$6751[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 484  : 		if (r1.dot(r2) > 0)

	lea	edx, DWORD PTR _r2$6791[ebp]
	push	edx
	lea	ecx, DWORD PTR _r1$6789[ebp]
	call	?dot@Vec3f@ozcollide@@QBEMABV12@@Z	; ozcollide::Vec3f::dot
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@testInters@2

; 485  : 			continue;

	jmp	$LN13@testInters@2
$LN3@testInters@2:

; 486  : 
; 487  : 		if (t > _distTravel)

	fld	DWORD PTR _t$6778[ebp]
	mov	eax, DWORD PTR __distTravel$[ebp]
	fld	DWORD PTR [eax]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@testInters@2

; 488  : 			continue;

	jmp	$LN13@testInters@2
$LN2@testInters@2:

; 489  : 
; 490  : 		_distTravel = t;

	mov	ecx, DWORD PTR __distTravel$[ebp]
	fld	DWORD PTR _t$6778[ebp]
	fstp	DWORD PTR [ecx]

; 491  : 		_reaction = _sphere.center - pt1;

	lea	edx, DWORD PTR _pt1$6765[ebp]
	push	edx
	lea	eax, DWORD PTR $T6999[ebp]
	push	eax
	mov	ecx, DWORD PTR __sphere$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-
	mov	ecx, DWORD PTR __reaction$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 492  : 		col = 2;

	mov	DWORD PTR _col$[ebp], 2

; 493  : 	}

	jmp	$LN13@testInters@2
$LN12@testInters@2:

; 494  : 
; 495  : 	if (col == -1)

	cmp	DWORD PTR _col$[ebp], -1
	jne	SHORT $LN1@testInters@2

; 496  : 		return false;

	xor	al, al
	jmp	SHORT $LN29@testInters@2
$LN1@testInters@2:

; 497  : 
; 498  : 	_reaction.normalize();

	mov	ecx, DWORD PTR __reaction$[ebp]
	call	?normalize@Vec3f@ozcollide@@QAEXXZ	; ozcollide::Vec3f::normalize

; 499  : 
; 500  : 	return true;

	mov	al, 1
$LN29@testInters@2:

; 501  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?testIntersectionTriSphere@ozcollide@@YA_NQAPBVVec3f@1@ABV21@ABVSphere@1@1AAMAAV21@@Z ENDP ; ozcollide::testIntersectionTriSphere
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
_TEXT	ENDS
;	COMDAT ??ZVec3f@ozcollide@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__v$ = 8						; size = 4
??ZVec3f@ozcollide@@QAEXABV01@@Z PROC			; ozcollide::Vec3f::operator-=, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		x -= _v.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 60   : 		y -= _v.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 61   : 		z -= _v.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 62   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZVec3f@ozcollide@@QAEXABV01@@Z ENDP			; ozcollide::Vec3f::operator-=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??AVec3f@ozcollide@@QBEMH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_val$ = -4						; size = 4
__i$ = 8						; size = 4
??AVec3f@ozcollide@@QBEMH@Z PROC			; ozcollide::Vec3f::operator[], COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 		const float *val = &x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _val$[ebp], eax

; 148  : 		return val[_i];

	mov	ecx, DWORD PTR __i$[ebp]
	mov	edx, DWORD PTR _val$[ebp]
	fld	DWORD PTR [edx+ecx*4]

; 149  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??AVec3f@ozcollide@@QBEMH@Z ENDP			; ozcollide::Vec3f::operator[]
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\plane.h
_TEXT	ENDS
;	COMDAT ?dist@Plane@ozcollide@@QBEMABVVec3f@2@@Z
_TEXT	SEGMENT
tv90 = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?dist@Plane@ozcollide@@QBEMABVVec3f@2@@Z PROC		; ozcollide::Plane::dist, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return a * p.x + b * p.y + c * p.z + d;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _p$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _p$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _p$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+12]
	fstp	DWORD PTR tv90[ebp]
	fld	DWORD PTR tv90[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?dist@Plane@ozcollide@@QBEMABVVec3f@2@@Z ENDP		; ozcollide::Plane::dist
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?project@Plane@ozcollide@@QAE?AVVec3f@2@ABV32@@Z
_TEXT	SEGMENT
tv136 = -20						; size = 4
tv133 = -16						; size = 4
tv130 = -12						; size = 4
_this$ = -8						; size = 4
_h$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_p$ = 12						; size = 4
?project@Plane@ozcollide@@QAE?AVVec3f@2@ABV32@@Z PROC	; ozcollide::Plane::project, COMDAT
; _this$ = ecx

; 66   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 		float h = dist(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?dist@Plane@ozcollide@@QBEMABVVec3f@2@@Z ; ozcollide::Plane::dist
	fstp	DWORD PTR _h$[ebp]

; 68   : 		return Vec3f(	p.x - a * h,
; 69   : 						p.y - b * h,
; 70   : 						p.z - c * h);

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	fsubr	DWORD PTR [edx+8]
	fstp	DWORD PTR tv130[ebp]
	fld	DWORD PTR tv130[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	fsubr	DWORD PTR [ecx+4]
	fstp	DWORD PTR tv133[ebp]
	fld	DWORD PTR tv133[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	fsubr	DWORD PTR [eax]
	fstp	DWORD PTR tv136[ebp]
	fld	DWORD PTR tv136[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 71   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?project@Plane@ozcollide@@QAE?AVVec3f@2@ABV32@@Z ENDP	; ozcollide::Plane::project
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec2f.h
_TEXT	ENDS
;	COMDAT ??0Vec2f@ozcollide@@QAE@MM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
??0Vec2f@ozcollide@@QAE@MM@Z PROC			; ozcollide::Vec2f::Vec2f, COMDAT
; _this$ = ecx

; 39   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __x$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __y$[ebp]
	fstp	DWORD PTR [ecx+4]

; 40   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0Vec2f@ozcollide@@QAE@MM@Z ENDP			; ozcollide::Vec2f::Vec2f
_TEXT	ENDS
END
