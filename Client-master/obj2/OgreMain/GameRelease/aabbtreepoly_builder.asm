; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\sdk\ozcollide\aabbtreepoly_builder.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG7551	DB	'Building the final clean tree', 00H
	ORG $+2
$SG7592	DB	'Freeing temporary buffer', 00H
	ORG $+3
$SG7595	DB	'Done.', 00H
CONST	ENDS
PUBLIC	??1?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::~Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>
PUBLIC	??0?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>
PUBLIC	??0AABBTreePolyBuilder@ozcollide@@QAE@XZ	; ozcollide::AABBTreePolyBuilder::AABBTreePolyBuilder
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$??0AABBTreePolyBuilder@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AABBTreePolyBuilder@ozcollide@@QAE@XZ$0
__ehfuncinfo$??0AABBTreePolyBuilder@ozcollide@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0AABBTreePolyBuilder@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\aabbtreepoly_builder.cpp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0AABBTreePolyBuilder@ozcollide@@QAE@XZ PROC		; ozcollide::AABBTreePolyBuilder::AABBTreePolyBuilder
; _this$ = ecx

; 33   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0AABBTreePolyBuilder@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 34   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0AABBTreePolyBuilder@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::~Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>
__ehhandler$??0AABBTreePolyBuilder@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0AABBTreePolyBuilder@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0AABBTreePolyBuilder@ozcollide@@QAE@XZ ENDP		; ozcollide::AABBTreePolyBuilder::AABBTreePolyBuilder
PUBLIC	??1AABBTreePolyBuilder@ozcollide@@QAE@XZ	; ozcollide::AABBTreePolyBuilder::~AABBTreePolyBuilder
xdata$x	SEGMENT
__unwindtable$??1AABBTreePolyBuilder@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AABBTreePolyBuilder@ozcollide@@QAE@XZ$0
__ehfuncinfo$??1AABBTreePolyBuilder@ozcollide@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1AABBTreePolyBuilder@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AABBTreePolyBuilder@ozcollide@@QAE@XZ PROC		; ozcollide::AABBTreePolyBuilder::~AABBTreePolyBuilder
; _this$ = ecx

; 37   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1AABBTreePolyBuilder@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 38   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::~Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1AABBTreePolyBuilder@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::~Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>
__ehhandler$??1AABBTreePolyBuilder@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1AABBTreePolyBuilder@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1AABBTreePolyBuilder@ozcollide@@QAE@XZ ENDP		; ozcollide::AABBTreePolyBuilder::~AABBTreePolyBuilder
PUBLIC	??_GWorkingItem@AABBTreePolyBuilder@ozcollide@@QAEPAXI@Z ; ozcollide::AABBTreePolyBuilder::WorkingItem::`scalar deleting destructor'
PUBLIC	?build@AABBTreePolyBuilder@ozcollide@@AAEXPAVMonitor@2@@Z ; ozcollide::AABBTreePolyBuilder::build
PUBLIC	?size@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::size
PUBLIC	?workOnItem@AABBTreePolyBuilder@ozcollide@@AAEXAAVWorkingItem@12@H@Z ; ozcollide::AABBTreePolyBuilder::workOnItem
PUBLIC	??A?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEAAPAVWorkingItem@AABBTreePolyBuilder@1@H@Z ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::operator[]
PUBLIC	?add@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXABQAVWorkingItem@AABBTreePolyBuilder@2@@Z ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::add
PUBLIC	?add@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXABQAVPolygon@2@@Z ; ozcollide::Vector<ozcollide::Polygon *>::add
PUBLIC	??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ ; ozcollide::AABBTreePolyBuilder::WorkingItem::WorkingItem
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0Vec3f@ozcollide@@QAE@XZ			; ozcollide::Vec3f::Vec3f
PUBLIC	?buildFromPolys@AABBTreePolyBuilder@ozcollide@@QAEPAVAABBTreePoly@2@PBVPolygon@2@HPBVVec3f@2@HHPAVMonitor@2@@Z ; ozcollide::AABBTreePolyBuilder::buildFromPolys
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??0AABBTreePoly@ozcollide@@AAE@H@Z:PROC		; ozcollide::AABBTreePoly::AABBTreePoly
EXTRN	??2@YAPAXI@Z:PROC				; operator new
xdata$x	SEGMENT
__unwindtable$?buildFromPolys@AABBTreePolyBuilder@ozcollide@@QAEPAVAABBTreePoly@2@PBVPolygon@2@HPBVVec3f@2@HHPAVMonitor@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?buildFromPolys@AABBTreePolyBuilder@ozcollide@@QAEPAVAABBTreePoly@2@PBVPolygon@2@HPBVVec3f@2@HHPAVMonitor@2@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?buildFromPolys@AABBTreePolyBuilder@ozcollide@@QAEPAVAABBTreePoly@2@PBVPolygon@2@HPBVVec3f@2@HHPAVMonitor@2@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?buildFromPolys@AABBTreePolyBuilder@ozcollide@@QAEPAVAABBTreePoly@2@PBVPolygon@2@HPBVVec3f@2@HHPAVMonitor@2@@Z$2
__ehfuncinfo$?buildFromPolys@AABBTreePolyBuilder@ozcollide@@QAEPAVAABBTreePoly@2@PBVPolygon@2@HPBVVec3f@2@HHPAVMonitor@2@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?buildFromPolys@AABBTreePolyBuilder@ozcollide@@QAEPAVAABBTreePoly@2@PBVPolygon@2@HPBVVec3f@2@HHPAVMonitor@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv167 = -92						; size = 4
tv139 = -88						; size = 4
tv89 = -84						; size = 4
tv73 = -80						; size = 4
_this$ = -76						; size = 4
$T8109 = -72						; size = 4
$T8108 = -68						; size = 4
$T8107 = -64						; size = 4
$T8104 = -60						; size = 4
$T8103 = -56						; size = 4
$T8100 = -52						; size = 4
$T8099 = -48						; size = 4
$T8098 = -44						; size = 4
$T8095 = -40						; size = 4
$T8094 = -36						; size = 4
_size$7507 = -32					; size = 4
_it$7506 = -28						; size = 4
_item$ = -24						; size = 4
_off$ = -20						; size = 4
_i$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__pols$ = 8						; size = 4
__nbPolys$ = 12						; size = 4
__points$ = 16						; size = 4
__nbPoints$ = 20					; size = 4
__leafDepth$ = 24					; size = 4
__moni$ = 28						; size = 4
?buildFromPolys@AABBTreePolyBuilder@ozcollide@@QAEPAVAABBTreePoly@2@PBVPolygon@2@HPBVVec3f@2@HHPAVMonitor@2@@Z PROC ; ozcollide::AABBTreePolyBuilder::buildFromPolys
; _this$ = ecx

; 46   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?buildFromPolys@AABBTreePolyBuilder@ozcollide@@QAEPAVAABBTreePoly@2@PBVPolygon@2@HPBVVec3f@2@HHPAVMonitor@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 	int i;
; 48   : 
; 49   : 	tree_ = new AABBTreePoly(_leafDepth);

	push	256					; 00000100H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8095[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8095[ebp], 0
	je	SHORT $LN12@buildFromP
	mov	eax, DWORD PTR __leafDepth$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T8095[ebp]
	call	??0AABBTreePoly@ozcollide@@AAE@H@Z	; ozcollide::AABBTreePoly::AABBTreePoly
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN13@buildFromP
$LN12@buildFromP:
	mov	DWORD PTR tv73[ebp], 0
$LN13@buildFromP:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T8094[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T8094[ebp]
	mov	DWORD PTR [edx+12], eax

; 50   : 
; 51   : 	tree_->points_ = new Vec3f[_nbPoints];

	mov	ecx, DWORD PTR __nbPoints$[ebp]
	mov	DWORD PTR $T8098[ebp], ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T8098[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8100[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T8100[ebp], 0
	je	SHORT $LN14@buildFromP
	push	OFFSET ??0Vec3f@ozcollide@@QAE@XZ	; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR $T8098[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T8100[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T8100[ebp]
	mov	DWORD PTR tv89[ebp], edx
	jmp	SHORT $LN15@buildFromP
$LN14@buildFromP:
	mov	DWORD PTR tv89[ebp], 0
$LN15@buildFromP:
	mov	eax, DWORD PTR tv89[ebp]
	mov	DWORD PTR $T8099[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T8099[ebp]
	mov	DWORD PTR [edx+44], eax

; 52   : 	tree_->nbPoints_ = _nbPoints;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR __nbPoints$[ebp]
	mov	DWORD PTR [edx+40], eax

; 53   : 	for (i = 0; i < _nbPoints; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@buildFromP
$LN8@buildFromP:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN9@buildFromP:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR __nbPoints$[ebp]
	jge	SHORT $LN7@buildFromP

; 54   : 		tree_->points_[i] = _points[i];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __points$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [edx+44]
	add	edx, ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax
	jmp	SHORT $LN8@buildFromP
$LN7@buildFromP:

; 55   : 
; 56   : 	WorkingItem *item = new WorkingItem();

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8104[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T8104[ebp], 0
	je	SHORT $LN16@buildFromP
	mov	ecx, DWORD PTR $T8104[ebp]
	call	??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ
	mov	DWORD PTR tv139[ebp], eax
	jmp	SHORT $LN17@buildFromP
$LN16@buildFromP:
	mov	DWORD PTR tv139[ebp], 0
$LN17@buildFromP:
	mov	ecx, DWORD PTR tv139[ebp]
	mov	DWORD PTR $T8103[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T8103[ebp]
	mov	DWORD PTR _item$[ebp], edx

; 57   : 	for (i = 0; i < _nbPolys; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@buildFromP
$LN5@buildFromP:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@buildFromP:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR __nbPolys$[ebp]
	jge	SHORT $LN4@buildFromP

; 58   : 		item->pols.add( (Polygon*) &_pols[i]);

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	add	edx, DWORD PTR __pols$[ebp]
	mov	DWORD PTR $T8107[ebp], edx
	lea	eax, DWORD PTR $T8107[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 32					; 00000020H
	call	?add@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXABQAVPolygon@2@@Z ; ozcollide::Vector<ozcollide::Polygon *>::add
	jmp	SHORT $LN5@buildFromP
$LN4@buildFromP:

; 59   : 
; 60   : 	item->left = -1;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+24], -1

; 61   : 	item->right = -1;

	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx+28], -1

; 62   : 
; 63   : 	items_.add(item);

	lea	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?add@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXABQAVWorkingItem@AABBTreePolyBuilder@2@@Z ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::add

; 64   : 
; 65   : 	int off = 0;

	mov	DWORD PTR _off$[ebp], 0
$LN3@buildFromP:

; 66   : 	while(true) {

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN2@buildFromP

; 67   : 		WorkingItem &it = *items_[off];

	mov	edx, DWORD PTR _off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEAAPAVWorkingItem@AABBTreePolyBuilder@1@H@Z ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _it$7506[ebp], eax

; 68   : 		workOnItem(it, _leafDepth);

	mov	ecx, DWORD PTR __leafDepth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _it$7506[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?workOnItem@AABBTreePolyBuilder@ozcollide@@AAEXAAVWorkingItem@12@H@Z ; ozcollide::AABBTreePolyBuilder::workOnItem

; 69   : 		off++;

	mov	eax, DWORD PTR _off$[ebp]
	add	eax, 1
	mov	DWORD PTR _off$[ebp], eax

; 70   : 		int size = items_.size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::size
	mov	DWORD PTR _size$7507[ebp], eax

; 71   : 		if (off == size)

	mov	ecx, DWORD PTR _off$[ebp]
	cmp	ecx, DWORD PTR _size$7507[ebp]
	jne	SHORT $LN1@buildFromP

; 72   : 			break;

	jmp	SHORT $LN2@buildFromP
$LN1@buildFromP:

; 73   : 	}

	jmp	SHORT $LN3@buildFromP
$LN2@buildFromP:

; 74   : 
; 75   : 	build(_moni);

	mov	edx, DWORD PTR __moni$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?build@AABBTreePolyBuilder@ozcollide@@AAEXPAVMonitor@2@@Z ; ozcollide::AABBTreePolyBuilder::build

; 76   : 
; 77   : 	delete item;

	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR $T8109[ebp], eax
	mov	ecx, DWORD PTR $T8109[ebp]
	mov	DWORD PTR $T8108[ebp], ecx
	cmp	DWORD PTR $T8108[ebp], 0
	je	SHORT $LN18@buildFromP
	push	1
	mov	ecx, DWORD PTR $T8108[ebp]
	call	??_GWorkingItem@AABBTreePolyBuilder@ozcollide@@QAEPAXI@Z
	mov	DWORD PTR tv167[ebp], eax
	jmp	SHORT $LN19@buildFromP
$LN18@buildFromP:
	mov	DWORD PTR tv167[ebp], 0
$LN19@buildFromP:

; 78   : 
; 79   : 	return tree_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]

; 80   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?buildFromPolys@AABBTreePolyBuilder@ozcollide@@QAEPAVAABBTreePoly@2@PBVPolygon@2@HPBVVec3f@2@HHPAVMonitor@2@@Z$0:
	mov	eax, DWORD PTR $T8095[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?buildFromPolys@AABBTreePolyBuilder@ozcollide@@QAEPAVAABBTreePoly@2@PBVPolygon@2@HPBVVec3f@2@HHPAVMonitor@2@@Z$1:
	mov	eax, DWORD PTR $T8100[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?buildFromPolys@AABBTreePolyBuilder@ozcollide@@QAEPAVAABBTreePoly@2@PBVPolygon@2@HPBVVec3f@2@HHPAVMonitor@2@@Z$2:
	mov	eax, DWORD PTR $T8104[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?buildFromPolys@AABBTreePolyBuilder@ozcollide@@QAEPAVAABBTreePoly@2@PBVPolygon@2@HPBVVec3f@2@HHPAVMonitor@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?buildFromPolys@AABBTreePolyBuilder@ozcollide@@QAEPAVAABBTreePoly@2@PBVPolygon@2@HPBVVec3f@2@HHPAVMonitor@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?buildFromPolys@AABBTreePolyBuilder@ozcollide@@QAEPAVAABBTreePoly@2@PBVPolygon@2@HPBVVec3f@2@HHPAVMonitor@2@@Z ENDP ; ozcollide::AABBTreePolyBuilder::buildFromPolys
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
;	COMDAT ??0Vec3f@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vec3f@ozcollide@@QAE@XZ PROC				; ozcollide::Vec3f::Vec3f, COMDAT
; _this$ = ecx

; 37   : 	ozinline Vec3f()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	{
; 39   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vec3f@ozcollide@@QAE@XZ ENDP				; ozcollide::Vec3f::Vec3f
_TEXT	ENDS
PUBLIC	??1?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::Polygon *>::~Vector<ozcollide::Polygon *>
PUBLIC	??1Box@ozcollide@@QAE@XZ			; ozcollide::Box::~Box
PUBLIC	??0?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::Polygon *>::Vector<ozcollide::Polygon *>
PUBLIC	??0Box@ozcollide@@QAE@XZ			; ozcollide::Box::Box
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ$1
__ehfuncinfo$??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ PROC ; ozcollide::AABBTreePolyBuilder::WorkingItem::WorkingItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Box@ozcollide@@QAE@XZ		; ozcollide::Box::Box
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::Polygon *>::Vector<ozcollide::Polygon *>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
__unwindfunclet$??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::Polygon *>::~Vector<ozcollide::Polygon *>
__ehhandler$??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ ENDP ; ozcollide::AABBTreePolyBuilder::WorkingItem::WorkingItem
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\box.h
;	COMDAT ??0Box@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Box@ozcollide@@QAE@XZ PROC				; ozcollide::Box::Box, COMDAT
; _this$ = ecx

; 44   : 	ozinline Box()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f

; 45   : 	{
; 46   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Box@ozcollide@@QAE@XZ ENDP				; ozcollide::Box::Box
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1Box@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Box@ozcollide@@QAE@XZ PROC				; ozcollide::Box::~Box, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1Box@ozcollide@@QAE@XZ ENDP				; ozcollide::Box::~Box
_TEXT	ENDS
PUBLIC	??1WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ ; ozcollide::AABBTreePolyBuilder::WorkingItem::~WorkingItem
; Function compile flags: /Odtp
;	COMDAT ??_GWorkingItem@AABBTreePolyBuilder@ozcollide@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GWorkingItem@AABBTreePolyBuilder@ozcollide@@QAEPAXI@Z PROC ; ozcollide::AABBTreePolyBuilder::WorkingItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GWorkingItem@AABBTreePolyBuilder@ozcollide@@QAEPAXI@Z ENDP ; ozcollide::AABBTreePolyBuilder::WorkingItem::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ$1
__ehfuncinfo$??1WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ PROC ; ozcollide::AABBTreePolyBuilder::WorkingItem::~WorkingItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::Polygon *>::~Vector<ozcollide::Polygon *>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
__unwindfunclet$??1WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAE@XZ ; ozcollide::Vector<ozcollide::Polygon *>::~Vector<ozcollide::Polygon *>
__ehhandler$??1WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ ENDP ; ozcollide::AABBTreePolyBuilder::WorkingItem::~WorkingItem
PUBLIC	?clear@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXXZ ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::clear
PUBLIC	??A?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEAAPAVPolygon@1@H@Z ; ozcollide::Vector<ozcollide::Polygon *>::operator[]
PUBLIC	?size@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::Polygon *>::size
PUBLIC	??0AABBTreePolygonLeaf@ozcollide@@QAE@XZ	; ozcollide::AABBTreePolygonLeaf::AABBTreePolygonLeaf
PUBLIC	??1AABBTreePolygonLeaf@ozcollide@@QAE@XZ	; ozcollide::AABBTreePolygonLeaf::~AABBTreePolygonLeaf
PUBLIC	??0AABBTreeNode@ozcollide@@QAE@XZ		; ozcollide::AABBTreeNode::AABBTreeNode
PUBLIC	??1AABBTreeNode@ozcollide@@QAE@XZ		; ozcollide::AABBTreeNode::~AABBTreeNode
EXTRN	?copyTo@Polygon@ozcollide@@QBEXAAV12@@Z:PROC	; ozcollide::Polygon::copyTo
EXTRN	??0Polygon@ozcollide@@QAE@XZ:PROC		; ozcollide::Polygon::Polygon
EXTRN	??1Polygon@ozcollide@@QAE@XZ:PROC		; ozcollide::Polygon::~Polygon
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
xdata$x	SEGMENT
__unwindtable$?build@AABBTreePolyBuilder@ozcollide@@AAEXPAVMonitor@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?build@AABBTreePolyBuilder@ozcollide@@AAEXPAVMonitor@2@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?build@AABBTreePolyBuilder@ozcollide@@AAEXPAVMonitor@2@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?build@AABBTreePolyBuilder@ozcollide@@AAEXPAVMonitor@2@@Z$2
__ehfuncinfo$?build@AABBTreePolyBuilder@ozcollide@@AAEXPAVMonitor@2@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?build@AABBTreePolyBuilder@ozcollide@@AAEXPAVMonitor@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\aabbtreepoly_builder.cpp
xdata$x	ENDS
_TEXT	SEGMENT
tv259 = -140						; size = 4
tv174 = -136						; size = 4
tv150 = -132						; size = 4
_this$ = -128						; size = 4
$T8164 = -124						; size = 4
$T8161 = -120						; size = 4
$T8160 = -116						; size = 4
$T8159 = -112						; size = 4
$T8156 = -108						; size = 4
$T8155 = -104						; size = 4
$T8154 = -100						; size = 4
$T8151 = -96						; size = 4
$T8150 = -92						; size = 4
$T8149 = -88						; size = 4
$T8148 = -84						; size = 4
_pl$7587 = -80						; size = 4
_item$7585 = -76					; size = 4
_pl$7580 = -72						; size = 4
_item$7578 = -68					; size = 4
_pn$7576 = -64						; size = 4
_nodeIndex$7575 = -60					; size = 4
_pol$7572 = -56						; size = 4
_indexLeaf$7558 = -52					; size = 4
_pl$7559 = -48						; size = 4
_nbPols$7561 = -44					; size = 4
_it$7556 = -40						; size = 4
_it$7533 = -36						; size = 4
_j$ = -32						; size = 4
_ln$ = -28						; size = 4
_nbNodes$ = -24						; size = 4
_i$ = -20						; size = 4
_nbLeafs$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__moni$ = 8						; size = 4
?build@AABBTreePolyBuilder@ozcollide@@AAEXPAVMonitor@2@@Z PROC ; ozcollide::AABBTreePolyBuilder::build
; _this$ = ecx

; 83   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?build@AABBTreePolyBuilder@ozcollide@@AAEXPAVMonitor@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 	int i, j;
; 85   : 
; 86   : 	// Now we have a bastard working tree, let's build the final clean one...
; 87   : 
; 88   : 	int *ln = new int[items_.size()];

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::size
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8148[ebp], eax
	mov	eax, DWORD PTR $T8148[ebp]
	mov	DWORD PTR _ln$[ebp], eax

; 89   : 	int nbNodes = 0;

	mov	DWORD PTR _nbNodes$[ebp], 0

; 90   : 	int nbLeafs = 0;

	mov	DWORD PTR _nbLeafs$[ebp], 0

; 91   : 	for (i = 0; i < items_.size(); i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN25@build
$LN24@build:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN25@build:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN23@build

; 92   : 		WorkingItem &it = *items_[i];

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEAAPAVWorkingItem@AABBTreePolyBuilder@1@H@Z ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _it$7533[ebp], eax

; 93   : 		if (it.left == -1 && it.right == -1)

	mov	ecx, DWORD PTR _it$7533[ebp]
	cmp	DWORD PTR [ecx+24], -1
	jne	SHORT $LN22@build
	mov	edx, DWORD PTR _it$7533[ebp]
	cmp	DWORD PTR [edx+28], -1
	jne	SHORT $LN22@build

; 94   : 			ln[i] = nbLeafs++;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ln$[ebp]
	mov	edx, DWORD PTR _nbLeafs$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR _nbLeafs$[ebp]
	add	eax, 1
	mov	DWORD PTR _nbLeafs$[ebp], eax

; 95   : 		else

	jmp	SHORT $LN21@build
$LN22@build:

; 96   : 			ln[i] = nbNodes++;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _ln$[ebp]
	mov	eax, DWORD PTR _nbNodes$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	ecx, DWORD PTR _nbNodes$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nbNodes$[ebp], ecx
$LN21@build:

; 97   : 	}

	jmp	SHORT $LN24@build
$LN23@build:

; 98   : 	tree_->root_ = new AABBTreeNode[nbNodes];

	mov	edx, DWORD PTR _nbNodes$[ebp]
	mov	DWORD PTR $T8149[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T8149[ebp]
	mov	edx, 32					; 00000020H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8151[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8151[ebp], 0
	je	SHORT $LN28@build
	mov	ecx, DWORD PTR $T8151[ebp]
	mov	edx, DWORD PTR $T8149[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1AABBTreeNode@ozcollide@@QAE@XZ
	push	OFFSET ??0AABBTreeNode@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR $T8149[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR $T8151[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T8151[ebp]
	add	edx, 4
	mov	DWORD PTR tv150[ebp], edx
	jmp	SHORT $LN29@build
$LN28@build:
	mov	DWORD PTR tv150[ebp], 0
$LN29@build:
	mov	eax, DWORD PTR tv150[ebp]
	mov	DWORD PTR $T8150[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T8150[ebp]
	mov	DWORD PTR [edx+8], eax

; 99   : 	tree_->leafs_ = new AABBTreePolygonLeaf[nbLeafs];

	mov	ecx, DWORD PTR _nbLeafs$[ebp]
	mov	DWORD PTR $T8154[ebp], ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T8154[ebp]
	mov	edx, 44					; 0000002cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8156[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T8156[ebp], 0
	je	SHORT $LN30@build
	mov	ecx, DWORD PTR $T8156[ebp]
	mov	edx, DWORD PTR $T8154[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1AABBTreePolygonLeaf@ozcollide@@QAE@XZ
	push	OFFSET ??0AABBTreePolygonLeaf@ozcollide@@QAE@XZ ; ozcollide::AABBTreePolygonLeaf::AABBTreePolygonLeaf
	mov	eax, DWORD PTR $T8154[ebp]
	push	eax
	push	44					; 0000002cH
	mov	ecx, DWORD PTR $T8156[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T8156[ebp]
	add	edx, 4
	mov	DWORD PTR tv174[ebp], edx
	jmp	SHORT $LN31@build
$LN30@build:
	mov	DWORD PTR tv174[ebp], 0
$LN31@build:
	mov	eax, DWORD PTR tv174[ebp]
	mov	DWORD PTR $T8155[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T8155[ebp]
	mov	DWORD PTR [edx+36], eax

; 100  : 	tree_->nbNodes_ = nbNodes;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _nbNodes$[ebp]
	mov	DWORD PTR [edx+4], eax

; 101  : 	tree_->nbLeafs_ = nbLeafs;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _nbLeafs$[ebp]
	mov	DWORD PTR [edx+12], eax

; 102  : 
; 103  : 	if (_moni)

	cmp	DWORD PTR __moni$[ebp], 0
	je	SHORT $LN20@build

; 104  : 		_moni->write("Building the final clean tree");

	push	OFFSET $SG7551
	mov	ecx, DWORD PTR __moni$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __moni$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
$LN20@build:

; 105  : 
; 106  : 	for (i = 0; i < items_.size(); i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN19@build
$LN18@build:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN19@build:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN17@build

; 107  : 		if (_moni)

	cmp	DWORD PTR __moni$[ebp], 0
	je	SHORT $LN16@build

; 108  : 			_moni->setProgress(i, items_.size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::size
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR __moni$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __moni$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN16@build:

; 109  : 
; 110  : 		WorkingItem &it = *items_[i];

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEAAPAVWorkingItem@AABBTreePolyBuilder@1@H@Z ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _it$7556[ebp], edx

; 111  : 		if (it.left == -1 && it.right == -1) {

	mov	eax, DWORD PTR _it$7556[ebp]
	cmp	DWORD PTR [eax+24], -1
	jne	$LN15@build
	mov	ecx, DWORD PTR _it$7556[ebp]
	cmp	DWORD PTR [ecx+28], -1
	jne	$LN15@build

; 112  : 			int indexLeaf = ln[i];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _ln$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _indexLeaf$7558[ebp], ecx

; 113  : 			AABBTreePolygonLeaf *pl = (AABBTreePolygonLeaf*) tree_->leafs_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _pl$7559[ebp], ecx

; 114  : 			pl += indexLeaf;

	mov	edx, DWORD PTR _indexLeaf$7558[ebp]
	imul	edx, 44					; 0000002cH
	add	edx, DWORD PTR _pl$7559[ebp]
	mov	DWORD PTR _pl$7559[ebp], edx

; 115  : 			pl->aabb = it.aabb;

	mov	eax, DWORD PTR _it$7556[ebp]
	mov	ecx, DWORD PTR _pl$7559[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax

; 116  : 			pl->left = NULL;

	mov	ecx, DWORD PTR _pl$7559[ebp]
	mov	DWORD PTR [ecx+24], 0

; 117  : 			pl->right = NULL;

	mov	edx, DWORD PTR _pl$7559[ebp]
	mov	DWORD PTR [edx+28], 0

; 118  : 			int nbPols = it.pols.size();

	mov	ecx, DWORD PTR _it$7556[ebp]
	add	ecx, 32					; 00000020H
	call	?size@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::Polygon *>::size
	mov	DWORD PTR _nbPols$7561[ebp], eax

; 119  : 			pl->nbPolys = nbPols;

	mov	eax, DWORD PTR _pl$7559[ebp]
	mov	ecx, DWORD PTR _nbPols$7561[ebp]
	mov	DWORD PTR [eax+32], ecx

; 120  : 			pl->polys = new Polygon[nbPols];

	mov	edx, DWORD PTR _nbPols$7561[ebp]
	mov	DWORD PTR $T8159[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T8159[ebp]
	mov	edx, 32					; 00000020H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8161[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T8161[ebp], 0
	je	SHORT $LN32@build
	mov	ecx, DWORD PTR $T8161[ebp]
	mov	edx, DWORD PTR $T8159[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1Polygon@ozcollide@@QAE@XZ	; ozcollide::Polygon::~Polygon
	push	OFFSET ??0Polygon@ozcollide@@QAE@XZ	; ozcollide::Polygon::Polygon
	mov	eax, DWORD PTR $T8159[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR $T8161[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T8161[ebp]
	add	edx, 4
	mov	DWORD PTR tv259[ebp], edx
	jmp	SHORT $LN33@build
$LN32@build:
	mov	DWORD PTR tv259[ebp], 0
$LN33@build:
	mov	eax, DWORD PTR tv259[ebp]
	mov	DWORD PTR $T8160[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pl$7559[ebp]
	mov	edx, DWORD PTR $T8160[ebp]
	mov	DWORD PTR [ecx+36], edx

; 121  : 			for (j = 0; j < nbPols; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN14@build
$LN13@build:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN14@build:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _nbPols$7561[ebp]
	jge	SHORT $LN12@build

; 122  : 				Polygon *pol = (Polygon*) &pl->polys[j];

	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _pl$7559[ebp]
	add	edx, DWORD PTR [eax+36]
	mov	DWORD PTR _pol$7572[ebp], edx

; 123  : 				it.pols[j]->copyTo(*pol);

	mov	ecx, DWORD PTR _pol$7572[ebp]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	ecx, DWORD PTR _it$7556[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEAAPAVPolygon@1@H@Z ; ozcollide::Vector<ozcollide::Polygon *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?copyTo@Polygon@ozcollide@@QBEXAAV12@@Z	; ozcollide::Polygon::copyTo

; 124  : 			}

	jmp	SHORT $LN13@build
$LN12@build:

; 125  : 		}
; 126  : 		else {

	jmp	$LN11@build
$LN15@build:

; 127  : 			int nodeIndex = ln[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ln$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _nodeIndex$7575[ebp], edx

; 128  : 			AABBTreeNode *pn = &tree_->root_[nodeIndex];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _nodeIndex$7575[ebp]
	shl	edx, 5
	add	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _pn$7576[ebp], edx

; 129  : 			pn->aabb = it.aabb;

	mov	eax, DWORD PTR _it$7556[ebp]
	mov	ecx, DWORD PTR _pn$7576[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax

; 130  : 
; 131  : 			if (it.left != -1) {

	mov	ecx, DWORD PTR _it$7556[ebp]
	cmp	DWORD PTR [ecx+24], -1
	je	SHORT $LN10@build

; 132  : 				WorkingItem *item = items_[it.left];

	mov	edx, DWORD PTR _it$7556[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEAAPAVWorkingItem@AABBTreePolyBuilder@1@H@Z ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _item$7578[ebp], ecx

; 133  : 				if (item->left == -1 && item->right == -1) {

	mov	edx, DWORD PTR _item$7578[ebp]
	cmp	DWORD PTR [edx+24], -1
	jne	SHORT $LN9@build
	mov	eax, DWORD PTR _item$7578[ebp]
	cmp	DWORD PTR [eax+28], -1
	jne	SHORT $LN9@build

; 134  : 					AABBTreePolygonLeaf *pl = (AABBTreePolygonLeaf*) tree_->leafs_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _pl$7580[ebp], eax

; 135  : 					pn->left = pl + ln[it.left];

	mov	ecx, DWORD PTR _it$7556[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _ln$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	imul	ecx, 44					; 0000002cH
	add	ecx, DWORD PTR _pl$7580[ebp]
	mov	edx, DWORD PTR _pn$7576[ebp]
	mov	DWORD PTR [edx+24], ecx

; 136  : 				}
; 137  : 				else {

	jmp	SHORT $LN8@build
$LN9@build:

; 138  : 					pn->left = tree_->root_ + ln[it.left];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _it$7556[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	edx, DWORD PTR _ln$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	shl	eax, 5
	add	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _pn$7576[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN8@build:

; 139  : 				}
; 140  : 			}
; 141  : 			else

	jmp	SHORT $LN7@build
$LN10@build:

; 142  : 				pn->left = NULL;

	mov	edx, DWORD PTR _pn$7576[ebp]
	mov	DWORD PTR [edx+24], 0
$LN7@build:

; 143  : 
; 144  : 			if (it.right != -1) {

	mov	eax, DWORD PTR _it$7556[ebp]
	cmp	DWORD PTR [eax+28], -1
	je	SHORT $LN6@build

; 145  : 				WorkingItem *item = items_[it.right];

	mov	ecx, DWORD PTR _it$7556[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEAAPAVWorkingItem@AABBTreePolyBuilder@1@H@Z ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _item$7585[ebp], eax

; 146  : 				if (item->left == -1 && item->right == -1) {

	mov	ecx, DWORD PTR _item$7585[ebp]
	cmp	DWORD PTR [ecx+24], -1
	jne	SHORT $LN5@build
	mov	edx, DWORD PTR _item$7585[ebp]
	cmp	DWORD PTR [edx+28], -1
	jne	SHORT $LN5@build

; 147  : 					AABBTreePolygonLeaf *pl = (AABBTreePolygonLeaf*) tree_->leafs_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _pl$7587[ebp], edx

; 148  : 					pn->right = pl + ln[it.right];

	mov	eax, DWORD PTR _it$7556[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _ln$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	imul	eax, 44					; 0000002cH
	add	eax, DWORD PTR _pl$7587[ebp]
	mov	ecx, DWORD PTR _pn$7576[ebp]
	mov	DWORD PTR [ecx+28], eax

; 149  : 				}
; 150  : 				else {

	jmp	SHORT $LN4@build
$LN5@build:

; 151  : 					pn->right = tree_->root_ + ln[it.right];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _it$7556[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR _ln$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4]
	shl	edx, 5
	add	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _pn$7576[ebp]
	mov	DWORD PTR [eax+28], edx
$LN4@build:

; 152  : 				}
; 153  : 			}
; 154  : 			else

	jmp	SHORT $LN11@build
$LN6@build:

; 155  : 				pn->right = NULL;

	mov	ecx, DWORD PTR _pn$7576[ebp]
	mov	DWORD PTR [ecx+28], 0
$LN11@build:

; 156  : 		}
; 157  : 	}

	jmp	$LN18@build
$LN17@build:

; 158  : 
; 159  : 	if (_moni)

	cmp	DWORD PTR __moni$[ebp], 0
	je	SHORT $LN2@build

; 160  : 		_moni->write("Freeing temporary buffer");

	push	OFFSET $SG7592
	mov	edx, DWORD PTR __moni$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __moni$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
$LN2@build:

; 161  : 
; 162  : 	delete [] ln;

	mov	eax, DWORD PTR _ln$[ebp]
	mov	DWORD PTR $T8164[ebp], eax
	mov	ecx, DWORD PTR $T8164[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 163  : 
; 164  : 	items_.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXXZ ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::clear

; 165  : 
; 166  : 	if (_moni)

	cmp	DWORD PTR __moni$[ebp], 0
	je	SHORT $LN26@build

; 167  : 		_moni->write("Done.");

	push	OFFSET $SG7595
	mov	edx, DWORD PTR __moni$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __moni$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
$LN26@build:

; 168  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?build@AABBTreePolyBuilder@ozcollide@@AAEXPAVMonitor@2@@Z$0:
	mov	eax, DWORD PTR $T8151[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?build@AABBTreePolyBuilder@ozcollide@@AAEXPAVMonitor@2@@Z$1:
	mov	eax, DWORD PTR $T8156[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?build@AABBTreePolyBuilder@ozcollide@@AAEXPAVMonitor@2@@Z$2:
	mov	eax, DWORD PTR $T8161[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?build@AABBTreePolyBuilder@ozcollide@@AAEXPAVMonitor@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?build@AABBTreePolyBuilder@ozcollide@@AAEXPAVMonitor@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?build@AABBTreePolyBuilder@ozcollide@@AAEXPAVMonitor@2@@Z ENDP ; ozcollide::AABBTreePolyBuilder::build
;	COMDAT xdata$x
; File i:\svnroot\client\sdk\ozcollide\aabbtree_poly.h
xdata$x	SEGMENT
__unwindtable$??0AABBTreePolygonLeaf@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AABBTreePolygonLeaf@ozcollide@@QAE@XZ$0
__ehfuncinfo$??0AABBTreePolygonLeaf@ozcollide@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0AABBTreePolygonLeaf@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0AABBTreePolygonLeaf@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0AABBTreePolygonLeaf@ozcollide@@QAE@XZ PROC		; ozcollide::AABBTreePolygonLeaf::AABBTreePolygonLeaf, COMDAT
; _this$ = ecx

; 48   : 	AABBTreePolygonLeaf() : nbPolys (0), polys (NULL), users (NULL) { };

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0AABBTreePolygonLeaf@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0AABBTreeNode@ozcollide@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AABBTreePolygonLeaf@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AABBTreeNode@ozcollide@@QAE@XZ
__ehhandler$??0AABBTreePolygonLeaf@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0AABBTreePolygonLeaf@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0AABBTreePolygonLeaf@ozcollide@@QAE@XZ ENDP		; ozcollide::AABBTreePolygonLeaf::AABBTreePolygonLeaf
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0AABBTreeNode@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AABBTreeNode@ozcollide@@QAE@XZ$0
__ehfuncinfo$??0AABBTreeNode@ozcollide@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0AABBTreeNode@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0AABBTreeNode@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0AABBTreeNode@ozcollide@@QAE@XZ PROC			; ozcollide::AABBTreeNode::AABBTreeNode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0AABBTreeNode@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Box@ozcollide@@QAE@XZ		; ozcollide::Box::Box
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AABBTreeNode@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
__ehhandler$??0AABBTreeNode@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0AABBTreeNode@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0AABBTreeNode@ozcollide@@QAE@XZ ENDP			; ozcollide::AABBTreeNode::AABBTreeNode
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1AABBTreeNode@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AABBTreeNode@ozcollide@@QAE@XZ$0
__ehfuncinfo$??1AABBTreeNode@ozcollide@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1AABBTreeNode@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1AABBTreeNode@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AABBTreeNode@ozcollide@@QAE@XZ PROC			; ozcollide::AABBTreeNode::~AABBTreeNode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1AABBTreeNode@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1AABBTreeNode@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Box@ozcollide@@QAE@XZ		; ozcollide::Box::~Box
__ehhandler$??1AABBTreeNode@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1AABBTreeNode@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1AABBTreeNode@ozcollide@@QAE@XZ ENDP			; ozcollide::AABBTreeNode::~AABBTreeNode
PUBLIC	??_EAABBTreeNode@ozcollide@@QAEPAXI@Z		; ozcollide::AABBTreeNode::`vector deleting destructor'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_EAABBTreeNode@ozcollide@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EAABBTreeNode@ozcollide@@QAEPAXI@Z PROC		; ozcollide::AABBTreeNode::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1AABBTreeNode@ozcollide@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AABBTreeNode@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EAABBTreeNode@ozcollide@@QAEPAXI@Z ENDP		; ozcollide::AABBTreeNode::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_EAABBTreePolygonLeaf@ozcollide@@QAEPAXI@Z	; ozcollide::AABBTreePolygonLeaf::`vector deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_EAABBTreePolygonLeaf@ozcollide@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EAABBTreePolygonLeaf@ozcollide@@QAEPAXI@Z PROC	; ozcollide::AABBTreePolygonLeaf::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1AABBTreePolygonLeaf@ozcollide@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@2
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AABBTreePolygonLeaf@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EAABBTreePolygonLeaf@ozcollide@@QAEPAXI@Z ENDP	; ozcollide::AABBTreePolygonLeaf::`vector deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1AABBTreePolygonLeaf@ozcollide@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AABBTreePolygonLeaf@ozcollide@@QAE@XZ$0
__ehfuncinfo$??1AABBTreePolygonLeaf@ozcollide@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1AABBTreePolygonLeaf@ozcollide@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1AABBTreePolygonLeaf@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AABBTreePolygonLeaf@ozcollide@@QAE@XZ PROC		; ozcollide::AABBTreePolygonLeaf::~AABBTreePolygonLeaf, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1AABBTreePolygonLeaf@ozcollide@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AABBTreeNode@ozcollide@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1AABBTreePolygonLeaf@ozcollide@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AABBTreeNode@ozcollide@@QAE@XZ
__ehhandler$??1AABBTreePolygonLeaf@ozcollide@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1AABBTreePolygonLeaf@ozcollide@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1AABBTreePolygonLeaf@ozcollide@@QAE@XZ ENDP		; ozcollide::AABBTreePolygonLeaf::~AABBTreePolygonLeaf
PUBLIC	??_EPolygon@ozcollide@@QAEPAXI@Z		; ozcollide::Polygon::`vector deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??_EPolygon@ozcollide@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EPolygon@ozcollide@@QAEPAXI@Z PROC			; ozcollide::Polygon::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@3
	push	OFFSET ??1Polygon@ozcollide@@QAE@XZ	; ozcollide::Polygon::~Polygon
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@3
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@3
$LN3@vector@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Polygon@ozcollide@@QAE@XZ		; ozcollide::Polygon::~Polygon
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EPolygon@ozcollide@@QAEPAXI@Z ENDP			; ozcollide::Polygon::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?grow@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::Polygon *>::grow
PUBLIC	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
PUBLIC	__real@4000000000000000
PUBLIC	?classifyPol@AABBTreePolyBuilder@ozcollide@@AAEHABVPolygon@2@HMAAM1@Z ; ozcollide::AABBTreePolyBuilder::classifyPol
PUBLIC	?calculAvgPoint@AABBTreePolyBuilder@ozcollide@@AAEMAAVWorkingItem@12@H@Z ; ozcollide::AABBTreePolyBuilder::calculAvgPoint
PUBLIC	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z		; ozcollide::Vec3f::operator-
PUBLIC	??KVec3f@ozcollide@@QBE?AV01@M@Z		; ozcollide::Vec3f::operator/
PUBLIC	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z		; ozcollide::Vec3f::operator+
PUBLIC	__real@40000000
PUBLIC	?getIndex@Polygon@ozcollide@@QBEHH@Z		; ozcollide::Polygon::getIndex
PUBLIC	?getNbIndices@Polygon@ozcollide@@QBEHXZ		; ozcollide::Polygon::getNbIndices
PUBLIC	??GVec3f@ozcollide@@QBE?AV01@XZ			; ozcollide::Vec3f::operator-
PUBLIC	??0Vec3f@ozcollide@@QAE@MMM@Z			; ozcollide::Vec3f::Vec3f
PUBLIC	__real@7f7fffff
EXTRN	__fltused:DWORD
;	COMDAT __real@4000000000000000
; File i:\svnroot\client\sdk\ozcollide\aabbtreepoly_builder.cpp
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?workOnItem@AABBTreePolyBuilder@ozcollide@@AAEXAAVWorkingItem@12@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?workOnItem@AABBTreePolyBuilder@ozcollide@@AAEXAAVWorkingItem@12@H@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?workOnItem@AABBTreePolyBuilder@ozcollide@@AAEXAAVWorkingItem@12@H@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?workOnItem@AABBTreePolyBuilder@ozcollide@@AAEXAAVWorkingItem@12@H@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?workOnItem@AABBTreePolyBuilder@ozcollide@@AAEXAAVWorkingItem@12@H@Z$3
__ehfuncinfo$?workOnItem@AABBTreePolyBuilder@ozcollide@@AAEXAAVWorkingItem@12@H@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?workOnItem@AABBTreePolyBuilder@ozcollide@@AAEXAAVWorkingItem@12@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv540 = -472						; size = 4
tv512 = -468						; size = 4
tv843 = -464						; size = 4
tv833 = -460						; size = 4
tv823 = -456						; size = 4
tv366 = -452						; size = 4
tv763 = -448						; size = 4
tv753 = -444						; size = 4
tv743 = -440						; size = 4
tv257 = -436						; size = 4
_this$ = -432						; size = 4
$T8246 = -428						; size = 4
$T8245 = -424						; size = 4
$T8242 = -420						; size = 4
$T8241 = -416						; size = 4
$T8240 = -412						; size = 12
$T8239 = -400						; size = 12
$T8238 = -388						; size = 12
$T8237 = -376						; size = 12
$T8236 = -364						; size = 12
$T8235 = -352						; size = 12
$T8232 = -340						; size = 4
$T8231 = -336						; size = 4
$T8230 = -332						; size = 12
$T8229 = -320						; size = 12
$T8228 = -308						; size = 12
$T8227 = -296						; size = 12
$T8226 = -284						; size = 12
$T8225 = -272						; size = 12
$T8222 = -260						; size = 4
$T8221 = -256						; size = 4
$T8220 = -252						; size = 12
$T8219 = -240						; size = 12
$T8218 = -228						; size = 12
$T8217 = -216						; size = 12
$T8216 = -204						; size = 12
$T8215 = -192						; size = 12
_p$7749 = -180						; size = 4
_start$7745 = -176					; size = 4
_nbPols$7743 = -172					; size = 4
_le$7744 = -168						; size = 4
_p$7736 = -164						; size = 4
_start$7732 = -160					; size = 4
_nbPols$7730 = -156					; size = 4
_le$7731 = -152						; size = 4
_box$7704 = -148					; size = 4
_box$7713 = -144					; size = 4
_box$7680 = -140					; size = 4
_box$7689 = -136					; size = 4
_max$7672 = -132					; size = 4
_min$7671 = -128					; size = 4
_pol$7670 = -124					; size = 4
_res$7673 = -120					; size = 4
_index$7643 = -116					; size = 4
_pt$7644 = -112						; size = 4
_nbVerts$7639 = -108					; size = 4
_pol$7638 = -104					; size = 4
_j$ = -100						; size = 4
_max$ = -96						; size = 12
_middle$ = -84						; size = 4
_bboxMax$ = -80						; size = 12
_bboxMin$ = -68						; size = 12
_right$ = -56						; size = 4
_ext$ = -52						; size = 4
_size$ = -48						; size = 4
_left$ = -44						; size = 4
_min$ = -40						; size = 12
_i$ = -28						; size = 4
_nbPols$ = -24						; size = 4
_axis$ = -20						; size = 4
_center$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__item$ = 8						; size = 4
__leafDepth$ = 12					; size = 4
?workOnItem@AABBTreePolyBuilder@ozcollide@@AAEXAAVWorkingItem@12@H@Z PROC ; ozcollide::AABBTreePolyBuilder::workOnItem
; _this$ = ecx

; 171  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?workOnItem@AABBTreePolyBuilder@ozcollide@@AAEXAAVWorkingItem@12@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 460				; 000001ccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 172  : 	int i, j;
; 173  : 
; 174  : 	int size = _item.pols.size();

	mov	ecx, DWORD PTR __item$[ebp]
	add	ecx, 32					; 00000020H
	call	?size@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::Polygon *>::size
	mov	DWORD PTR _size$[ebp], eax

; 175  : 	if (size <= _leafDepth) {

	mov	eax, DWORD PTR _size$[ebp]
	cmp	eax, DWORD PTR __leafDepth$[ebp]
	jg	SHORT $LN60@workOnItem

; 176  : 		_item.left = -1;

	mov	ecx, DWORD PTR __item$[ebp]
	mov	DWORD PTR [ecx+24], -1

; 177  : 		_item.right = -1;

	mov	edx, DWORD PTR __item$[ebp]
	mov	DWORD PTR [edx+28], -1

; 178  : 		return;

	jmp	$LN61@workOnItem
$LN60@workOnItem:

; 179  : 	}
; 180  : 
; 181  : 	int axis;
; 182  : 	float middle;
; 183  : 
; 184  : 	int nbPols = _item.pols.size();

	mov	ecx, DWORD PTR __item$[ebp]
	add	ecx, 32					; 00000020H
	call	?size@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::Polygon *>::size
	mov	DWORD PTR _nbPols$[ebp], eax

; 185  : 
; 186  : 	Vec3f min, max;

	lea	ecx, DWORD PTR _min$[ebp]
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f
	lea	ecx, DWORD PTR _max$[ebp]
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f

; 187  : 	min = Vec3f(FLT_MAX, FLT_MAX, FLT_MAX);

	push	ecx
	fld	DWORD PTR __real@7f7fffff
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@7f7fffff
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@7f7fffff
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T8215[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _min$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _min$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _min$[ebp+8], eax

; 188  : 	max = -min;

	lea	ecx, DWORD PTR $T8216[ebp]
	push	ecx
	lea	ecx, DWORD PTR _min$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@XZ		; ozcollide::Vec3f::operator-
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _max$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _max$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _max$[ebp+8], edx

; 189  : 	for (i = 0; i < nbPols; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN59@workOnItem
$LN58@workOnItem:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN59@workOnItem:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _nbPols$[ebp]
	jge	$LN57@workOnItem

; 190  : 		Polygon &pol = *_item.pols[i];

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR __item$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEAAPAVPolygon@1@H@Z ; ozcollide::Vector<ozcollide::Polygon *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pol$7638[ebp], eax

; 191  : 		int nbVerts = pol.getNbIndices();

	mov	ecx, DWORD PTR _pol$7638[ebp]
	call	?getNbIndices@Polygon@ozcollide@@QBEHXZ	; ozcollide::Polygon::getNbIndices
	mov	DWORD PTR _nbVerts$7639[ebp], eax

; 192  : 		for (j = 0; j < nbVerts; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN56@workOnItem
$LN55@workOnItem:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN56@workOnItem:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _nbVerts$7639[ebp]
	jge	$LN54@workOnItem

; 193  : 			int index = pol.getIndex(j);

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pol$7638[ebp]
	call	?getIndex@Polygon@ozcollide@@QBEHH@Z	; ozcollide::Polygon::getIndex
	mov	DWORD PTR _index$7643[ebp], eax

; 194  : 			Vec3f &pt = tree_->points_[index];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _index$7643[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _pt$7644[ebp], eax

; 195  : 			if (pt.x < min.x) min.x = pt.x;

	mov	ecx, DWORD PTR _pt$7644[ebp]
	fld	DWORD PTR [ecx]
	fld	DWORD PTR _min$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN53@workOnItem
	mov	edx, DWORD PTR _pt$7644[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR _min$[ebp]
$LN53@workOnItem:

; 196  : 			if (pt.y < min.y) min.y = pt.y;

	mov	eax, DWORD PTR _pt$7644[ebp]
	fld	DWORD PTR [eax+4]
	fld	DWORD PTR _min$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN52@workOnItem
	mov	ecx, DWORD PTR _pt$7644[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR _min$[ebp+4]
$LN52@workOnItem:

; 197  : 			if (pt.z < min.z) min.z = pt.z;

	mov	edx, DWORD PTR _pt$7644[ebp]
	fld	DWORD PTR [edx+8]
	fld	DWORD PTR _min$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN51@workOnItem
	mov	eax, DWORD PTR _pt$7644[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _min$[ebp+8]
$LN51@workOnItem:

; 198  : 			if (pt.x > max.x) max.x = pt.x;

	mov	ecx, DWORD PTR _pt$7644[ebp]
	fld	DWORD PTR [ecx]
	fld	DWORD PTR _max$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN50@workOnItem
	mov	edx, DWORD PTR _pt$7644[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR _max$[ebp]
$LN50@workOnItem:

; 199  : 			if (pt.y > max.y) max.y = pt.y;

	mov	eax, DWORD PTR _pt$7644[ebp]
	fld	DWORD PTR [eax+4]
	fld	DWORD PTR _max$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN49@workOnItem
	mov	ecx, DWORD PTR _pt$7644[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR _max$[ebp+4]
$LN49@workOnItem:

; 200  : 			if (pt.z > max.z) max.z = pt.z;

	mov	edx, DWORD PTR _pt$7644[ebp]
	fld	DWORD PTR [edx+8]
	fld	DWORD PTR _max$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN48@workOnItem
	mov	eax, DWORD PTR _pt$7644[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _max$[ebp+8]
$LN48@workOnItem:

; 201  : 		}

	jmp	$LN55@workOnItem
$LN54@workOnItem:

; 202  : 	}

	jmp	$LN58@workOnItem
$LN57@workOnItem:

; 203  : 	_item.aabb.center = (min + max) / 2;

	push	ecx
	fld	DWORD PTR __real@40000000
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T8218[ebp]
	push	ecx
	lea	edx, DWORD PTR _max$[ebp]
	push	edx
	lea	eax, DWORD PTR $T8217[ebp]
	push	eax
	lea	ecx, DWORD PTR _min$[ebp]
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+
	mov	ecx, eax
	call	??KVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator/
	mov	ecx, DWORD PTR __item$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 204  : 	_item.aabb.extent = (max - min) / 2;

	push	ecx
	fld	DWORD PTR __real@40000000
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T8220[ebp]
	push	ecx
	lea	edx, DWORD PTR _min$[ebp]
	push	edx
	lea	eax, DWORD PTR $T8219[ebp]
	push	eax
	lea	ecx, DWORD PTR _max$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-
	mov	ecx, eax
	call	??KVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator/
	mov	ecx, DWORD PTR __item$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 205  : 
; 206  : 	const Vec3f &center = _item.aabb.center;

	mov	ecx, DWORD PTR __item$[ebp]
	mov	DWORD PTR _center$[ebp], ecx

; 207  : 	const Vec3f &ext = _item.aabb.extent;

	mov	edx, DWORD PTR __item$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _ext$[ebp], edx

; 208  : 
; 209  : 	if (ext.x > ext.y && ext.x > ext.z)

	mov	eax, DWORD PTR _ext$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _ext$[ebp]
	fld	DWORD PTR [ecx+4]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN47@workOnItem
	mov	edx, DWORD PTR _ext$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _ext$[ebp]
	fld	DWORD PTR [eax+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN47@workOnItem

; 210  : 		axis = 0;

	mov	DWORD PTR _axis$[ebp], 0

; 211  : 	else {

	jmp	SHORT $LN44@workOnItem
$LN47@workOnItem:

; 212  : 		if (ext.y > ext.z)

	mov	ecx, DWORD PTR _ext$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _ext$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN45@workOnItem

; 213  : 			axis = 1;

	mov	DWORD PTR _axis$[ebp], 1

; 214  : 		else

	jmp	SHORT $LN44@workOnItem
$LN45@workOnItem:

; 215  : 			axis = 2;

	mov	DWORD PTR _axis$[ebp], 2
$LN44@workOnItem:

; 216  : 	}
; 217  : 
; 218  : 	middle = calculAvgPoint(_item, axis);

	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR __item$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?calculAvgPoint@AABBTreePolyBuilder@ozcollide@@AAEMAAVWorkingItem@12@H@Z ; ozcollide::AABBTreePolyBuilder::calculAvgPoint
	fstp	DWORD PTR _middle$[ebp]

; 219  : 
; 220  : 	Vec3f bboxMin = center - ext;

	mov	edx, DWORD PTR _ext$[ebp]
	push	edx
	lea	eax, DWORD PTR _bboxMin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _center$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 221  : 	Vec3f bboxMax = center + ext;

	mov	ecx, DWORD PTR _ext$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bboxMax$[ebp]
	push	edx
	mov	ecx, DWORD PTR _center$[ebp]
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+

; 222  : 
; 223  : 	WorkingItem *left = NULL;

	mov	DWORD PTR _left$[ebp], 0

; 224  : 	WorkingItem *right = NULL;

	mov	DWORD PTR _right$[ebp], 0

; 225  : 
; 226  : 	for (i = 0; i < nbPols; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN43@workOnItem
$LN42@workOnItem:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN43@workOnItem:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _nbPols$[ebp]
	jge	$LN41@workOnItem

; 227  : 		Polygon *pol = _item.pols[i];

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR __item$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEAAPAVPolygon@1@H@Z ; ozcollide::Vector<ozcollide::Polygon *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pol$7670[ebp], eax

; 228  : 		float min, max;
; 229  : 		int res = classifyPol(*pol, axis, middle, min, max);

	lea	ecx, DWORD PTR _max$7672[ebp]
	push	ecx
	lea	edx, DWORD PTR _min$7671[ebp]
	push	edx
	push	ecx
	fld	DWORD PTR _middle$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pol$7670[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?classifyPol@AABBTreePolyBuilder@ozcollide@@AAEHABVPolygon@2@HMAAM1@Z ; ozcollide::AABBTreePolyBuilder::classifyPol
	mov	DWORD PTR _res$7673[ebp], eax

; 230  : 		if (res == 0) {

	cmp	DWORD PTR _res$7673[ebp], 0
	jne	$LN40@workOnItem

; 231  : 			if (!left) {

	cmp	DWORD PTR _left$[ebp], 0
	jne	$LN34@workOnItem

; 232  : 				left = new WorkingItem();

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8222[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8222[ebp], 0
	je	SHORT $LN63@workOnItem
	mov	ecx, DWORD PTR $T8222[ebp]
	call	??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ
	mov	DWORD PTR tv257[ebp], eax
	jmp	SHORT $LN64@workOnItem
$LN63@workOnItem:
	mov	DWORD PTR tv257[ebp], 0
$LN64@workOnItem:
	mov	edx, DWORD PTR tv257[ebp]
	mov	DWORD PTR $T8221[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T8221[ebp]
	mov	DWORD PTR _left$[ebp], eax

; 233  : 				Box &box = left->aabb;

	mov	ecx, DWORD PTR _left$[ebp]
	mov	DWORD PTR _box$7680[ebp], ecx

; 234  : 				if (axis == 0)

	cmp	DWORD PTR _axis$[ebp], 0
	jne	SHORT $LN38@workOnItem

; 235  : 					box.setFromPoints(bboxMin, Vec3f((bboxMin.x + bboxMax.x) / 2.0f, bboxMax.y, bboxMax.z));

	push	ecx
	fld	DWORD PTR _bboxMax$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMax$[ebp+4]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _bboxMin$[ebp]
	fadd	DWORD PTR _bboxMax$[ebp]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR tv743[ebp]
	fld	DWORD PTR tv743[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T8225[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	lea	edx, DWORD PTR _bboxMin$[ebp]
	push	edx
	mov	ecx, DWORD PTR _box$7680[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
	jmp	$LN34@workOnItem
$LN38@workOnItem:

; 236  : 				else if (axis == 1)

	cmp	DWORD PTR _axis$[ebp], 1
	jne	SHORT $LN36@workOnItem

; 237  : 					box.setFromPoints(bboxMin, Vec3f(bboxMax.x, (bboxMin.y + bboxMax.y) / 2.0f, bboxMax.z));

	push	ecx
	fld	DWORD PTR _bboxMax$[ebp+8]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _bboxMin$[ebp+4]
	fadd	DWORD PTR _bboxMax$[ebp+4]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR tv753[ebp]
	fld	DWORD PTR tv753[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMax$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T8226[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	lea	eax, DWORD PTR _bboxMin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _box$7680[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
	jmp	SHORT $LN34@workOnItem
$LN36@workOnItem:

; 238  : 				else if (axis == 2)

	cmp	DWORD PTR _axis$[ebp], 2
	jne	SHORT $LN34@workOnItem

; 239  : 					box.setFromPoints(bboxMin, Vec3f(bboxMax.x, bboxMax.y, (bboxMin.z + bboxMax.z) / 2.0f));

	fld	DWORD PTR _bboxMin$[ebp+8]
	fadd	DWORD PTR _bboxMax$[ebp+8]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR tv763[ebp]
	fld	DWORD PTR tv763[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMax$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMax$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T8227[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	lea	ecx, DWORD PTR _bboxMin$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _box$7680[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
$LN34@workOnItem:

; 240  : 			}
; 241  : 			Box &box = left->aabb;

	mov	edx, DWORD PTR _left$[ebp]
	mov	DWORD PTR _box$7689[ebp], edx

; 242  : 			if (axis == 0 && max > (box.center.x + box.extent.x) )

	cmp	DWORD PTR _axis$[ebp], 0
	jne	SHORT $LN33@workOnItem
	mov	eax, DWORD PTR _box$7689[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _box$7689[ebp]
	fadd	DWORD PTR [ecx+12]
	fld	DWORD PTR _max$7672[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN33@workOnItem

; 243  : 				box.setFromPoints(bboxMin, Vec3f(max, bboxMax.y, bboxMax.z));

	push	ecx
	fld	DWORD PTR _bboxMax$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMax$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _max$7672[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T8228[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	lea	edx, DWORD PTR _bboxMin$[ebp]
	push	edx
	mov	ecx, DWORD PTR _box$7689[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
	jmp	$LN29@workOnItem
$LN33@workOnItem:

; 244  : 			else if (axis == 1 && max > (box.center.y + box.extent.y) )

	cmp	DWORD PTR _axis$[ebp], 1
	jne	SHORT $LN31@workOnItem
	mov	eax, DWORD PTR _box$7689[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _box$7689[ebp]
	fadd	DWORD PTR [ecx+16]
	fld	DWORD PTR _max$7672[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN31@workOnItem

; 245  : 				box.setFromPoints(bboxMin, Vec3f(bboxMax.x, max, bboxMax.z));

	push	ecx
	fld	DWORD PTR _bboxMax$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _max$7672[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMax$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T8229[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	lea	edx, DWORD PTR _bboxMin$[ebp]
	push	edx
	mov	ecx, DWORD PTR _box$7689[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
	jmp	SHORT $LN29@workOnItem
$LN31@workOnItem:

; 246  : 			else if (axis == 2 && max > (box.center.z + box.extent.z) )

	cmp	DWORD PTR _axis$[ebp], 2
	jne	SHORT $LN29@workOnItem
	mov	eax, DWORD PTR _box$7689[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _box$7689[ebp]
	fadd	DWORD PTR [ecx+20]
	fld	DWORD PTR _max$7672[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN29@workOnItem

; 247  : 				box.setFromPoints(bboxMin, Vec3f(bboxMax.x, bboxMax.y, max));

	push	ecx
	fld	DWORD PTR _max$7672[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMax$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMax$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T8230[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	lea	edx, DWORD PTR _bboxMin$[ebp]
	push	edx
	mov	ecx, DWORD PTR _box$7689[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
$LN29@workOnItem:

; 248  : 			left->pols.add(pol);

	lea	eax, DWORD PTR _pol$7670[ebp]
	push	eax
	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, 32					; 00000020H
	call	?add@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXABQAVPolygon@2@@Z ; ozcollide::Vector<ozcollide::Polygon *>::add

; 249  : 		}
; 250  : 		else {

	jmp	$LN28@workOnItem
$LN40@workOnItem:

; 251  : 			// res = 1
; 252  : 			if (!right) {

	cmp	DWORD PTR _right$[ebp], 0
	jne	$LN22@workOnItem

; 253  : 				right = new WorkingItem();

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8232[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T8232[ebp], 0
	je	SHORT $LN65@workOnItem
	mov	ecx, DWORD PTR $T8232[ebp]
	call	??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ
	mov	DWORD PTR tv366[ebp], eax
	jmp	SHORT $LN66@workOnItem
$LN65@workOnItem:
	mov	DWORD PTR tv366[ebp], 0
$LN66@workOnItem:
	mov	ecx, DWORD PTR tv366[ebp]
	mov	DWORD PTR $T8231[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T8231[ebp]
	mov	DWORD PTR _right$[ebp], edx

; 254  : 				Box &box = right->aabb;

	mov	eax, DWORD PTR _right$[ebp]
	mov	DWORD PTR _box$7704[ebp], eax

; 255  : 				if (axis == 0)

	cmp	DWORD PTR _axis$[ebp], 0
	jne	SHORT $LN26@workOnItem

; 256  : 					box.setFromPoints(Vec3f((bboxMin.x + bboxMax.x) / 2.0f, bboxMin.y, bboxMin.z), bboxMax);

	lea	ecx, DWORD PTR _bboxMax$[ebp]
	push	ecx
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp+4]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _bboxMin$[ebp]
	fadd	DWORD PTR _bboxMax$[ebp]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR tv823[ebp]
	fld	DWORD PTR tv823[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T8235[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	mov	ecx, DWORD PTR _box$7704[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
	jmp	$LN22@workOnItem
$LN26@workOnItem:

; 257  : 				else if (axis == 1)

	cmp	DWORD PTR _axis$[ebp], 1
	jne	SHORT $LN24@workOnItem

; 258  : 					box.setFromPoints(Vec3f(bboxMin.x, (bboxMin.y + bboxMax.y) / 2.0f, bboxMin.z), bboxMax);

	lea	edx, DWORD PTR _bboxMax$[ebp]
	push	edx
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp+8]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _bboxMin$[ebp+4]
	fadd	DWORD PTR _bboxMax$[ebp+4]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR tv833[ebp]
	fld	DWORD PTR tv833[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T8236[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	mov	ecx, DWORD PTR _box$7704[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
	jmp	SHORT $LN22@workOnItem
$LN24@workOnItem:

; 259  : 				else if (axis == 2)

	cmp	DWORD PTR _axis$[ebp], 2
	jne	SHORT $LN22@workOnItem

; 260  : 					box.setFromPoints(Vec3f(bboxMin.x, bboxMin.y, (bboxMin.z + bboxMax.z) / 2.0f), bboxMax);

	lea	eax, DWORD PTR _bboxMax$[ebp]
	push	eax
	fld	DWORD PTR _bboxMin$[ebp+8]
	fadd	DWORD PTR _bboxMax$[ebp+8]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR tv843[ebp]
	fld	DWORD PTR tv843[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T8237[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	mov	ecx, DWORD PTR _box$7704[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
$LN22@workOnItem:

; 261  : 			}
; 262  : 			Box &box = right->aabb;

	mov	ecx, DWORD PTR _right$[ebp]
	mov	DWORD PTR _box$7713[ebp], ecx

; 263  : 			if (axis == 0 && min < (box.center.x - box.extent.x) )

	cmp	DWORD PTR _axis$[ebp], 0
	jne	SHORT $LN21@workOnItem
	mov	edx, DWORD PTR _box$7713[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _box$7713[ebp]
	fsub	DWORD PTR [eax+12]
	fld	DWORD PTR _min$7671[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN21@workOnItem

; 264  : 				box.setFromPoints(Vec3f(min, bboxMin.y, bboxMin.z), bboxMax);

	lea	ecx, DWORD PTR _bboxMax$[ebp]
	push	ecx
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _min$7671[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T8238[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	mov	ecx, DWORD PTR _box$7713[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
	jmp	$LN17@workOnItem
$LN21@workOnItem:

; 265  : 			else if (axis == 1 && min < (box.center.y - box.extent.y) )

	cmp	DWORD PTR _axis$[ebp], 1
	jne	SHORT $LN19@workOnItem
	mov	edx, DWORD PTR _box$7713[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _box$7713[ebp]
	fsub	DWORD PTR [eax+16]
	fld	DWORD PTR _min$7671[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN19@workOnItem

; 266  : 				box.setFromPoints(Vec3f(bboxMin.x, min, bboxMin.z), bboxMax);

	lea	ecx, DWORD PTR _bboxMax$[ebp]
	push	ecx
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _min$7671[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T8239[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	mov	ecx, DWORD PTR _box$7713[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
	jmp	SHORT $LN17@workOnItem
$LN19@workOnItem:

; 267  : 			else if (axis == 2 && min < (box.center.z - box.extent.z) )

	cmp	DWORD PTR _axis$[ebp], 2
	jne	SHORT $LN17@workOnItem
	mov	edx, DWORD PTR _box$7713[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _box$7713[ebp]
	fsub	DWORD PTR [eax+20]
	fld	DWORD PTR _min$7671[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN17@workOnItem

; 268  : 				box.setFromPoints(Vec3f(bboxMin.x, bboxMin.y, min), bboxMax);

	lea	ecx, DWORD PTR _bboxMax$[ebp]
	push	ecx
	push	ecx
	fld	DWORD PTR _min$7671[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _bboxMin$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T8240[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	push	eax
	mov	ecx, DWORD PTR _box$7713[ebp]
	call	?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ; ozcollide::Box::setFromPoints
$LN17@workOnItem:

; 269  : 			right->pols.add(pol);

	lea	edx, DWORD PTR _pol$7670[ebp]
	push	edx
	mov	ecx, DWORD PTR _right$[ebp]
	add	ecx, 32					; 00000020H
	call	?add@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXABQAVPolygon@2@@Z ; ozcollide::Vector<ozcollide::Polygon *>::add
$LN28@workOnItem:

; 270  : 		}
; 271  : 	}

	jmp	$LN42@workOnItem
$LN41@workOnItem:

; 272  : 
; 273  : 	if ((left && !right) || (!left && right)) {

	cmp	DWORD PTR _left$[ebp], 0
	je	SHORT $LN14@workOnItem
	cmp	DWORD PTR _right$[ebp], 0
	je	SHORT $LN15@workOnItem
$LN14@workOnItem:
	cmp	DWORD PTR _left$[ebp], 0
	jne	$LN8@workOnItem
	cmp	DWORD PTR _right$[ebp], 0
	je	$LN8@workOnItem
$LN15@workOnItem:

; 274  : 		if (left && !right) {

	cmp	DWORD PTR _left$[ebp], 0
	je	$LN13@workOnItem
	cmp	DWORD PTR _right$[ebp], 0
	jne	$LN13@workOnItem

; 275  : 			right = new WorkingItem();

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8242[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T8242[ebp], 0
	je	SHORT $LN67@workOnItem
	mov	ecx, DWORD PTR $T8242[ebp]
	call	??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ
	mov	DWORD PTR tv512[ebp], eax
	jmp	SHORT $LN68@workOnItem
$LN67@workOnItem:
	mov	DWORD PTR tv512[ebp], 0
$LN68@workOnItem:
	mov	eax, DWORD PTR tv512[ebp]
	mov	DWORD PTR $T8241[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T8241[ebp]
	mov	DWORD PTR _right$[ebp], ecx

; 276  : 			right->aabb = left->aabb;

	mov	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR _right$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+20], edx

; 277  : 			int nbPols = left->pols.size();

	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, 32					; 00000020H
	call	?size@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::Polygon *>::size
	mov	DWORD PTR _nbPols$7730[ebp], eax

; 278  : 			int le = nbPols / 2;

	mov	eax, DWORD PTR _nbPols$7730[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _le$7731[ebp], eax

; 279  : 			int start = nbPols - le;

	mov	eax, DWORD PTR _nbPols$7730[ebp]
	sub	eax, DWORD PTR _le$7731[ebp]
	mov	DWORD PTR _start$7732[ebp], eax

; 280  : 			for (i = start; i < nbPols; i++) {

	mov	ecx, DWORD PTR _start$7732[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN12@workOnItem
$LN11@workOnItem:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN12@workOnItem:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nbPols$7730[ebp]
	jge	SHORT $LN10@workOnItem

; 281  : 				Polygon *p = left->pols[i];

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEAAPAVPolygon@1@H@Z ; ozcollide::Vector<ozcollide::Polygon *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _p$7736[ebp], edx

; 282  : 				right->pols.add(p);

	lea	eax, DWORD PTR _p$7736[ebp]
	push	eax
	mov	ecx, DWORD PTR _right$[ebp]
	add	ecx, 32					; 00000020H
	call	?add@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXABQAVPolygon@2@@Z ; ozcollide::Vector<ozcollide::Polygon *>::add

; 283  : 			}

	jmp	SHORT $LN11@workOnItem
$LN10@workOnItem:

; 284  : 			left->pols.grow(-le);

	mov	ecx, DWORD PTR _le$7731[ebp]
	neg	ecx
	push	ecx
	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, 32					; 00000020H
	call	?grow@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::Polygon *>::grow
	jmp	$LN8@workOnItem
$LN13@workOnItem:

; 285  : 		}
; 286  : 		else if (!left && right) {

	cmp	DWORD PTR _left$[ebp], 0
	jne	$LN8@workOnItem
	cmp	DWORD PTR _right$[ebp], 0
	je	$LN8@workOnItem

; 287  : 			left = new WorkingItem();

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8246[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T8246[ebp], 0
	je	SHORT $LN69@workOnItem
	mov	ecx, DWORD PTR $T8246[ebp]
	call	??0WorkingItem@AABBTreePolyBuilder@ozcollide@@QAE@XZ
	mov	DWORD PTR tv540[ebp], eax
	jmp	SHORT $LN70@workOnItem
$LN69@workOnItem:
	mov	DWORD PTR tv540[ebp], 0
$LN70@workOnItem:
	mov	edx, DWORD PTR tv540[ebp]
	mov	DWORD PTR $T8245[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T8245[ebp]
	mov	DWORD PTR _left$[ebp], eax

; 288  : 			left->aabb = right->aabb;

	mov	ecx, DWORD PTR _right$[ebp]
	mov	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], ecx

; 289  : 			int nbPols = right->pols.size();

	mov	ecx, DWORD PTR _right$[ebp]
	add	ecx, 32					; 00000020H
	call	?size@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::Polygon *>::size
	mov	DWORD PTR _nbPols$7743[ebp], eax

; 290  : 			int le = nbPols / 2;

	mov	eax, DWORD PTR _nbPols$7743[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _le$7744[ebp], eax

; 291  : 			int start = nbPols - le;

	mov	edx, DWORD PTR _nbPols$7743[ebp]
	sub	edx, DWORD PTR _le$7744[ebp]
	mov	DWORD PTR _start$7745[ebp], edx

; 292  : 			for (i = start; i < nbPols; i++) {

	mov	eax, DWORD PTR _start$7745[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN7@workOnItem
$LN6@workOnItem:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN7@workOnItem:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _nbPols$7743[ebp]
	jge	SHORT $LN5@workOnItem

; 293  : 				Polygon *p = right->pols[i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _right$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEAAPAVPolygon@1@H@Z ; ozcollide::Vector<ozcollide::Polygon *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$7749[ebp], ecx

; 294  : 				left->pols.add(p);

	lea	edx, DWORD PTR _p$7749[ebp]
	push	edx
	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, 32					; 00000020H
	call	?add@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXABQAVPolygon@2@@Z ; ozcollide::Vector<ozcollide::Polygon *>::add

; 295  : 			}

	jmp	SHORT $LN6@workOnItem
$LN5@workOnItem:

; 296  : 			right->pols.grow(-le);

	mov	eax, DWORD PTR _le$7744[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _right$[ebp]
	add	ecx, 32					; 00000020H
	call	?grow@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::Polygon *>::grow
$LN8@workOnItem:

; 297  : 		}
; 298  : 	}
; 299  : 
; 300  : 	if (left) {

	cmp	DWORD PTR _left$[ebp], 0
	je	SHORT $LN4@workOnItem

; 301  : 		_item.left = items_.size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::size
	mov	ecx, DWORD PTR __item$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 302  : 		items_.add(left);

	lea	edx, DWORD PTR _left$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?add@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXABQAVWorkingItem@AABBTreePolyBuilder@2@@Z ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::add

; 303  : 	}
; 304  : 	else

	jmp	SHORT $LN3@workOnItem
$LN4@workOnItem:

; 305  : 		_item.left = -1;

	mov	eax, DWORD PTR __item$[ebp]
	mov	DWORD PTR [eax+24], -1
$LN3@workOnItem:

; 306  : 
; 307  : 	if (right) {

	cmp	DWORD PTR _right$[ebp], 0
	je	SHORT $LN2@workOnItem

; 308  : 		_item.right = items_.size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::size
	mov	ecx, DWORD PTR __item$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 309  : 		items_.add(right);

	lea	edx, DWORD PTR _right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?add@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXABQAVWorkingItem@AABBTreePolyBuilder@2@@Z ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::add

; 310  : 	}
; 311  : 	else

	jmp	SHORT $LN1@workOnItem
$LN2@workOnItem:

; 312  : 		_item.right = -1;

	mov	eax, DWORD PTR __item$[ebp]
	mov	DWORD PTR [eax+28], -1
$LN1@workOnItem:
$LN61@workOnItem:

; 313  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?workOnItem@AABBTreePolyBuilder@ozcollide@@AAEXAAVWorkingItem@12@H@Z$0:
	mov	eax, DWORD PTR $T8222[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?workOnItem@AABBTreePolyBuilder@ozcollide@@AAEXAAVWorkingItem@12@H@Z$1:
	mov	eax, DWORD PTR $T8232[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?workOnItem@AABBTreePolyBuilder@ozcollide@@AAEXAAVWorkingItem@12@H@Z$2:
	mov	eax, DWORD PTR $T8242[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?workOnItem@AABBTreePolyBuilder@ozcollide@@AAEXAAVWorkingItem@12@H@Z$3:
	mov	eax, DWORD PTR $T8246[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?workOnItem@AABBTreePolyBuilder@ozcollide@@AAEXAAVWorkingItem@12@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-464]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?workOnItem@AABBTreePolyBuilder@ozcollide@@AAEXAAVWorkingItem@12@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?workOnItem@AABBTreePolyBuilder@ozcollide@@AAEXAAVWorkingItem@12@H@Z ENDP ; ozcollide::AABBTreePolyBuilder::workOnItem
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
;	COMDAT ??0Vec3f@ozcollide@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0Vec3f@ozcollide@@QAE@MMM@Z PROC			; ozcollide::Vec3f::Vec3f, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __x$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __y$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __z$[ebp]
	fstp	DWORD PTR [edx+8]

; 43   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vec3f@ozcollide@@QAE@MMM@Z ENDP			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??GVec3f@ozcollide@@QBE?AV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??GVec3f@ozcollide@@QBE?AV01@XZ PROC			; ozcollide::Vec3f::operator-, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 		return Vec3f(-x, -y, -z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 55   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??GVec3f@ozcollide@@QBE?AV01@XZ ENDP			; ozcollide::Vec3f::operator-
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv89 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__v$ = 12						; size = 4
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z PROC		; ozcollide::Vec3f::operator-, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		return Vec3f(x - _v.x, y - _v.y, z - _v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 96   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z ENDP		; ozcollide::Vec3f::operator-
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv89 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__v$ = 12						; size = 4
??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z PROC		; ozcollide::Vec3f::operator+, COMDAT
; _this$ = ecx

; 99   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 		return Vec3f(x + _v.x, y + _v.y, z + _v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __v$[ebp]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR __v$[ebp]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 101  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z ENDP		; ozcollide::Vec3f::operator+
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??KVec3f@ozcollide@@QBE?AV01@M@Z
_TEXT	SEGMENT
tv92 = -20						; size = 4
tv90 = -16						; size = 4
tv88 = -12						; size = 4
_this$ = -8						; size = 4
_m$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__d$ = 12						; size = 4
??KVec3f@ozcollide@@QBE?AV01@M@Z PROC			; ozcollide::Vec3f::operator/, COMDAT
; _this$ = ecx

; 119  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		float m = 1.0f / _d;

	fld	DWORD PTR __d$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _m$[ebp]

; 121  : 		return Vec3f(x * m, y * m, z * m);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _m$[ebp]
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR _m$[ebp]
	fstp	DWORD PTR tv90[ebp]
	fld	DWORD PTR tv90[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR _m$[ebp]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 122  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??KVec3f@ozcollide@@QBE?AV01@M@Z ENDP			; ozcollide::Vec3f::operator/
_TEXT	ENDS
PUBLIC	?positive@Vec3f@ozcollide@@QAEXXZ		; ozcollide::Vec3f::positive
PUBLIC	??DVec3f@ozcollide@@QBE?AV01@M@Z		; ozcollide::Vec3f::operator*
PUBLIC	__real@3f000000
;	COMDAT __real@3f000000
; File i:\svnroot\client\sdk\ozcollide\box.h
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T8280 = -48						; size = 12
$T8279 = -36						; size = 12
$T8278 = -24						; size = 12
$T8277 = -12						; size = 12
__pt0$ = 8						; size = 4
__pt1$ = 12						; size = 4
?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z PROC	; ozcollide::Box::setFromPoints, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		center = (_pt1 + _pt0) * 0.5f;

	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T8278[ebp]
	push	eax
	mov	ecx, DWORD PTR __pt0$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T8277[ebp]
	push	edx
	mov	ecx, DWORD PTR __pt1$[ebp]
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+
	mov	ecx, eax
	call	??DVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator*
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 60   : 		extent = (_pt1 - _pt0) * 0.5f;

	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T8280[ebp]
	push	ecx
	mov	edx, DWORD PTR __pt0$[ebp]
	push	edx
	lea	eax, DWORD PTR $T8279[ebp]
	push	eax
	mov	ecx, DWORD PTR __pt1$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-
	mov	ecx, eax
	call	??DVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator*
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 61   : 		extent.positive();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?positive@Vec3f@ozcollide@@QAEXXZ	; ozcollide::Vec3f::positive

; 62   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?setFromPoints@Box@ozcollide@@QAEXABVVec3f@2@0@Z ENDP	; ozcollide::Box::setFromPoints
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
_TEXT	ENDS
;	COMDAT ??DVec3f@ozcollide@@QBE?AV01@M@Z
_TEXT	SEGMENT
tv87 = -16						; size = 4
tv85 = -12						; size = 4
tv83 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__m$ = 12						; size = 4
??DVec3f@ozcollide@@QBE?AV01@M@Z PROC			; ozcollide::Vec3f::operator*, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 		return Vec3f(x * _m, y * _m, z * _m);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR __m$[ebp]
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR __m$[ebp]
	fstp	DWORD PTR tv85[ebp]
	fld	DWORD PTR tv85[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR __m$[ebp]
	fstp	DWORD PTR tv87[ebp]
	fld	DWORD PTR tv87[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 111  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??DVec3f@ozcollide@@QBE?AV01@M@Z ENDP			; ozcollide::Vec3f::operator*
_TEXT	ENDS
PUBLIC	__real@0000000000000000
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?positive@Vec3f@ozcollide@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?positive@Vec3f@ozcollide@@QAEXXZ PROC			; ozcollide::Vec3f::positive, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 180  : 		if (x < 0) x = -x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@positive
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fchs
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]
$LN3@positive:

; 181  : 		if (y < 0) y = -y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@positive
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fchs
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]
$LN2@positive:

; 182  : 		if (z < 0) z = -z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@positive
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fchs
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]
$LN1@positive:

; 183  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?positive@Vec3f@ozcollide@@QAEXXZ ENDP			; ozcollide::Vec3f::positive
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\polygon.h
_TEXT	ENDS
;	COMDAT ?getNbIndices@Polygon@ozcollide@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNbIndices@Polygon@ozcollide@@QBEHXZ PROC		; ozcollide::Polygon::getNbIndices, COMDAT
; _this$ = ecx

; 56   : 	ozinline int getNbIndices() const { return nbIndices_ & 0xff; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	and	eax, 255				; 000000ffH
	mov	esp, ebp
	pop	ebp
	ret	0
?getNbIndices@Polygon@ozcollide@@QBEHXZ ENDP		; ozcollide::Polygon::getNbIndices
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?getIndex@Polygon@ozcollide@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getIndex@Polygon@ozcollide@@QBEHH@Z PROC		; ozcollide::Polygon::getIndex, COMDAT
; _this$ = ecx

; 58   : 	ozinline int getIndex(int i) const { return indices_[i]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+4]
	mov	esp, ebp
	pop	ebp
	ret	4
?getIndex@Polygon@ozcollide@@QBEHH@Z ENDP		; ozcollide::Polygon::getIndex
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	?takeMinMax@AABBTreePolyBuilder@ozcollide@@AAEXABVPolygon@2@HAAM1@Z ; ozcollide::AABBTreePolyBuilder::takeMinMax
;	COMDAT __real@00000000
; File i:\svnroot\client\sdk\ozcollide\aabbtreepoly_builder.cpp
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
_this$ = -24						; size = 4
_index$7768 = -20					; size = 4
_pt$7769 = -16						; size = 4
_m$ = -12						; size = 4
_nbVerts$ = -8						; size = 4
_i$ = -4						; size = 4
__pol$ = 8						; size = 4
__axis$ = 12						; size = 4
__middle$ = 16						; size = 4
__min$ = 20						; size = 4
__max$ = 24						; size = 4
?classifyPol@AABBTreePolyBuilder@ozcollide@@AAEHABVPolygon@2@HMAAM1@Z PROC ; ozcollide::AABBTreePolyBuilder::classifyPol
; _this$ = ecx

; 316  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 317  : 	int i;
; 318  : 
; 319  : 	takeMinMax(_pol, _axis, _min, _max);

	mov	eax, DWORD PTR __max$[ebp]
	push	eax
	mov	ecx, DWORD PTR __min$[ebp]
	push	ecx
	mov	edx, DWORD PTR __axis$[ebp]
	push	edx
	mov	eax, DWORD PTR __pol$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?takeMinMax@AABBTreePolyBuilder@ozcollide@@AAEXABVPolygon@2@HAAM1@Z ; ozcollide::AABBTreePolyBuilder::takeMinMax

; 320  : 	int nbVerts = _pol.getNbIndices();

	mov	ecx, DWORD PTR __pol$[ebp]
	call	?getNbIndices@Polygon@ozcollide@@QBEHXZ	; ozcollide::Polygon::getNbIndices
	mov	DWORD PTR _nbVerts$[ebp], eax

; 321  : 	float m = 0.0f;

	fldz
	fstp	DWORD PTR _m$[ebp]

; 322  : 	for (i = 0; i < nbVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@classifyPo
$LN8@classifyPo:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN9@classifyPo:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _nbVerts$[ebp]
	jge	SHORT $LN7@classifyPo

; 323  : 		int index = _pol.getIndex(i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR __pol$[ebp]
	call	?getIndex@Polygon@ozcollide@@QBEHH@Z	; ozcollide::Polygon::getIndex
	mov	DWORD PTR _index$7768[ebp], eax

; 324  : 		Vec3f &pt = tree_->points_[index];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _index$7768[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _pt$7769[ebp], eax

; 325  : 		if (_axis == 0)

	cmp	DWORD PTR __axis$[ebp], 0
	jne	SHORT $LN6@classifyPo

; 326  : 			m += pt.x;

	fld	DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _pt$7769[ebp]
	fadd	DWORD PTR [ecx]
	fstp	DWORD PTR _m$[ebp]
	jmp	SHORT $LN2@classifyPo
$LN6@classifyPo:

; 327  : 		else if (_axis == 1)

	cmp	DWORD PTR __axis$[ebp], 1
	jne	SHORT $LN4@classifyPo

; 328  : 			m += pt.y;

	fld	DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _pt$7769[ebp]
	fadd	DWORD PTR [edx+4]
	fstp	DWORD PTR _m$[ebp]
	jmp	SHORT $LN2@classifyPo
$LN4@classifyPo:

; 329  : 		else if (_axis == 2)

	cmp	DWORD PTR __axis$[ebp], 2
	jne	SHORT $LN2@classifyPo

; 330  : 			m += pt.z;

	fld	DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _pt$7769[ebp]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _m$[ebp]
$LN2@classifyPo:

; 331  : 	}

	jmp	SHORT $LN8@classifyPo
$LN7@classifyPo:

; 332  : 	m /= nbVerts;

	fild	DWORD PTR _nbVerts$[ebp]
	fdivr	DWORD PTR _m$[ebp]
	fstp	DWORD PTR _m$[ebp]

; 333  : 	if (m < _middle)

	fld	DWORD PTR _m$[ebp]
	fld	DWORD PTR __middle$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@classifyPo

; 334  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN10@classifyPo
$LN1@classifyPo:

; 335  : 	return 1;

	mov	eax, 1
$LN10@classifyPo:

; 336  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?classifyPol@AABBTreePolyBuilder@ozcollide@@AAEHABVPolygon@2@HMAAM1@Z ENDP ; ozcollide::AABBTreePolyBuilder::classifyPol
_TEXT	ENDS
PUBLIC	__real@ff7fffff
;	COMDAT __real@ff7fffff
CONST	SEGMENT
__real@ff7fffff DD 0ff7fffffr			; -3.40282e+038
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
_this$ = -20						; size = 4
_index$7788 = -16					; size = 4
_pt$7789 = -12						; size = 4
_nbVerts$ = -8						; size = 4
_i$ = -4						; size = 4
__pol$ = 8						; size = 4
__axis$ = 12						; size = 4
__min$ = 16						; size = 4
__max$ = 20						; size = 4
?takeMinMax@AABBTreePolyBuilder@ozcollide@@AAEXABVPolygon@2@HAAM1@Z PROC ; ozcollide::AABBTreePolyBuilder::takeMinMax
; _this$ = ecx

; 339  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 340  : 	int i;
; 341  : 	int nbVerts = _pol.getNbIndices();

	mov	ecx, DWORD PTR __pol$[ebp]
	call	?getNbIndices@Polygon@ozcollide@@QBEHXZ	; ozcollide::Polygon::getNbIndices
	mov	DWORD PTR _nbVerts$[ebp], eax

; 342  : 	_min = FLT_MAX;

	mov	eax, DWORD PTR __min$[ebp]
	fld	DWORD PTR __real@7f7fffff
	fstp	DWORD PTR [eax]

; 343  : 	_max = -FLT_MAX;

	mov	ecx, DWORD PTR __max$[ebp]
	fld	DWORD PTR __real@ff7fffff
	fstp	DWORD PTR [ecx]

; 344  : 	for (i = 0; i < nbVerts; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@takeMinMax
$LN12@takeMinMax:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN13@takeMinMax:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nbVerts$[ebp]
	jge	$LN11@takeMinMax

; 345  : 		int index = _pol.getIndex(i);

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __pol$[ebp]
	call	?getIndex@Polygon@ozcollide@@QBEHH@Z	; ozcollide::Polygon::getIndex
	mov	DWORD PTR _index$7788[ebp], eax

; 346  : 		Vec3f &pt = tree_->points_[index];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _index$7788[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _pt$7789[ebp], ecx

; 347  : 
; 348  : 		if (_axis == 0 && pt.x < _min)

	cmp	DWORD PTR __axis$[ebp], 0
	jne	SHORT $LN10@takeMinMax
	mov	edx, DWORD PTR _pt$7789[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR __min$[ebp]
	fld	DWORD PTR [eax]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN10@takeMinMax

; 349  : 			_min = pt.x;

	mov	ecx, DWORD PTR __min$[ebp]
	mov	edx, DWORD PTR _pt$7789[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [ecx]
	jmp	SHORT $LN6@takeMinMax
$LN10@takeMinMax:

; 350  : 		else if (_axis == 1 && pt.y < _min)

	cmp	DWORD PTR __axis$[ebp], 1
	jne	SHORT $LN8@takeMinMax
	mov	eax, DWORD PTR _pt$7789[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR __min$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN8@takeMinMax

; 351  : 			_min = pt.y;

	mov	edx, DWORD PTR __min$[ebp]
	mov	eax, DWORD PTR _pt$7789[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx]
	jmp	SHORT $LN6@takeMinMax
$LN8@takeMinMax:

; 352  : 		else if (_axis == 2 && pt.z < _min)

	cmp	DWORD PTR __axis$[ebp], 2
	jne	SHORT $LN6@takeMinMax
	mov	ecx, DWORD PTR _pt$7789[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR __min$[ebp]
	fld	DWORD PTR [edx]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN6@takeMinMax

; 353  : 			_min = pt.z;

	mov	eax, DWORD PTR __min$[ebp]
	mov	ecx, DWORD PTR _pt$7789[ebp]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax]
$LN6@takeMinMax:

; 354  : 
; 355  : 		if (_axis == 0 && pt.x > _max)

	cmp	DWORD PTR __axis$[ebp], 0
	jne	SHORT $LN5@takeMinMax
	mov	edx, DWORD PTR _pt$7789[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR __max$[ebp]
	fld	DWORD PTR [eax]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN5@takeMinMax

; 356  : 			_max = pt.x;

	mov	ecx, DWORD PTR __max$[ebp]
	mov	edx, DWORD PTR _pt$7789[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [ecx]
	jmp	SHORT $LN1@takeMinMax
$LN5@takeMinMax:

; 357  : 		else if (_axis == 1 && pt.y > _max)

	cmp	DWORD PTR __axis$[ebp], 1
	jne	SHORT $LN3@takeMinMax
	mov	eax, DWORD PTR _pt$7789[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR __max$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@takeMinMax

; 358  : 			_max = pt.y;

	mov	edx, DWORD PTR __max$[ebp]
	mov	eax, DWORD PTR _pt$7789[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx]
	jmp	SHORT $LN1@takeMinMax
$LN3@takeMinMax:

; 359  : 		else if (_axis == 2 && pt.z > _max)

	cmp	DWORD PTR __axis$[ebp], 2
	jne	SHORT $LN1@takeMinMax
	mov	ecx, DWORD PTR _pt$7789[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR __max$[ebp]
	fld	DWORD PTR [edx]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@takeMinMax

; 360  : 			_max = pt.z;

	mov	eax, DWORD PTR __max$[ebp]
	mov	ecx, DWORD PTR _pt$7789[ebp]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax]
$LN1@takeMinMax:

; 361  : 	}

	jmp	$LN12@takeMinMax
$LN11@takeMinMax:

; 362  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?takeMinMax@AABBTreePolyBuilder@ozcollide@@AAEXABVPolygon@2@HAAM1@Z ENDP ; ozcollide::AABBTreePolyBuilder::takeMinMax
; Function compile flags: /Odtp
tv230 = -64						; size = 4
_this$ = -60						; size = 4
_index$7841 = -56					; size = 4
_nbVerts$7837 = -52					; size = 4
_pol$7836 = -48						; size = 4
_index$7830 = -44					; size = 4
_nbVerts$7826 = -40					; size = 4
_pol$7825 = -36						; size = 4
_index$7819 = -32					; size = 4
_nbVerts$7815 = -28					; size = 4
_pol$7814 = -24						; size = 4
_j$ = -20						; size = 4
_nb$ = -16						; size = 4
_m$ = -12						; size = 4
_i$ = -8						; size = 4
_nbPols$ = -4						; size = 4
__item$ = 8						; size = 4
__axis$ = 12						; size = 4
?calculAvgPoint@AABBTreePolyBuilder@ozcollide@@AAEMAAVWorkingItem@12@H@Z PROC ; ozcollide::AABBTreePolyBuilder::calculAvgPoint
; _this$ = ecx

; 365  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 366  : 	int i, j;
; 367  : 
; 368  : 	int nb = 0;

	mov	DWORD PTR _nb$[ebp], 0

; 369  : 	int nbPols = _item.pols.size();

	mov	ecx, DWORD PTR __item$[ebp]
	add	ecx, 32					; 00000020H
	call	?size@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEHXZ ; ozcollide::Vector<ozcollide::Polygon *>::size
	mov	DWORD PTR _nbPols$[ebp], eax

; 370  : 
; 371  : 	float m = 0;

	fldz
	fstp	DWORD PTR _m$[ebp]

; 372  : 	if (_axis == 0) {

	cmp	DWORD PTR __axis$[ebp], 0
	jne	$LN23@calculAvgP

; 373  : 		for (i = 0; i < nbPols; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN22@calculAvgP
$LN21@calculAvgP:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN22@calculAvgP:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _nbPols$[ebp]
	jge	SHORT $LN20@calculAvgP

; 374  : 			Polygon &pol = *_item.pols[i];

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR __item$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEAAPAVPolygon@1@H@Z ; ozcollide::Vector<ozcollide::Polygon *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pol$7814[ebp], eax

; 375  : 			int nbVerts = pol.getNbIndices();

	mov	ecx, DWORD PTR _pol$7814[ebp]
	call	?getNbIndices@Polygon@ozcollide@@QBEHXZ	; ozcollide::Polygon::getNbIndices
	mov	DWORD PTR _nbVerts$7815[ebp], eax

; 376  : 			nb += nbVerts;

	mov	ecx, DWORD PTR _nb$[ebp]
	add	ecx, DWORD PTR _nbVerts$7815[ebp]
	mov	DWORD PTR _nb$[ebp], ecx

; 377  : 			for (j = 0; j < nbVerts; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN19@calculAvgP
$LN18@calculAvgP:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN19@calculAvgP:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _nbVerts$7815[ebp]
	jge	SHORT $LN17@calculAvgP

; 378  : 				int index = pol.getIndex(j);

	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pol$7814[ebp]
	call	?getIndex@Polygon@ozcollide@@QBEHH@Z	; ozcollide::Polygon::getIndex
	mov	DWORD PTR _index$7819[ebp], eax

; 379  : 				m += tree_->points_[index].x;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _index$7819[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax+44]
	fld	DWORD PTR _m$[ebp]
	fadd	DWORD PTR [edx+ecx]
	fstp	DWORD PTR _m$[ebp]

; 380  : 			}

	jmp	SHORT $LN18@calculAvgP
$LN17@calculAvgP:

; 381  : 			
; 382  : 		}

	jmp	SHORT $LN21@calculAvgP
$LN20@calculAvgP:

; 383  : 	}
; 384  : 	else if (_axis == 1) {

	jmp	$LN4@calculAvgP
$LN23@calculAvgP:
	cmp	DWORD PTR __axis$[ebp], 1
	jne	$LN15@calculAvgP

; 385  : 		for (i = 0; i < nbPols; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@calculAvgP
$LN13@calculAvgP:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN14@calculAvgP:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _nbPols$[ebp]
	jge	SHORT $LN12@calculAvgP

; 386  : 			Polygon &pol = *_item.pols[i];

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR __item$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEAAPAVPolygon@1@H@Z ; ozcollide::Vector<ozcollide::Polygon *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pol$7825[ebp], eax

; 387  : 			int nbVerts = pol.getNbIndices();

	mov	ecx, DWORD PTR _pol$7825[ebp]
	call	?getNbIndices@Polygon@ozcollide@@QBEHXZ	; ozcollide::Polygon::getNbIndices
	mov	DWORD PTR _nbVerts$7826[ebp], eax

; 388  : 			nb += nbVerts;

	mov	ecx, DWORD PTR _nb$[ebp]
	add	ecx, DWORD PTR _nbVerts$7826[ebp]
	mov	DWORD PTR _nb$[ebp], ecx

; 389  : 			for (j = 0; j < nbVerts; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN11@calculAvgP
$LN10@calculAvgP:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN11@calculAvgP:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _nbVerts$7826[ebp]
	jge	SHORT $LN9@calculAvgP

; 390  : 				int index = pol.getIndex(j);

	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pol$7825[ebp]
	call	?getIndex@Polygon@ozcollide@@QBEHH@Z	; ozcollide::Polygon::getIndex
	mov	DWORD PTR _index$7830[ebp], eax

; 391  : 				m += tree_->points_[index].y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _index$7830[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax+44]
	fld	DWORD PTR _m$[ebp]
	fadd	DWORD PTR [edx+ecx+4]
	fstp	DWORD PTR _m$[ebp]

; 392  : 			}

	jmp	SHORT $LN10@calculAvgP
$LN9@calculAvgP:

; 393  : 			
; 394  : 		}

	jmp	SHORT $LN13@calculAvgP
$LN12@calculAvgP:

; 395  : 	}
; 396  : 	else if (_axis == 2) {

	jmp	$LN4@calculAvgP
$LN15@calculAvgP:
	cmp	DWORD PTR __axis$[ebp], 2
	jne	$LN4@calculAvgP

; 397  : 		for (i = 0; i < nbPols; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@calculAvgP
$LN5@calculAvgP:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@calculAvgP:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _nbPols$[ebp]
	jge	SHORT $LN4@calculAvgP

; 398  : 			Polygon &pol = *_item.pols[i];

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR __item$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEAAPAVPolygon@1@H@Z ; ozcollide::Vector<ozcollide::Polygon *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pol$7836[ebp], eax

; 399  : 			int nbVerts = pol.getNbIndices();

	mov	ecx, DWORD PTR _pol$7836[ebp]
	call	?getNbIndices@Polygon@ozcollide@@QBEHXZ	; ozcollide::Polygon::getNbIndices
	mov	DWORD PTR _nbVerts$7837[ebp], eax

; 400  : 			nb += nbVerts;

	mov	ecx, DWORD PTR _nb$[ebp]
	add	ecx, DWORD PTR _nbVerts$7837[ebp]
	mov	DWORD PTR _nb$[ebp], ecx

; 401  : 			for (j = 0; j < nbVerts; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@calculAvgP
$LN2@calculAvgP:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN3@calculAvgP:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _nbVerts$7837[ebp]
	jge	SHORT $LN1@calculAvgP

; 402  : 				int index = pol.getIndex(j);

	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pol$7836[ebp]
	call	?getIndex@Polygon@ozcollide@@QBEHH@Z	; ozcollide::Polygon::getIndex
	mov	DWORD PTR _index$7841[ebp], eax

; 403  : 				m += tree_->points_[index].z;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _index$7841[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax+44]
	fld	DWORD PTR _m$[ebp]
	fadd	DWORD PTR [edx+ecx+8]
	fstp	DWORD PTR _m$[ebp]

; 404  : 			}

	jmp	SHORT $LN2@calculAvgP
$LN1@calculAvgP:

; 405  : 			
; 406  : 		}

	jmp	SHORT $LN5@calculAvgP
$LN4@calculAvgP:

; 407  : 	}
; 408  : 	return m / float(nb);

	fild	DWORD PTR _nb$[ebp]
	fdivr	DWORD PTR _m$[ebp]
	fstp	DWORD PTR tv230[ebp]
	fld	DWORD PTR tv230[ebp]

; 409  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?calculAvgPoint@AABBTreePolyBuilder@ozcollide@@AAEMAAVWorkingItem@12@H@Z ENDP ; ozcollide::AABBTreePolyBuilder::calculAvgPoint
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector@4:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector@4
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector@4
$LN3@vector@4:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vector.h
_TEXT	ENDS
;	COMDAT ??0?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAE@XZ PROC ; ozcollide::Vector<ozcollide::Polygon *>::Vector<ozcollide::Polygon *>, COMDAT
; _this$ = ecx

; 35   : 	Vector()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 	{
; 37   : 		mem_ = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 38   : 		size_ = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 39   : 		capacity_ = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 40   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAE@XZ ENDP ; ozcollide::Vector<ozcollide::Polygon *>::Vector<ozcollide::Polygon *>
_TEXT	ENDS
PUBLIC	?clear@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXXZ ; ozcollide::Vector<ozcollide::Polygon *>::clear
; Function compile flags: /Odtp
;	COMDAT ??1?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAE@XZ PROC ; ozcollide::Vector<ozcollide::Polygon *>::~Vector<ozcollide::Polygon *>, COMDAT
; _this$ = ecx

; 43   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 		clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXXZ ; ozcollide::Vector<ozcollide::Polygon *>::clear

; 45   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAE@XZ ENDP ; ozcollide::Vector<ozcollide::Polygon *>::~Vector<ozcollide::Polygon *>
_TEXT	ENDS
PUBLIC	?resize@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::Polygon *>::resize
; Function compile flags: /Odtp
;	COMDAT ?add@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXABQAVPolygon@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__t$ = 8						; size = 4
?add@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXABQAVPolygon@2@@Z PROC ; ozcollide::Vector<ozcollide::Polygon *>::add, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 		if (size_ < capacity_) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN1@add

; 50   : 			mem_[size_] = _t;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR __t$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], edx

; 51   : 			size_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 52   : 			return;

	jmp	SHORT $LN2@add
$LN1@add:

; 53   : 		}
; 54   : 
; 55   : 		resize(size_ + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::Polygon *>::resize

; 56   : 		mem_[size_ - 1] = _t;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __t$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+eax*4-4], ecx
$LN2@add:

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?add@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXABQAVPolygon@2@@Z ENDP ; ozcollide::Vector<ozcollide::Polygon *>::add
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?grow@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__size$ = 8						; size = 4
?grow@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXH@Z PROC ; ozcollide::Vector<ozcollide::Polygon *>::grow, COMDAT
; _this$ = ecx

; 140  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 141  : 		resize(size_ + _size);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR __size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::Polygon *>::resize

; 142  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?grow@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXH@Z ENDP ; ozcollide::Vector<ozcollide::Polygon *>::grow
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEHXZ PROC ; ozcollide::Vector<ozcollide::Polygon *>::size, COMDAT
; _this$ = ecx

; 160  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 		return size_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 162  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEHXZ ENDP ; ozcollide::Vector<ozcollide::Polygon *>::size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEAAPAVPolygon@1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEAAPAVPolygon@1@H@Z PROC ; ozcollide::Vector<ozcollide::Polygon *>::operator[], COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 199  : 		return mem_[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 200  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QBEAAPAVPolygon@1@H@Z ENDP ; ozcollide::Vector<ozcollide::Polygon *>::operator[]
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAE@XZ PROC ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>, COMDAT
; _this$ = ecx

; 35   : 	Vector()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 	{
; 37   : 		mem_ = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 38   : 		size_ = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 39   : 		capacity_ = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 40   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAE@XZ ENDP ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAE@XZ PROC ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::~Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>, COMDAT
; _this$ = ecx

; 43   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 		clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXXZ ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::clear

; 45   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAE@XZ ENDP ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::~Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>
_TEXT	ENDS
PUBLIC	?resize@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::resize
; Function compile flags: /Odtp
;	COMDAT ?add@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXABQAVWorkingItem@AABBTreePolyBuilder@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__t$ = 8						; size = 4
?add@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXABQAVWorkingItem@AABBTreePolyBuilder@2@@Z PROC ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::add, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 		if (size_ < capacity_) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN1@add@2

; 50   : 			mem_[size_] = _t;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR __t$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], edx

; 51   : 			size_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 52   : 			return;

	jmp	SHORT $LN2@add@2
$LN1@add@2:

; 53   : 		}
; 54   : 
; 55   : 		resize(size_ + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::resize

; 56   : 		mem_[size_ - 1] = _t;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __t$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+eax*4-4], ecx
$LN2@add@2:

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?add@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXABQAVWorkingItem@AABBTreePolyBuilder@2@@Z ENDP ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::add
_TEXT	ENDS
EXTRN	__imp__free:PROC
; Function compile flags: /Odtp
;	COMDAT ?clear@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXXZ PROC ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::clear, COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 		if (mem_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@clear

; 153  : 			free(mem_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
$LN1@clear:

; 154  : 		mem_ = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 155  : 		size_ = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 156  : 		capacity_ = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 157  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXXZ ENDP ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::clear
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEHXZ PROC ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::size, COMDAT
; _this$ = ecx

; 160  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 		return size_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 162  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEHXZ ENDP ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEAAPAVWorkingItem@AABBTreePolyBuilder@1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEAAPAVWorkingItem@AABBTreePolyBuilder@1@H@Z PROC ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::operator[], COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 199  : 		return mem_[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 200  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QBEAAPAVWorkingItem@AABBTreePolyBuilder@1@H@Z ENDP ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::operator[]
_TEXT	ENDS
PUBLIC	?reserve@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::Polygon *>::reserve
; Function compile flags: /Odtp
;	COMDAT ?resize@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__size$ = 8						; size = 4
?resize@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXH@Z PROC ; ozcollide::Vector<ozcollide::Polygon *>::resize, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		if (_size > capacity_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __size$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $LN1@resize

; 124  : 			reserve(_size * 2);

	mov	edx, DWORD PTR __size$[ebp]
	shl	edx, 1
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::Polygon *>::reserve
$LN1@resize:

; 125  : 		size_ = _size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __size$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 126  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXH@Z ENDP ; ozcollide::Vector<ozcollide::Polygon *>::resize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?clear@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXXZ PROC ; ozcollide::Vector<ozcollide::Polygon *>::clear, COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 		if (mem_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@clear@2

; 153  : 			free(mem_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
$LN1@clear@2:

; 154  : 		mem_ = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 155  : 		size_ = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 156  : 		capacity_ = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 157  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXXZ ENDP ; ozcollide::Vector<ozcollide::Polygon *>::clear
_TEXT	ENDS
PUBLIC	?reserve@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::reserve
; Function compile flags: /Odtp
;	COMDAT ?resize@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__size$ = 8						; size = 4
?resize@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXH@Z PROC ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::resize, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		if (_size > capacity_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __size$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $LN1@resize@2

; 124  : 			reserve(_size * 2);

	mov	edx, DWORD PTR __size$[ebp]
	shl	edx, 1
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXH@Z ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::reserve
$LN1@resize@2:

; 125  : 		size_ = _size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __size$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 126  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXH@Z ENDP ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::resize
_TEXT	ENDS
EXTRN	_memcpy:PROC
EXTRN	__imp__malloc:PROC
; Function compile flags: /Odtp
;	COMDAT ?reserve@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXH@Z
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
_toCopy$ = -8						; size = 4
_old$ = -4						; size = 4
__capacity$ = 8						; size = 4
?reserve@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXH@Z PROC ; ozcollide::Vector<ozcollide::Polygon *>::reserve, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 130  : 		T *old = mem_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _old$[ebp], ecx

; 131  : 		mem_ = (T*) malloc(_capacity * sizeof(T));

	mov	edx, DWORD PTR __capacity$[ebp]
	shl	edx, 2
	push	edx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 132  : 		int toCopy = _capacity > capacity_ ? capacity_ : _capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __capacity$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jle	SHORT $LN4@reserve
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN5@reserve
$LN4@reserve:
	mov	eax, DWORD PTR __capacity$[ebp]
	mov	DWORD PTR tv70[ebp], eax
$LN5@reserve:
	mov	ecx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _toCopy$[ebp], ecx

; 133  : 		memcpy(mem_, old, toCopy * sizeof(T));

	mov	edx, DWORD PTR _toCopy$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _old$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 134  : 		if (old)

	cmp	DWORD PTR _old$[ebp], 0
	je	SHORT $LN1@reserve

; 135  : 			free(old);

	mov	eax, DWORD PTR _old$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$LN1@reserve:

; 136  : 		capacity_ = _capacity;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __capacity$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 137  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$Vector@PAVPolygon@ozcollide@@@ozcollide@@QAEXH@Z ENDP ; ozcollide::Vector<ozcollide::Polygon *>::reserve
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?reserve@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXH@Z
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
_toCopy$ = -8						; size = 4
_old$ = -4						; size = 4
__capacity$ = 8						; size = 4
?reserve@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXH@Z PROC ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::reserve, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 130  : 		T *old = mem_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _old$[ebp], ecx

; 131  : 		mem_ = (T*) malloc(_capacity * sizeof(T));

	mov	edx, DWORD PTR __capacity$[ebp]
	shl	edx, 2
	push	edx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 132  : 		int toCopy = _capacity > capacity_ ? capacity_ : _capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __capacity$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jle	SHORT $LN4@reserve@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN5@reserve@2
$LN4@reserve@2:
	mov	eax, DWORD PTR __capacity$[ebp]
	mov	DWORD PTR tv70[ebp], eax
$LN5@reserve@2:
	mov	ecx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _toCopy$[ebp], ecx

; 133  : 		memcpy(mem_, old, toCopy * sizeof(T));

	mov	edx, DWORD PTR _toCopy$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _old$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 134  : 		if (old)

	cmp	DWORD PTR _old$[ebp], 0
	je	SHORT $LN1@reserve@2

; 135  : 			free(old);

	mov	eax, DWORD PTR _old$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$LN1@reserve@2:

; 136  : 		capacity_ = _capacity;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __capacity$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 137  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$Vector@PAVWorkingItem@AABBTreePolyBuilder@ozcollide@@@ozcollide@@QAEXH@Z ENDP ; ozcollide::Vector<ozcollide::AABBTreePolyBuilder::WorkingItem *>::reserve
_TEXT	ENDS
END
