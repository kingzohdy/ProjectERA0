; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\sdk\ozcollide\dist_pointline.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??ZVec3f@ozcollide@@QAEXABV01@@Z		; ozcollide::Vec3f::operator-=
PUBLIC	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z		; ozcollide::Vec3f::operator+
PUBLIC	??DVec3f@ozcollide@@QBE?AV01@M@Z		; ozcollide::Vec3f::operator*
PUBLIC	?dot@Vec3f@ozcollide@@QBEMABV12@@Z		; ozcollide::Vec3f::dot
PUBLIC	?lenSq@Vec3f@ozcollide@@QBEMXZ			; ozcollide::Vec3f::lenSq
PUBLIC	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z		; ozcollide::Vec3f::operator-
PUBLIC	?sqrDistancePointToLine@ozcollide@@YAMABVVec3f@1@00PAV21@@Z ; ozcollide::sqrDistancePointToLine
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\dist_pointline.cpp
_TEXT	SEGMENT
$T6394 = -56						; size = 12
_disp$ = -44						; size = 12
_s$ = -32						; size = 12
_lenSq$ = -20						; size = 4
_v$ = -16						; size = 12
_dot$ = -4						; size = 4
__point$ = 8						; size = 4
__pt0$ = 12						; size = 4
__pt1$ = 16						; size = 4
__linePt$ = 20						; size = 4
?sqrDistancePointToLine@ozcollide@@YAMABVVec3f@1@00PAV21@@Z PROC ; ozcollide::sqrDistancePointToLine

; 35   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H

; 36   : 	Vec3f v = _point - _pt0;

	mov	eax, DWORD PTR __pt0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __point$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 37   : 	Vec3f s = _pt1 - _pt0;

	mov	edx, DWORD PTR __pt0$[ebp]
	push	edx
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR __pt1$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 38   : 	float lenSq = s.lenSq();

	lea	ecx, DWORD PTR _s$[ebp]
	call	?lenSq@Vec3f@ozcollide@@QBEMXZ		; ozcollide::Vec3f::lenSq
	fstp	DWORD PTR _lenSq$[ebp]

; 39   : 	float dot = v.dot(s) / lenSq;

	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _v$[ebp]
	call	?dot@Vec3f@ozcollide@@QBEMABV12@@Z	; ozcollide::Vec3f::dot
	fdiv	DWORD PTR _lenSq$[ebp]
	fstp	DWORD PTR _dot$[ebp]

; 40   : 	Vec3f disp = s * dot;

	push	ecx
	fld	DWORD PTR _dot$[ebp]
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _disp$[ebp]
	push	edx
	lea	ecx, DWORD PTR _s$[ebp]
	call	??DVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator*

; 41   : 	if (_linePt)

	cmp	DWORD PTR __linePt$[ebp], 0
	je	SHORT $LN1@sqrDistanc

; 42   : 		*_linePt = _pt0 + disp;

	lea	eax, DWORD PTR _disp$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T6394[ebp]
	push	ecx
	mov	ecx, DWORD PTR __pt0$[ebp]
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+
	mov	edx, DWORD PTR __linePt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax
$LN1@sqrDistanc:

; 43   : 	v -= disp;

	lea	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _v$[ebp]
	call	??ZVec3f@ozcollide@@QAEXABV01@@Z	; ozcollide::Vec3f::operator-=

; 44   : 	return v.lenSq();

	lea	ecx, DWORD PTR _v$[ebp]
	call	?lenSq@Vec3f@ozcollide@@QBEMXZ		; ozcollide::Vec3f::lenSq

; 45   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?sqrDistancePointToLine@ozcollide@@YAMABVVec3f@1@00PAV21@@Z ENDP ; ozcollide::sqrDistancePointToLine
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
_TEXT	ENDS
;	COMDAT ??ZVec3f@ozcollide@@QAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__v$ = 8						; size = 4
??ZVec3f@ozcollide@@QAEXABV01@@Z PROC			; ozcollide::Vec3f::operator-=, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		x -= _v.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 60   : 		y -= _v.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 61   : 		z -= _v.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 62   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??ZVec3f@ozcollide@@QAEXABV01@@Z ENDP			; ozcollide::Vec3f::operator-=
_TEXT	ENDS
PUBLIC	??0Vec3f@ozcollide@@QAE@MMM@Z			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
;	COMDAT ??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv89 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__v$ = 12						; size = 4
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z PROC		; ozcollide::Vec3f::operator-, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		return Vec3f(x - _v.x, y - _v.y, z - _v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 96   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z ENDP		; ozcollide::Vec3f::operator-
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0Vec3f@ozcollide@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0Vec3f@ozcollide@@QAE@MMM@Z PROC			; ozcollide::Vec3f::Vec3f, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __x$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __y$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __z$[ebp]
	fstp	DWORD PTR [edx+8]

; 43   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vec3f@ozcollide@@QAE@MMM@Z ENDP			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv89 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__v$ = 12						; size = 4
??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z PROC		; ozcollide::Vec3f::operator+, COMDAT
; _this$ = ecx

; 99   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 		return Vec3f(x + _v.x, y + _v.y, z + _v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __v$[ebp]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR __v$[ebp]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 101  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z ENDP		; ozcollide::Vec3f::operator+
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??DVec3f@ozcollide@@QBE?AV01@M@Z
_TEXT	SEGMENT
tv87 = -16						; size = 4
tv85 = -12						; size = 4
tv83 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__m$ = 12						; size = 4
??DVec3f@ozcollide@@QBE?AV01@M@Z PROC			; ozcollide::Vec3f::operator*, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 		return Vec3f(x * _m, y * _m, z * _m);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR __m$[ebp]
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR __m$[ebp]
	fstp	DWORD PTR tv85[ebp]
	fld	DWORD PTR tv85[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR __m$[ebp]
	fstp	DWORD PTR tv87[ebp]
	fld	DWORD PTR tv87[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 111  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??DVec3f@ozcollide@@QBE?AV01@M@Z ENDP			; ozcollide::Vec3f::operator*
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?lenSq@Vec3f@ozcollide@@QBEMXZ
_TEXT	SEGMENT
tv86 = -8						; size = 4
_this$ = -4						; size = 4
?lenSq@Vec3f@ozcollide@@QBEMXZ PROC			; ozcollide::Vec3f::lenSq, COMDAT
; _this$ = ecx

; 158  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 159  : 		return x * x + y * y + z * z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]

; 160  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?lenSq@Vec3f@ozcollide@@QBEMXZ ENDP			; ozcollide::Vec3f::lenSq
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?dot@Vec3f@ozcollide@@QBEMABV12@@Z
_TEXT	SEGMENT
tv86 = -8						; size = 4
_this$ = -4						; size = 4
__v$ = 8						; size = 4
?dot@Vec3f@ozcollide@@QBEMABV12@@Z PROC			; ozcollide::Vec3f::dot, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 		return x * _v.x + y * _v.y + z * _v.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR __v$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR __v$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]

; 165  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?dot@Vec3f@ozcollide@@QBEMABV12@@Z ENDP			; ozcollide::Vec3f::dot
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?distancePointToLine@ozcollide@@YAMABVVec3f@1@00PAV21@@Z ; ozcollide::distancePointToLine
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\dist_pointline.cpp
_TEXT	SEGMENT
__point$ = 8						; size = 4
__pt0$ = 12						; size = 4
__pt1$ = 16						; size = 4
__linePt$ = 20						; size = 4
?distancePointToLine@ozcollide@@YAMABVVec3f@1@00PAV21@@Z PROC ; ozcollide::distancePointToLine

; 51   : {

	push	ebp
	mov	ebp, esp

; 52   : 	return sqrt( sqrDistancePointToLine(_point, _pt0, _pt1, _linePt) );

	mov	eax, DWORD PTR __linePt$[ebp]
	push	eax
	mov	ecx, DWORD PTR __pt1$[ebp]
	push	ecx
	mov	edx, DWORD PTR __pt0$[ebp]
	push	edx
	mov	eax, DWORD PTR __point$[ebp]
	push	eax
	call	?sqrDistancePointToLine@ozcollide@@YAMABVVec3f@1@00PAV21@@Z ; ozcollide::sqrDistancePointToLine
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 53   : }

	pop	ebp
	ret	0
?distancePointToLine@ozcollide@@YAMABVVec3f@1@00PAV21@@Z ENDP ; ozcollide::distancePointToLine
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 534  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 423  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
END
