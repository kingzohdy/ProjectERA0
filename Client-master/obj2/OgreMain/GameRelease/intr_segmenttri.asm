; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\sdk\ozcollide\intr_segmenttri.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z		; ozcollide::Vec3f::operator+
PUBLIC	??DVec3f@ozcollide@@QBE?AV01@M@Z		; ozcollide::Vec3f::operator*
PUBLIC	?dist@Plane@ozcollide@@QBEMABVVec3f@2@@Z	; ozcollide::Plane::dist
PUBLIC	__real@0000000000000000
PUBLIC	?dot@Plane@ozcollide@@QBEMABVVec3f@2@@Z		; ozcollide::Plane::dot
PUBLIC	?testIntersectionRayTri@ozcollide@@YA_NABVVec3f@1@0000PAV21@@Z ; ozcollide::testIntersectionRayTri
EXTRN	?isPointInsideTriangle@ozcollide@@YA_NABVVec3f@1@000@Z:PROC ; ozcollide::isPointInsideTriangle
EXTRN	?fromPointsNN@Plane@ozcollide@@QAEXABVVec3f@2@00@Z:PROC ; ozcollide::Plane::fromPointsNN
EXTRN	??0Plane@ozcollide@@QAE@XZ:PROC			; ozcollide::Plane::Plane
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
; File i:\svnroot\client\sdk\ozcollide\intr_segmenttri.cpp
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
$T6520 = -52						; size = 12
_plane$ = -40						; size = 16
_t$ = -24						; size = 4
_div$ = -20						; size = 4
_pt$ = -16						; size = 12
_res$ = -1						; size = 1
__rayOrg$ = 8						; size = 4
__rayDir$ = 12						; size = 4
__v0$ = 16						; size = 4
__v1$ = 20						; size = 4
__v2$ = 24						; size = 4
__intrPoint$ = 28					; size = 4
?testIntersectionRayTri@ozcollide@@YA_NABVVec3f@1@0000PAV21@@Z PROC ; ozcollide::testIntersectionRayTri

; 38   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 39   : 
; 40   : 	Plane plane;

	lea	ecx, DWORD PTR _plane$[ebp]
	call	??0Plane@ozcollide@@QAE@XZ		; ozcollide::Plane::Plane

; 41   : 	plane.fromPointsNN(_v0, _v1, _v2);

	mov	eax, DWORD PTR __v2$[ebp]
	push	eax
	mov	ecx, DWORD PTR __v1$[ebp]
	push	ecx
	mov	edx, DWORD PTR __v0$[ebp]
	push	edx
	lea	ecx, DWORD PTR _plane$[ebp]
	call	?fromPointsNN@Plane@ozcollide@@QAEXABVVec3f@2@00@Z ; ozcollide::Plane::fromPointsNN

; 42   : 
; 43   : 	float div = plane.dot(_rayDir);

	mov	eax, DWORD PTR __rayDir$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plane$[ebp]
	call	?dot@Plane@ozcollide@@QBEMABVVec3f@2@@Z	; ozcollide::Plane::dot
	fstp	DWORD PTR _div$[ebp]

; 44   : 	if (div == 0)

	fld	DWORD PTR _div$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@testInters

; 45   : 		return false;

	xor	al, al
	jmp	$LN4@testInters
$LN3@testInters:

; 46   : 
; 47   : 	float t = -plane.dist(_rayOrg) / div;

	mov	ecx, DWORD PTR __rayOrg$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _plane$[ebp]
	call	?dist@Plane@ozcollide@@QBEMABVVec3f@2@@Z ; ozcollide::Plane::dist
	fchs
	fdiv	DWORD PTR _div$[ebp]
	fstp	DWORD PTR _t$[ebp]

; 48   : 	if (t < 0)

	fld	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@testInters

; 49   : 		return false;

	xor	al, al
	jmp	SHORT $LN4@testInters
$LN2@testInters:

; 50   : 	Vec3f pt = _rayDir * t + _rayOrg;

	mov	edx, DWORD PTR __rayOrg$[ebp]
	push	edx
	lea	eax, DWORD PTR _pt$[ebp]
	push	eax
	push	ecx
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T6520[ebp]
	push	ecx
	mov	ecx, DWORD PTR __rayDir$[ebp]
	call	??DVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator*
	mov	ecx, eax
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+

; 51   : 
; 52   : 	bool res = isPointInsideTriangle(_v0, _v1, _v2, pt);

	lea	edx, DWORD PTR _pt$[ebp]
	push	edx
	mov	eax, DWORD PTR __v2$[ebp]
	push	eax
	mov	ecx, DWORD PTR __v1$[ebp]
	push	ecx
	mov	edx, DWORD PTR __v0$[ebp]
	push	edx
	call	?isPointInsideTriangle@ozcollide@@YA_NABVVec3f@1@000@Z ; ozcollide::isPointInsideTriangle
	add	esp, 16					; 00000010H
	mov	BYTE PTR _res$[ebp], al

; 53   : 
; 54   : 	if (res == true && _intrPoint)

	movzx	eax, BYTE PTR _res$[ebp]
	cmp	eax, 1
	jne	SHORT $LN1@testInters
	cmp	DWORD PTR __intrPoint$[ebp], 0
	je	SHORT $LN1@testInters

; 55   : 		*_intrPoint = pt;

	mov	ecx, DWORD PTR __intrPoint$[ebp]
	mov	edx, DWORD PTR _pt$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _pt$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _pt$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
$LN1@testInters:

; 56   : 
; 57   : 	return res;

	mov	al, BYTE PTR _res$[ebp]
$LN4@testInters:

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?testIntersectionRayTri@ozcollide@@YA_NABVVec3f@1@0000PAV21@@Z ENDP ; ozcollide::testIntersectionRayTri
_TEXT	ENDS
PUBLIC	??0Vec3f@ozcollide@@QAE@MMM@Z			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
;	COMDAT ??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv89 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__v$ = 12						; size = 4
??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z PROC		; ozcollide::Vec3f::operator+, COMDAT
; _this$ = ecx

; 99   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 		return Vec3f(x + _v.x, y + _v.y, z + _v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __v$[ebp]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR __v$[ebp]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 101  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z ENDP		; ozcollide::Vec3f::operator+
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0Vec3f@ozcollide@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0Vec3f@ozcollide@@QAE@MMM@Z PROC			; ozcollide::Vec3f::Vec3f, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __x$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __y$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __z$[ebp]
	fstp	DWORD PTR [edx+8]

; 43   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vec3f@ozcollide@@QAE@MMM@Z ENDP			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??DVec3f@ozcollide@@QBE?AV01@M@Z
_TEXT	SEGMENT
tv87 = -16						; size = 4
tv85 = -12						; size = 4
tv83 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__m$ = 12						; size = 4
??DVec3f@ozcollide@@QBE?AV01@M@Z PROC			; ozcollide::Vec3f::operator*, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 		return Vec3f(x * _m, y * _m, z * _m);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR __m$[ebp]
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR __m$[ebp]
	fstp	DWORD PTR tv85[ebp]
	fld	DWORD PTR tv85[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR __m$[ebp]
	fstp	DWORD PTR tv87[ebp]
	fld	DWORD PTR tv87[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 111  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??DVec3f@ozcollide@@QBE?AV01@M@Z ENDP			; ozcollide::Vec3f::operator*
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\plane.h
_TEXT	ENDS
;	COMDAT ?dot@Plane@ozcollide@@QBEMABVVec3f@2@@Z
_TEXT	SEGMENT
tv86 = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?dot@Plane@ozcollide@@QBEMABVVec3f@2@@Z PROC		; ozcollide::Plane::dot, COMDAT
; _this$ = ecx

; 50   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return a * p.x + b * p.y + c * p.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _p$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _p$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _p$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]

; 52   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?dot@Plane@ozcollide@@QBEMABVVec3f@2@@Z ENDP		; ozcollide::Plane::dot
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?dist@Plane@ozcollide@@QBEMABVVec3f@2@@Z
_TEXT	SEGMENT
tv90 = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?dist@Plane@ozcollide@@QBEMABVVec3f@2@@Z PROC		; ozcollide::Plane::dist, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return a * p.x + b * p.y + c * p.z + d;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _p$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _p$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _p$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+12]
	fstp	DWORD PTR tv90[ebp]
	fld	DWORD PTR tv90[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?dist@Plane@ozcollide@@QBEMABVVec3f@2@@Z ENDP		; ozcollide::Plane::dist
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z		; ozcollide::Vec3f::operator-
PUBLIC	?testIntersectionSegmentTri@ozcollide@@YA_NABVVec3f@1@0000PAV21@@Z ; ozcollide::testIntersectionSegmentTri
;	COMDAT __real@3ff0000000000000
; File i:\svnroot\client\sdk\ozcollide\intr_segmenttri.cpp
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
$T6535 = -64						; size = 12
_plane$ = -52						; size = 16
_t$ = -36						; size = 4
_div$ = -32						; size = 4
_pt$ = -28						; size = 12
_ray$ = -16						; size = 12
_res$ = -1						; size = 1
__seg_pt0$ = 8						; size = 4
__seg_pt1$ = 12						; size = 4
__v0$ = 16						; size = 4
__v1$ = 20						; size = 4
__v2$ = 24						; size = 4
__intrPoint$ = 28					; size = 4
?testIntersectionSegmentTri@ozcollide@@YA_NABVVec3f@1@0000PAV21@@Z PROC ; ozcollide::testIntersectionSegmentTri

; 66   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 67   : 	Plane plane;

	lea	ecx, DWORD PTR _plane$[ebp]
	call	??0Plane@ozcollide@@QAE@XZ		; ozcollide::Plane::Plane

; 68   : 	plane.fromPointsNN(_v0, _v1, _v2);

	mov	eax, DWORD PTR __v2$[ebp]
	push	eax
	mov	ecx, DWORD PTR __v1$[ebp]
	push	ecx
	mov	edx, DWORD PTR __v0$[ebp]
	push	edx
	lea	ecx, DWORD PTR _plane$[ebp]
	call	?fromPointsNN@Plane@ozcollide@@QAEXABVVec3f@2@00@Z ; ozcollide::Plane::fromPointsNN

; 69   : 
; 70   : 	Vec3f ray = _seg_pt1 - _seg_pt0;

	mov	eax, DWORD PTR __seg_pt0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ray$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __seg_pt1$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 71   : 
; 72   : 	float div = plane.dot(ray);

	lea	edx, DWORD PTR _ray$[ebp]
	push	edx
	lea	ecx, DWORD PTR _plane$[ebp]
	call	?dot@Plane@ozcollide@@QBEMABVVec3f@2@@Z	; ozcollide::Plane::dot
	fstp	DWORD PTR _div$[ebp]

; 73   : 	if (div == 0)

	fld	DWORD PTR _div$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@testInters@2

; 74   : 		return false;

	xor	al, al
	jmp	$LN5@testInters@2
$LN4@testInters@2:

; 75   : 
; 76   : 	float t = -plane.dist(_seg_pt0) / div;

	mov	eax, DWORD PTR __seg_pt0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plane$[ebp]
	call	?dist@Plane@ozcollide@@QBEMABVVec3f@2@@Z ; ozcollide::Plane::dist
	fchs
	fdiv	DWORD PTR _div$[ebp]
	fstp	DWORD PTR _t$[ebp]

; 77   : 	if (t < 0 || t > 1)

	fld	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN2@testInters@2
	fld	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@testInters@2
$LN2@testInters@2:

; 78   : 		return false;

	xor	al, al
	jmp	SHORT $LN5@testInters@2
$LN3@testInters@2:

; 79   : 	Vec3f pt = ray * t + _seg_pt0;

	mov	ecx, DWORD PTR __seg_pt0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pt$[ebp]
	push	edx
	push	ecx
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T6535[ebp]
	push	eax
	lea	ecx, DWORD PTR _ray$[ebp]
	call	??DVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator*
	mov	ecx, eax
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+

; 80   : 
; 81   : 	bool res = isPointInsideTriangle(_v0, _v1, _v2, pt);

	lea	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR __v2$[ebp]
	push	edx
	mov	eax, DWORD PTR __v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR __v0$[ebp]
	push	ecx
	call	?isPointInsideTriangle@ozcollide@@YA_NABVVec3f@1@000@Z ; ozcollide::isPointInsideTriangle
	add	esp, 16					; 00000010H
	mov	BYTE PTR _res$[ebp], al

; 82   : 
; 83   : 	if (res == true && _intrPoint)

	movzx	edx, BYTE PTR _res$[ebp]
	cmp	edx, 1
	jne	SHORT $LN1@testInters@2
	cmp	DWORD PTR __intrPoint$[ebp], 0
	je	SHORT $LN1@testInters@2

; 84   : 		*_intrPoint = pt;

	mov	eax, DWORD PTR __intrPoint$[ebp]
	mov	ecx, DWORD PTR _pt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _pt$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _pt$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
$LN1@testInters@2:

; 85   : 
; 86   : 	return res;

	mov	al, BYTE PTR _res$[ebp]
$LN5@testInters@2:

; 87   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?testIntersectionSegmentTri@ozcollide@@YA_NABVVec3f@1@0000PAV21@@Z ENDP ; ozcollide::testIntersectionSegmentTri
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
_TEXT	ENDS
;	COMDAT ??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv89 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__v$ = 12						; size = 4
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z PROC		; ozcollide::Vec3f::operator-, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		return Vec3f(x - _v.x, y - _v.y, z - _v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 96   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z ENDP		; ozcollide::Vec3f::operator-
_TEXT	ENDS
PUBLIC	?intersectionLinePlane@ozcollide@@YA_NABVVec3f@1@0ABVPlane@1@PAV21@@Z ; ozcollide::intersectionLinePlane
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\intr_segmenttri.cpp
_TEXT	SEGMENT
$T6542 = -44						; size = 12
$T6541 = -32						; size = 12
_t$ = -20						; size = 4
_dir$ = -16						; size = 12
_div$ = -4						; size = 4
__pt0$ = 8						; size = 4
__pt1$ = 12						; size = 4
__plane$ = 16						; size = 4
__intrPoint$ = 20					; size = 4
?intersectionLinePlane@ozcollide@@YA_NABVVec3f@1@0ABVPlane@1@PAV21@@Z PROC ; ozcollide::intersectionLinePlane

; 93   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 94   : 
; 95   : 	Vec3f dir = _pt1 - _pt0;

	mov	eax, DWORD PTR __pt0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dir$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __pt1$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 96   : 	float div = _plane.dot(dir);

	lea	edx, DWORD PTR _dir$[ebp]
	push	edx
	mov	ecx, DWORD PTR __plane$[ebp]
	call	?dot@Plane@ozcollide@@QBEMABVVec3f@2@@Z	; ozcollide::Plane::dot
	fstp	DWORD PTR _div$[ebp]

; 97   : 	if (div == 0)

	fld	DWORD PTR _div$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@intersecti

; 98   : 		return false;

	xor	al, al
	jmp	SHORT $LN2@intersecti
$LN1@intersecti:

; 99   : 
; 100  : 	float t = -_plane.dist(_pt0) / div;

	mov	eax, DWORD PTR __pt0$[ebp]
	push	eax
	mov	ecx, DWORD PTR __plane$[ebp]
	call	?dist@Plane@ozcollide@@QBEMABVVec3f@2@@Z ; ozcollide::Plane::dist
	fchs
	fdiv	DWORD PTR _div$[ebp]
	fstp	DWORD PTR _t$[ebp]

; 101  : 	*_intrPoint = dir * t + _pt0;

	mov	ecx, DWORD PTR __pt0$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T6542[ebp]
	push	edx
	push	ecx
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T6541[ebp]
	push	eax
	lea	ecx, DWORD PTR _dir$[ebp]
	call	??DVec3f@ozcollide@@QBE?AV01@M@Z	; ozcollide::Vec3f::operator*
	mov	ecx, eax
	call	??HVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator+
	mov	ecx, DWORD PTR __intrPoint$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 102  : 
; 103  : 	return true;

	mov	al, 1
$LN2@intersecti:

; 104  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?intersectionLinePlane@ozcollide@@YA_NABVVec3f@1@0ABVPlane@1@PAV21@@Z ENDP ; ozcollide::intersectionLinePlane
_TEXT	ENDS
END
