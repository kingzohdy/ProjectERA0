; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\sdk\ozcollide\intr_sphereline.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	__real@0000000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@4000000000000000
PUBLIC	?testIntersectionSphereLine@ozcollide@@YA_NABVSphere@1@ABVVec3f@1@1PAHPAM3@Z ; ozcollide::testIntersectionSphereLine
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
; File i:\svnroot\client\sdk\ozcollide\intr_sphereline.cpp
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
tv462 = -40						; size = 8
tv447 = -32						; size = 4
tv460 = -28						; size = 8
tv432 = -20						; size = 4
_c$ = -16						; size = 4
_b$ = -12						; size = 4
_i$ = -8						; size = 4
_a$ = -4						; size = 4
__sphere$ = 8						; size = 4
__pt0$ = 12						; size = 4
__pt1$ = 16						; size = 4
__nbInter$ = 20						; size = 4
__inter1$ = 24						; size = 4
__inter2$ = 28						; size = 4
?testIntersectionSphereLine@ozcollide@@YA_NABVSphere@1@ABVVec3f@1@1PAHPAM3@Z PROC ; ozcollide::testIntersectionSphereLine

; 40   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 41   : 	float a, b, c, i;
; 42   : 
; 43   : 	a = square(_pt1.x - _pt0.x) + square(_pt1.y - _pt0.y) + square(_pt1.z - _pt0.z);

	mov	eax, DWORD PTR __pt1$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR __pt0$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR __pt1$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR __pt0$[ebp]
	fsub	DWORD PTR [eax]
	fmulp	ST(1), ST(0)
	mov	ecx, DWORD PTR __pt1$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR __pt0$[ebp]
	fsub	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __pt1$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR __pt0$[ebp]
	fsub	DWORD PTR [ecx+4]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR __pt1$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR __pt0$[ebp]
	fsub	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __pt1$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR __pt0$[ebp]
	fsub	DWORD PTR [edx+8]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _a$[ebp]

; 44   : 	b =  2 * ( (_pt1.x - _pt0.x) * (_pt0.x - _sphere.center.x)
; 45   : 		+ (_pt1.y - _pt0.y) * (_pt0.y - _sphere.center.y)
; 46   : 		+ (_pt1.z - _pt0.z) * (_pt0.z - _sphere.center.z) ) ;

	mov	eax, DWORD PTR __pt1$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR __pt0$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR __pt0$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR __sphere$[ebp]
	fsub	DWORD PTR [eax]
	fmulp	ST(1), ST(0)
	mov	ecx, DWORD PTR __pt1$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR __pt0$[ebp]
	fsub	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __pt0$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR __sphere$[ebp]
	fsub	DWORD PTR [ecx+4]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR __pt1$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR __pt0$[ebp]
	fsub	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __pt0$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR __sphere$[ebp]
	fsub	DWORD PTR [edx+8]
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR _b$[ebp]

; 47   : 	c = square(_sphere.center.x) + square(_sphere.center.y) +
; 48   : 		square(_sphere.center.z) + square(_pt0.x) +
; 49   : 		square(_pt0.y) + square(_pt0.z) -
; 50   : 		2 * ( _sphere.center.x * _pt0.x + _sphere.center.y * _pt0.y + _sphere.center.z * _pt0.z ) - square(_sphere.radius) ;

	mov	eax, DWORD PTR __sphere$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR __sphere$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR __sphere$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __sphere$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR __sphere$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR __sphere$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR __pt0$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR __pt0$[ebp]
	fmul	DWORD PTR [ecx]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR __pt0$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __pt0$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR __pt0$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR __pt0$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR __sphere$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR __pt0$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR __sphere$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __pt0$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR __sphere$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR __pt0$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR __real@4000000000000000
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR __sphere$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR __sphere$[ebp]
	fmul	DWORD PTR [ecx+12]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _c$[ebp]

; 51   : 	i =  b * b - 4 * a * c;

	fld	DWORD PTR _b$[ebp]
	fmul	DWORD PTR _b$[ebp]
	fld	DWORD PTR _a$[ebp]
	fmul	QWORD PTR __real@4010000000000000
	fmul	DWORD PTR _c$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _i$[ebp]

; 52   : 
; 53   : 	if (i < 0)

	fld	DWORD PTR _i$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN8@testInters

; 54   : 		return false;

	xor	al, al
	jmp	$LN9@testInters
$LN8@testInters:

; 55   : 
; 56   : 	if (i == 0) {

	fld	DWORD PTR _i$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN7@testInters

; 57   : 		if (_nbInter) *_nbInter = 1;

	cmp	DWORD PTR __nbInter$[ebp], 0
	je	SHORT $LN6@testInters
	mov	edx, DWORD PTR __nbInter$[ebp]
	mov	DWORD PTR [edx], 1
$LN6@testInters:

; 58   : 		if (_inter1) *_inter1 = -b / (2 * a);

	cmp	DWORD PTR __inter1$[ebp], 0
	je	SHORT $LN5@testInters
	fld	DWORD PTR _b$[ebp]
	fchs
	fld	DWORD PTR _a$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fdivp	ST(1), ST(0)
	mov	eax, DWORD PTR __inter1$[ebp]
	fstp	DWORD PTR [eax]
$LN5@testInters:

; 59   : 	}
; 60   : 	else {

	jmp	$LN1@testInters
$LN7@testInters:

; 61   : 		if (_nbInter) *_nbInter = 2;

	cmp	DWORD PTR __nbInter$[ebp], 0
	je	SHORT $LN3@testInters
	mov	ecx, DWORD PTR __nbInter$[ebp]
	mov	DWORD PTR [ecx], 2
$LN3@testInters:

; 62   : 		if (_inter1) *_inter1 = (-b + sqrt( square(b) - 4*a*c )) / (2 * a);

	cmp	DWORD PTR __inter1$[ebp], 0
	je	SHORT $LN2@testInters
	fld	DWORD PTR _b$[ebp]
	fchs
	fld	DWORD PTR _b$[ebp]
	fmul	DWORD PTR _b$[ebp]
	fld	DWORD PTR _a$[ebp]
	fmul	QWORD PTR __real@4010000000000000
	fmul	DWORD PTR _c$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR tv432[ebp]
	fld	DWORD PTR tv432[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fstp	QWORD PTR tv460[ebp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fadd	QWORD PTR tv460[ebp]
	fld	DWORD PTR _a$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fdivp	ST(1), ST(0)
	mov	edx, DWORD PTR __inter1$[ebp]
	fstp	DWORD PTR [edx]
$LN2@testInters:

; 63   : 		if (_inter2) *_inter2 = (-b - sqrt( square(b) - 4*a*c )) / (2 * a);

	cmp	DWORD PTR __inter2$[ebp], 0
	je	SHORT $LN1@testInters
	fld	DWORD PTR _b$[ebp]
	fchs
	fld	DWORD PTR _b$[ebp]
	fmul	DWORD PTR _b$[ebp]
	fld	DWORD PTR _a$[ebp]
	fmul	QWORD PTR __real@4010000000000000
	fmul	DWORD PTR _c$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR tv447[ebp]
	fld	DWORD PTR tv447[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fstp	QWORD PTR tv462[ebp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fsubr	QWORD PTR tv462[ebp]
	fld	DWORD PTR _a$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fdivp	ST(1), ST(0)
	mov	eax, DWORD PTR __inter2$[ebp]
	fstp	DWORD PTR [eax]
$LN1@testInters:

; 64   : 	}
; 65   : 
; 66   : 	return true;

	mov	al, 1
$LN9@testInters:

; 67   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?testIntersectionSphereLine@ozcollide@@YA_NABVSphere@1@ABVVec3f@1@1PAHPAM3@Z ENDP ; ozcollide::testIntersectionSphereLine
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 534  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 423  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	__real@bf800000
PUBLIC	?dot@Vec3f@ozcollide@@QBEMABV12@@Z		; ozcollide::Vec3f::dot
PUBLIC	?len@Vec3f@ozcollide@@QBEMXZ			; ozcollide::Vec3f::len
PUBLIC	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z		; ozcollide::Vec3f::operator-
PUBLIC	?intersectRaySphere@ozcollide@@YAMABVVec3f@1@00M@Z ; ozcollide::intersectRaySphere
;	COMDAT __real@bf800000
; File i:\svnroot\client\sdk\ozcollide\intr_sphereline.cpp
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
tv143 = -28						; size = 4
_c$ = -24						; size = 4
_d$ = -20						; size = 4
_q$ = -16						; size = 12
_v$ = -4						; size = 4
__rO$ = 8						; size = 4
__rV$ = 12						; size = 4
__sO$ = 16						; size = 4
__sR$ = 20						; size = 4
?intersectRaySphere@ozcollide@@YAMABVVec3f@1@00M@Z PROC	; ozcollide::intersectRaySphere

; 70   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 71   : 	Vec3f q = _sO - _rO;

	mov	eax, DWORD PTR __rO$[ebp]
	push	eax
	lea	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __sO$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 72   : 	float c = q.len();

	lea	ecx, DWORD PTR _q$[ebp]
	call	?len@Vec3f@ozcollide@@QBEMXZ		; ozcollide::Vec3f::len
	fstp	DWORD PTR _c$[ebp]

; 73   : 	float v = q.dot(_rV);

	mov	edx, DWORD PTR __rV$[ebp]
	push	edx
	lea	ecx, DWORD PTR _q$[ebp]
	call	?dot@Vec3f@ozcollide@@QBEMABV12@@Z	; ozcollide::Vec3f::dot
	fstp	DWORD PTR _v$[ebp]

; 74   : 	float d = _sR * _sR - (c * c - v * v);

	fld	DWORD PTR __sR$[ebp]
	fmul	DWORD PTR __sR$[ebp]
	fld	DWORD PTR _c$[ebp]
	fmul	DWORD PTR _c$[ebp]
	fld	DWORD PTR _v$[ebp]
	fmul	DWORD PTR _v$[ebp]
	fsubp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _d$[ebp]

; 75   : 
; 76   : 	if (d < 0.0f)

	fld	DWORD PTR _d$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@intersectR

; 77   : 		return -1.0f;

	fld	DWORD PTR __real@bf800000
	jmp	SHORT $LN2@intersectR
$LN1@intersectR:

; 78   : 
; 79   : 	return v - sqrt(d);

	push	ecx
	fld	DWORD PTR _d$[ebp]
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fsubr	DWORD PTR _v$[ebp]
	fstp	DWORD PTR tv143[ebp]
	fld	DWORD PTR tv143[ebp]
$LN2@intersectR:

; 80   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?intersectRaySphere@ozcollide@@YAMABVVec3f@1@00M@Z ENDP	; ozcollide::intersectRaySphere
_TEXT	ENDS
PUBLIC	??0Vec3f@ozcollide@@QAE@MMM@Z			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
;	COMDAT ??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv89 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__v$ = 12						; size = 4
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z PROC		; ozcollide::Vec3f::operator-, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		return Vec3f(x - _v.x, y - _v.y, z - _v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 96   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z ENDP		; ozcollide::Vec3f::operator-
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0Vec3f@ozcollide@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0Vec3f@ozcollide@@QAE@MMM@Z PROC			; ozcollide::Vec3f::Vec3f, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __x$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __y$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __z$[ebp]
	fstp	DWORD PTR [edx+8]

; 43   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vec3f@ozcollide@@QAE@MMM@Z ENDP			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?len@Vec3f@ozcollide@@QBEMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_len$ = -4						; size = 4
?len@Vec3f@ozcollide@@QBEMXZ PROC			; ozcollide::Vec3f::len, COMDAT
; _this$ = ecx

; 152  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 153  : 		float len = x * x + y * y + z * z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _len$[ebp]

; 154  : 		return (float) sqrt(len);

	push	ecx
	fld	DWORD PTR _len$[ebp]
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 155  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?len@Vec3f@ozcollide@@QBEMXZ ENDP			; ozcollide::Vec3f::len
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?dot@Vec3f@ozcollide@@QBEMABV12@@Z
_TEXT	SEGMENT
tv86 = -8						; size = 4
_this$ = -4						; size = 4
__v$ = 8						; size = 4
?dot@Vec3f@ozcollide@@QBEMABV12@@Z PROC			; ozcollide::Vec3f::dot, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 		return x * _v.x + y * _v.y + z * _v.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR __v$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR __v$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]

; 165  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?dot@Vec3f@ozcollide@@QBEMABV12@@Z ENDP			; ozcollide::Vec3f::dot
_TEXT	ENDS
END
