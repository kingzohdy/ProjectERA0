; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\sdk\ozcollide\polygon.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??0Vec3f@ozcollide@@QAE@XZ			; ozcollide::Vec3f::Vec3f
PUBLIC	??0Polygon@ozcollide@@QAE@XZ			; ozcollide::Polygon::Polygon
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\polygon.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Polygon@ozcollide@@QAE@XZ PROC			; ozcollide::Polygon::Polygon
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0Vec3f@ozcollide@@QAE@XZ		; ozcollide::Vec3f::Vec3f

; 32   : //	indices_ = NULL;
; 33   : 	nbIndices_ = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 34   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Polygon@ozcollide@@QAE@XZ ENDP			; ozcollide::Polygon::Polygon
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
_TEXT	ENDS
;	COMDAT ??0Vec3f@ozcollide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vec3f@ozcollide@@QAE@XZ PROC				; ozcollide::Vec3f::Vec3f, COMDAT
; _this$ = ecx

; 37   : 	ozinline Vec3f()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	{
; 39   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vec3f@ozcollide@@QAE@XZ ENDP				; ozcollide::Vec3f::Vec3f
_TEXT	ENDS
PUBLIC	??1Polygon@ozcollide@@QAE@XZ			; ozcollide::Polygon::~Polygon
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\polygon.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Polygon@ozcollide@@QAE@XZ PROC			; ozcollide::Polygon::~Polygon
; _this$ = ecx

; 37   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : //	if (!(nbIndices_ & 0x100))
; 39   : //		SAFE_FREE(indices_);
; 40   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1Polygon@ozcollide@@QAE@XZ ENDP			; ozcollide::Polygon::~Polygon
_TEXT	ENDS
PUBLIC	?setNbIndices@Polygon@ozcollide@@QAEXH@Z	; ozcollide::Polygon::setNbIndices
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
__nbIndices$ = 8					; size = 4
?setNbIndices@Polygon@ozcollide@@QAEXH@Z PROC		; ozcollide::Polygon::setNbIndices
; _this$ = ecx

; 43   : {/*

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 	int *indices = (int*) malloc(_nbIndices * 4);
; 45   : 	if (indices_) {
; 46   : 		int size = _nbIndices > nbIndices_ ? nbIndices_ : _nbIndices;
; 47   : 		memcpy(indices, indices_, size * sizeof(int));
; 48   : 	}
; 49   : 
; 50   : 	this->~Polygon();
; 51   : 	indices_ = indices;*/
; 52   : 	nbIndices_ = _nbIndices;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __nbIndices$[ebp]
	mov	DWORD PTR [eax], ecx

; 53   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setNbIndices@Polygon@ozcollide@@QAEXH@Z ENDP		; ozcollide::Polygon::setNbIndices
_TEXT	ENDS
PUBLIC	?isDegenerate@Polygon@ozcollide@@QBE_NXZ	; ozcollide::Polygon::isDegenerate
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isDegenerate@Polygon@ozcollide@@QBE_NXZ PROC		; ozcollide::Polygon::isDegenerate
; _this$ = ecx

; 56   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 	return false;

	xor	al, al

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isDegenerate@Polygon@ozcollide@@QBE_NXZ ENDP		; ozcollide::Polygon::isDegenerate
_TEXT	ENDS
PUBLIC	?copyTo@Polygon@ozcollide@@QBEXAAV12@@Z		; ozcollide::Polygon::copyTo
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -4						; size = 4
__pol$ = 8						; size = 4
?copyTo@Polygon@ozcollide@@QBEXAAV12@@Z PROC		; ozcollide::Polygon::copyTo
; _this$ = ecx

; 61   : {/*

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 	_pol.~Polygon();
; 63   : 	_pol.nbIndices_ = nbIndices_;
; 64   : 	_pol.normal_ = normal_;
; 65   : 	_pol.indices_ = new int[nbIndices_];
; 66   : 	memcpy(_pol.indices_, indices_, sizeof(int) * nbIndices_);
; 67   : 	*/
; 68   : 	_pol.nbIndices_ = nbIndices_;

	mov	eax, DWORD PTR __pol$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 69   : 	_pol.normal_ = normal_;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	mov	ecx, DWORD PTR __pol$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 70   : 	memcpy(_pol.indices_, indices_, sizeof(int) * nbIndices_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __pol$[ebp]
	add	ecx, 4
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 71   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?copyTo@Polygon@ozcollide@@QBEXAAV12@@Z ENDP		; ozcollide::Polygon::copyTo
_TEXT	ENDS
PUBLIC	?clone@Polygon@ozcollide@@QBEPAV12@XZ		; ozcollide::Polygon::clone
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$?clone@Polygon@ozcollide@@QBEPAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?clone@Polygon@ozcollide@@QBEPAV12@XZ$0
__ehfuncinfo$?clone@Polygon@ozcollide@@QBEPAV12@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?clone@Polygon@ozcollide@@QBEPAV12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv71 = -32						; size = 4
_this$ = -28						; size = 4
$T6525 = -24						; size = 4
$T6524 = -20						; size = 4
_pol$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?clone@Polygon@ozcollide@@QBEPAV12@XZ PROC		; ozcollide::Polygon::clone
; _this$ = ecx

; 74   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?clone@Polygon@ozcollide@@QBEPAV12@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 	Polygon *pol = new Polygon();

	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6525[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T6525[ebp], 0
	je	SHORT $LN3@clone
	mov	ecx, DWORD PTR $T6525[ebp]
	call	??0Polygon@ozcollide@@QAE@XZ		; ozcollide::Polygon::Polygon
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@clone
$LN3@clone:
	mov	DWORD PTR tv71[ebp], 0
$LN4@clone:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T6524[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T6524[ebp]
	mov	DWORD PTR _pol$[ebp], ecx

; 76   : 	copyTo(*pol);

	mov	edx, DWORD PTR _pol$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copyTo@Polygon@ozcollide@@QBEXAAV12@@Z	; ozcollide::Polygon::copyTo

; 77   : 	return pol;

	mov	eax, DWORD PTR _pol$[ebp]

; 78   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?clone@Polygon@ozcollide@@QBEPAV12@XZ$0:
	mov	eax, DWORD PTR $T6525[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?clone@Polygon@ozcollide@@QBEPAV12@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?clone@Polygon@ozcollide@@QBEPAV12@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?clone@Polygon@ozcollide@@QBEPAV12@XZ ENDP		; ozcollide::Polygon::clone
END
