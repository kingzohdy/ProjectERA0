; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	i:\svnroot\client\sdk\ozcollide\dist_pointbox.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?dot@Vec3f@ozcollide@@QBEMABV12@@Z		; ozcollide::Vec3f::dot
PUBLIC	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z		; ozcollide::Vec3f::operator-
PUBLIC	?sqrDistancePointToBox@ozcollide@@YAMABVVec3f@1@ABVBox@1@PAV21@@Z ; ozcollide::sqrDistancePointToBox
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\dist_pointbox.cpp
_TEXT	SEGMENT
_z1$ = -52						; size = 4
_x0$ = -48						; size = 4
_z0$ = -44						; size = 4
_x1$ = -40						; size = 4
_y1$ = -36						; size = 4
_y0$ = -32						; size = 4
_closest$ = -28						; size = 12
_ray$ = -16						; size = 12
_sqrDist$ = -4						; size = 4
__pt$ = 8						; size = 4
__box$ = 12						; size = 4
__nearestPoint$ = 16					; size = 4
?sqrDistancePointToBox@ozcollide@@YAMABVVec3f@1@ABVBox@1@PAV21@@Z PROC ; ozcollide::sqrDistancePointToBox

; 31   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 32   : 	float x0 = _box.center.x - _box.extent.x;

	mov	eax, DWORD PTR __box$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR __box$[ebp]
	fsub	DWORD PTR [ecx+12]
	fstp	DWORD PTR _x0$[ebp]

; 33   : 	float x1 = _box.center.x + _box.extent.x;

	mov	edx, DWORD PTR __box$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR __box$[ebp]
	fadd	DWORD PTR [eax+12]
	fstp	DWORD PTR _x1$[ebp]

; 34   : 	float y0 = _box.center.y - _box.extent.y;

	mov	ecx, DWORD PTR __box$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR __box$[ebp]
	fsub	DWORD PTR [edx+16]
	fstp	DWORD PTR _y0$[ebp]

; 35   : 	float y1 = _box.center.y + _box.extent.y;

	mov	eax, DWORD PTR __box$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR __box$[ebp]
	fadd	DWORD PTR [ecx+16]
	fstp	DWORD PTR _y1$[ebp]

; 36   : 	float z0 = _box.center.z - _box.extent.z;

	mov	edx, DWORD PTR __box$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR __box$[ebp]
	fsub	DWORD PTR [eax+20]
	fstp	DWORD PTR _z0$[ebp]

; 37   : 	float z1 = _box.center.z + _box.extent.z;

	mov	ecx, DWORD PTR __box$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR __box$[ebp]
	fadd	DWORD PTR [edx+20]
	fstp	DWORD PTR _z1$[ebp]

; 38   : 
; 39   : 	Vec3f closest = _box.center;

	mov	eax, DWORD PTR __box$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _closest$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _closest$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _closest$[ebp+8], eax

; 40   : 
; 41   : 	if (_pt.x < x0)

	mov	ecx, DWORD PTR __pt$[ebp]
	fld	DWORD PTR [ecx]
	fld	DWORD PTR _x0$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN13@sqrDistanc

; 42   : 		closest.x = x0;

	fld	DWORD PTR _x0$[ebp]
	fstp	DWORD PTR _closest$[ebp]
	jmp	SHORT $LN10@sqrDistanc
$LN13@sqrDistanc:

; 43   : 	else if (_pt.x > x1)

	mov	edx, DWORD PTR __pt$[ebp]
	fld	DWORD PTR [edx]
	fld	DWORD PTR _x1$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN11@sqrDistanc

; 44   : 		closest.x = x1;

	fld	DWORD PTR _x1$[ebp]
	fstp	DWORD PTR _closest$[ebp]

; 45   : 	else

	jmp	SHORT $LN10@sqrDistanc
$LN11@sqrDistanc:

; 46   : 		closest.x = _pt.x;

	mov	eax, DWORD PTR __pt$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _closest$[ebp]
$LN10@sqrDistanc:

; 47   : 
; 48   : 	if (_pt.y < y0)

	mov	ecx, DWORD PTR __pt$[ebp]
	fld	DWORD PTR [ecx+4]
	fld	DWORD PTR _y0$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN9@sqrDistanc

; 49   : 		closest.y = y0;

	fld	DWORD PTR _y0$[ebp]
	fstp	DWORD PTR _closest$[ebp+4]
	jmp	SHORT $LN6@sqrDistanc
$LN9@sqrDistanc:

; 50   : 	else if (_pt.y > y1)

	mov	edx, DWORD PTR __pt$[ebp]
	fld	DWORD PTR [edx+4]
	fld	DWORD PTR _y1$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN7@sqrDistanc

; 51   : 		closest.y = y1;

	fld	DWORD PTR _y1$[ebp]
	fstp	DWORD PTR _closest$[ebp+4]

; 52   : 	else

	jmp	SHORT $LN6@sqrDistanc
$LN7@sqrDistanc:

; 53   : 		closest.y = _pt.y;

	mov	eax, DWORD PTR __pt$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _closest$[ebp+4]
$LN6@sqrDistanc:

; 54   : 
; 55   : 	if (_pt.z < z0)

	mov	ecx, DWORD PTR __pt$[ebp]
	fld	DWORD PTR [ecx+8]
	fld	DWORD PTR _z0$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN5@sqrDistanc

; 56   : 		closest.z = z0;

	fld	DWORD PTR _z0$[ebp]
	fstp	DWORD PTR _closest$[ebp+8]
	jmp	SHORT $LN2@sqrDistanc
$LN5@sqrDistanc:

; 57   : 	else if (_pt.z > z1)

	mov	edx, DWORD PTR __pt$[ebp]
	fld	DWORD PTR [edx+8]
	fld	DWORD PTR _z1$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@sqrDistanc

; 58   : 		closest.z = z1;

	fld	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR _closest$[ebp+8]

; 59   : 	else

	jmp	SHORT $LN2@sqrDistanc
$LN3@sqrDistanc:

; 60   : 		closest.z = _pt.z;

	mov	eax, DWORD PTR __pt$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _closest$[ebp+8]
$LN2@sqrDistanc:

; 61   : 
; 62   : 	if (_nearestPoint)

	cmp	DWORD PTR __nearestPoint$[ebp], 0
	je	SHORT $LN1@sqrDistanc

; 63   : 		*_nearestPoint = closest;

	mov	ecx, DWORD PTR __nearestPoint$[ebp]
	mov	edx, DWORD PTR _closest$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _closest$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _closest$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
$LN1@sqrDistanc:

; 64   : 
; 65   : 	Vec3f ray = _pt - closest;

	lea	eax, DWORD PTR _closest$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ray$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __pt$[ebp]
	call	??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z	; ozcollide::Vec3f::operator-

; 66   : 	float sqrDist = ray.dot(ray);

	lea	edx, DWORD PTR _ray$[ebp]
	push	edx
	lea	ecx, DWORD PTR _ray$[ebp]
	call	?dot@Vec3f@ozcollide@@QBEMABV12@@Z	; ozcollide::Vec3f::dot
	fstp	DWORD PTR _sqrDist$[ebp]

; 67   : 
; 68   : 	return sqrDist;

	fld	DWORD PTR _sqrDist$[ebp]

; 69   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?sqrDistancePointToBox@ozcollide@@YAMABVVec3f@1@ABVBox@1@PAV21@@Z ENDP ; ozcollide::sqrDistancePointToBox
_TEXT	ENDS
PUBLIC	??0Vec3f@ozcollide@@QAE@MMM@Z			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\vec3f.h
;	COMDAT ??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv89 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__v$ = 12						; size = 4
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z PROC		; ozcollide::Vec3f::operator-, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		return Vec3f(x - _v.x, y - _v.y, z - _v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR __v$[ebp]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vec3f@ozcollide@@QAE@MMM@Z		; ozcollide::Vec3f::Vec3f
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 96   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
??GVec3f@ozcollide@@QBE?AV01@ABV01@@Z ENDP		; ozcollide::Vec3f::operator-
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0Vec3f@ozcollide@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0Vec3f@ozcollide@@QAE@MMM@Z PROC			; ozcollide::Vec3f::Vec3f, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __x$[ebp]
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __y$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __z$[ebp]
	fstp	DWORD PTR [edx+8]

; 43   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vec3f@ozcollide@@QAE@MMM@Z ENDP			; ozcollide::Vec3f::Vec3f
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?dot@Vec3f@ozcollide@@QBEMABV12@@Z
_TEXT	SEGMENT
tv86 = -8						; size = 4
_this$ = -4						; size = 4
__v$ = 8						; size = 4
?dot@Vec3f@ozcollide@@QBEMABV12@@Z PROC			; ozcollide::Vec3f::dot, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 		return x * _v.x + y * _v.y + z * _v.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR __v$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR __v$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR __v$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]

; 165  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?dot@Vec3f@ozcollide@@QBEMABV12@@Z ENDP			; ozcollide::Vec3f::dot
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?distancePointToBox@ozcollide@@YAMABVVec3f@1@ABVBox@1@PAV21@@Z ; ozcollide::distancePointToBox
; Function compile flags: /Odtp
; File i:\svnroot\client\sdk\ozcollide\dist_pointbox.cpp
_TEXT	SEGMENT
__pt$ = 8						; size = 4
__box$ = 12						; size = 4
__nearestPoint$ = 16					; size = 4
?distancePointToBox@ozcollide@@YAMABVVec3f@1@ABVBox@1@PAV21@@Z PROC ; ozcollide::distancePointToBox

; 72   : {

	push	ebp
	mov	ebp, esp

; 73   : 	return (float) sqrt(sqrDistancePointToBox(_pt, _box, _nearestPoint));

	mov	eax, DWORD PTR __nearestPoint$[ebp]
	push	eax
	mov	ecx, DWORD PTR __box$[ebp]
	push	ecx
	mov	edx, DWORD PTR __pt$[ebp]
	push	edx
	call	?sqrDistancePointToBox@ozcollide@@YAMABVVec3f@1@ABVBox@1@PAV21@@Z ; ozcollide::sqrDistancePointToBox
	add	esp, 8
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 74   : }

	pop	ebp
	ret	0
?distancePointToBox@ozcollide@@YAMABVVec3f@1@ABVBox@1@PAV21@@Z ENDP ; ozcollide::distancePointToBox
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp
; File d:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 534  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 423  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
END
