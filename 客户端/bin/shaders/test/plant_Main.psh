
#include "header.fx"

sampler s_DiffuseSampler : register(s0);
sampler  s_DepthMapSampler : register(s1);

struct VS_OUTPUTPS
{
	float4 pos      : POSITION;
	float4 color0        : COLOR0; //color0.xyz=ambient lighting,  color0.w=specular lighting
	float2 uv0      : TEXCOORD0;
	float4 color1        : COLOR1; //color1.xyz=shadowed_lighting,  color1.w=specular lighting
#ifdef LIGHT_SHADOW
	float4 uv1            : TEXCOORD1;
#endif

#if FOG_HEIGHT>0 || FOG_DISTANCE>0
	float2 fogc	: TEXCOORD2;
#endif
	float2 fogh: TEXCOORD5;
};

float4 PSMain(VS_OUTPUTPS input) : COLOR0
{
	float4 color = tex2D(s_DiffuseSampler, input.uv0);

    float4 lighting = input.color0;
#ifdef LIGHT_SHADOW
    float shadow = DoHardShadow(s_DepthMapSampler, input.uv1, input.uv1.z/input.uv1.w); 
	shadow = 1.0f - (1.0f - shadow)*g_shadowdensity;
	lighting += shadow*input.color1;
#else
	lighting += input.color1;	
#endif

//#ifdef LIGHT_SPECULAR
 //   color.rgb = lighting.rgb*color.rgb + lighting.a*g_SpecularColor;
//#else
    color.rgb = lighting.rgb*color.rgb;
//#endif

#if FOG_DISTANCE>0
	color.rgb = lerp(g_DistFogColor, color.rgb, input.fogc.x);
#endif
#if FOG_HEIGHT > 0
	color.rgb = lerp(g_HeightFogColor, color.rgb, input.fogc.y);
#endif
    if (g_warfogparameter[0]>0)
	{
		float op = 1-input.fogh.x;
		color.rgb = color.rgb*float3(op,op,op)+g_warfogcolor*float3(input.fogh.x,input.fogh.x,input.fogh.x);
	}

	return color;
}
