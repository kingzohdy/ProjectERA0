#include "header.fx"

float4		g_DeepWaterColor;
float4		g_ShallowWaterColor;
float		g_NumTexRepeat;
float		g_fSpeed;
float		g_fAmp;
float3          g_LightDir;

sampler	DepthSampler : register(s0);
sampler ReflectSampler : register(s1);

/*
texture         g_RefractTexture;
sampler RefractSampler = sampler_state
{
    Texture = <g_RefractTexture>;
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    AddressU = clamp;
    AddressV = clamp;
};
*/

sampler	NormalSampler : register(s2);

struct VS_OUTPUT
{
    float4 pos          : POSITION;
    float2 bumpuv       : TEXCOORD0;
    float4 reflectxy_refractyx : TEXCOORD1;
    float W : TEXCOORD2;
    float3 eyevec : TEXCOORD3;
    
#if FOG_HEIGHT>0 || FOG_DISTANCE>0
	float2 fogc	: TEXCOORD4;
#endif
};

float4 PSMain(VS_OUTPUT input) : COLOR0
{
	g_fSpeed *= 0.7f;
	//float3 normal = tex2D(NormalSampler, input.bumpuv)*2.0 - 1.0;
	float3 nor1 = tex2D( NormalSampler,g_NumTexRepeat*input.bumpuv + float2(0.3*g_fSpeed*g_fTime,0.0f) );
	float3 nor2 = tex2D( NormalSampler,g_NumTexRepeat*input.bumpuv + float2(-0.3*g_fSpeed*g_fTime,0.5f) );
	//float3 nor3 = tex2D( NormalSampler,g_NumTexRepeat*input.bumpuv + float2(0.3f,0.3*g_fSpeed*g_fTime) );
	//float3 nor4 = tex2D( NormalSampler,g_NumTexRepeat*input.bumpuv + float2(0.7f,-0.3*g_fSpeed*g_fTime) );
	//float3 normal = 0.25*(nor1+nor2+nor3+nor4);
	//nor1 = nor1*2.0 - 1.0;
	//nor2 = nor2*2.0 - 1.0;
	float3 normal = nor2 - nor1;
	//normal *= 0.5f;
	//normal = normal*2.0 - 1.0;

	float alpha = tex2D(DepthSampler,input.bumpuv).a;
	float4 watercolor = lerp(g_ShallowWaterColor, g_DeepWaterColor, alpha);

	float ooW = 1.0f / input.W;
	float4 uv = normal.xyxy*g_fAmp*0.01f + input.reflectxy_refractyx*ooW;

	float4 reflect_color = tex2D(ReflectSampler, uv.xy);

	float3 eyevec = normalize(input.eyevec);
	normal = float3(normal.x*g_fAmp, normal.y*g_fAmp, normal.z);
	normalize(normal);

	float4 color = reflect_color*watercolor;
/*
	float diffusecont = dot(g_Lights[0].position.xyz, normal.xzy);
	color += diffusecont*g_SpecularColor*0.23f;

	float3 viewdir = reflect(eyevec, normal.xzy);
	float spec = max(dot(-viewdir, g_Lights[0].position.xyz),0.0f);
*/	

	float diffusecont = dot(g_LightDir, normal.xzy);
	color += diffusecont*g_SpecularColor*0.13f;

	float3 normalY = float3(0.0f, 1.0f, 0.0f);
	float3 viewdir = reflect(eyevec, normalY);
	float spec = max(dot(-viewdir, g_LightDir),0.0f);

	//spec = pow(spec,2);
	float specTemp = spec*spec;
	spec = specTemp * specTemp;
	
	color += spec*g_SpecularColor*0.25f;

#if FOG_DISTANCE>0
	color.rgb = lerp(g_DistFogColor, color.rgb, input.fogc.x);
#endif
#if FOG_HEIGHT > 0
	color.rgb = lerp(g_HeightFogColor, color.rgb, input.fogc.y);
#endif
	return 	float4(color.rgb, watercolor.a);
}
